{"docstore/metadata": {"3aab8c21-2f01-49ea-bd9e-dd247cf49c21": {"doc_hash": "7b8ab6f4cd22076034037208ddad5c4e39dec1170ddfde79e3ef7c946fa0a322"}, "869b4319-8490-4387-88d0-fb025e3fbf22": {"doc_hash": "6ea9011aff149582725fee5e9d2a2b37671acf92db555e1bdc84a35baf6f1ea8", "ref_doc_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21"}, "4e78e5ea-1ae5-4124-a267-429cab145046": {"doc_hash": "b8cb2e2f17c7a0eb51ad063190bca59fc8f4ccfb64df16b8e5e7c874049a998b", "ref_doc_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21"}, "0f94f635-1835-4233-b8ef-9b9a7d1496be": {"doc_hash": "b940878bebeede3ecaf5b025eeb84eb3de511fde859cca8f92edf643092910a2", "ref_doc_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21"}, "c5428558-3b7c-4af0-8d16-a7955c795706": {"doc_hash": "dd0a097a78de8e7fbd7c7aaf043c3e5e90f6dc9fac18c275086043dc89dbda85", "ref_doc_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21"}, "602ea8a3-0a86-461b-afec-aad512b093e9": {"doc_hash": "2f1e6ad6a70e192ef996493081f107b26dd4b9deccf315583e76f63d36f0acf9", "ref_doc_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21"}, "035c7397-aa53-4d82-b8a1-9feca194846c": {"doc_hash": "275335ac14dc93eefb5a306f15c3ee581f475c3255d659e47bf63aab81483149", "ref_doc_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21"}, "284c104f-6f03-4fe8-bf5e-7bc1ade47f74": {"doc_hash": "de99fd415edb332a4ee915ed035feb2677071b3c4c46885bdfc850586a08415d", "ref_doc_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21"}, "02afceb5-ca16-4260-bf28-260a0f55c149": {"doc_hash": "54c33116375f710408c006f29ea891db1ea4bd4c3dd25bee378bd1203e70c144", "ref_doc_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21"}, "f4c2ec35-e065-44ca-824f-665b589bee55": {"doc_hash": "c34f2b7f3a06bbdb6e7ed23b522b4da5152fb3ff64f2164e5c311dafefae512e", "ref_doc_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21"}, "41c9d308-f9f3-4dc6-8cd8-cc2dff1cb62b": {"doc_hash": "7c6ff08ff35a3df8196a388f8d4db1e5a09fb2fd594b5a43b927396abe5b3e0a", "ref_doc_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21"}, "1a20c553-69ec-428f-bcf3-586450459612": {"doc_hash": "12059dde62dec89420d798830eb890986ae5eaba2de2d6d5405a411a77a0f94e", "ref_doc_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21"}, "08ec17ac-e048-44a7-a5fa-9a323446cca6": {"doc_hash": "3203412260d6d111a6bb7ebd53f8064e3c0b8717a9de1c92b73528aefdbfe2aa", "ref_doc_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21"}, "e696956f-7523-44f3-993f-222102656b2a": {"doc_hash": "ffd4dfa01a2f4de192551277702df9b054e775a6f2049fb73d3a30ac7591c3f6", "ref_doc_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21"}, "30669a87-ad82-4fdc-a47a-dffc0a313877": {"doc_hash": "17f4a7c6c4ef3fec2c0877761912508772764bf93b48addb8f36298d983ce898", "ref_doc_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21"}, "fef6bbc2-01dc-4a09-980e-585cf0021e89": {"doc_hash": "e60e6a4bbdeeef0d006f9fec448e9a6aa5a9682df397f45f9367d58041016747", "ref_doc_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21"}, "faa92482-e7b7-4bbb-8750-cd395942cc62": {"doc_hash": "ca7209703dd93a187fc2c00908e5d7ac5617d43f71a70314195bfa3864fe9024", "ref_doc_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21"}, "6e7f70d8-8037-424b-8dce-614a09d2916e": {"doc_hash": "6777bf54e46585a66fb46ab65cc5b3fe3544d1b4369e5a28216a2e3924aa86c3", "ref_doc_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21"}, "82b4acb4-1a6d-4da4-b625-50c0f78f246e": {"doc_hash": "e39628402f9504c84a3687375ec313cce622df9fbab05cf458823ed2b41694ff", "ref_doc_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21"}, "5ab62190-c751-4103-8fe4-acebb7e1c1cf": {"doc_hash": "f23f248a7f5edf9795bc821174de0eb43507cff7ddca2a0397cdd39ed5bc5d73", "ref_doc_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21"}, "afb0623c-4e6e-4795-b073-fdf4af749e3f": {"doc_hash": "208038e1413c59e6181b9a148daa1447459e1700523260555f3d7fe5aa7b2a26", "ref_doc_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21"}, "e16f21c2-91e6-435a-a5f6-0b09d50b5ee5": {"doc_hash": "10e305625c131661dc7251697f33a55ab50654feff407ededd106489a08a1c19", "ref_doc_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21"}, "992e117b-97ec-4a46-9ebe-0abbe431db88": {"doc_hash": "01755bc8425de1f695d35f766f9b0f722d831470a2b7dca251272bcb3edb1e8a", "ref_doc_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21"}, "de7db0e6-fa56-4f54-af35-24594365d7ef": {"doc_hash": "d0d02da8ac2b1b31fda7694c3add76c8413f520c0efa0a58e56feb0591fc1fbf", "ref_doc_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21"}, "3068c505-71a2-410f-8141-738d5a1a1bf5": {"doc_hash": "ed2f1b936b8180daef654bb9a772d90a4b6bdb4b3a407a20e42bb4882993ec03", "ref_doc_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21"}, "943f04db-d844-41a0-aeac-e30ba4f8f20b": {"doc_hash": "436c6c16dd897d699c38b7589605bbabe442a807b4ec090ed6baa24fc6ed04a9", "ref_doc_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21"}, "b9faadd7-14c0-44d6-8c7d-2fec94f1714e": {"doc_hash": "5fb729d31f7ab0b488de521be4ef640aa0b7b9634d4b35ac84d29e5502f0be17", "ref_doc_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21"}, "0e07597f-51cd-436d-8c10-469e4d21ca03": {"doc_hash": "c349173278aaef68f1b606e12eb4b88a7ee8383bae6f3445e66459f24571999e", "ref_doc_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21"}, "1211d1d1-9ac3-425a-a771-32e07b00d24e": {"doc_hash": "6412189ad747c6c11ac89e5d1bd194cc1c61fc01026b8dbf7cb9cb43b0334316", "ref_doc_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21"}, "a620f1ff-aa2d-43ef-bb5a-15c53041a2b9": {"doc_hash": "35a17ef9ae80538496d702814ae162b7688aba9351d59227270b63500a380b54", "ref_doc_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21"}, "e60f7546-83e2-4a80-9a48-56b3bff04242": {"doc_hash": "4fabb642a8273470c5a62a2109d0f009a7f1dc99e9a8814a908311c0c068b74b", "ref_doc_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21"}, "02dc3922-3bc9-486b-86bd-20e0326d5982": {"doc_hash": "838c9d8c8000801e79f40bfb1f82286ecb8a4f1a4b0bb403a638f4d4543f80f1", "ref_doc_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21"}, "f760d215-16b3-4b6d-8fc9-8a52656383d9": {"doc_hash": "05e6be3f9d462ffe5854f0f7ea92ce9f55fc8dad0abbedad372dbe9684a3e1ea", "ref_doc_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21"}, "bd37b2ff-6801-4d85-9e08-f0a6c31d7353": {"doc_hash": "9fcab2fee9def5967c9d9fa0a800eb74a1fe6b7c0451856e0c765ba2066ced00", "ref_doc_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21"}, "ff205f69-68ce-4c13-9043-996917195628": {"doc_hash": "d7944ae60f31a2bbde89dc06855c90d7fb929769c8458a6bf6b4913934decd7b", "ref_doc_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21"}, "d3965129-ed1d-4d96-9ffc-f7ec369e3894": {"doc_hash": "05f4e6ef1320de509d3435903a9f1087c1b0b0a879bd385e06dec91490e18ffc", "ref_doc_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21"}, "8361a814-bbc9-4c77-b98d-853aa9a89481": {"doc_hash": "77ba0287302170935de279c1de286bdf76b2cf97431312607b1f56a7be658eb7", "ref_doc_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21"}, "bec26e56-1a18-4d49-98f7-b4f64a5c55f6": {"doc_hash": "8698c672b35dbd5daad2b4c12ce965b60a03ef855b3845856115b8b49e875129", "ref_doc_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21"}, "141b43d9-f2a2-4f81-9228-6fc1fea94e69": {"doc_hash": "86819b26ca7062da9fdd286ebb3b438b266c058c8dcb3f6dd028273a6ee57e91", "ref_doc_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21"}, "dd2abaec-9780-44c8-8e5e-42b94595e26d": {"doc_hash": "4247e0146486697baedbafc5df01a172a89a168f3db5c540901ebde1e64f500b", "ref_doc_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21"}, "efe66f06-d804-4777-8575-7a4115123488": {"doc_hash": "f72f2625a9eb776f1154e9aa9bf21baaf929db1c19cf55a0d229264576cd789b", "ref_doc_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21"}, "38eaa9be-cc39-4337-b5ba-975abb2e7979": {"doc_hash": "acf531a3ffaf0d04885ea85052b2be3b30c68d7faf20d16ed45af4123f150183", "ref_doc_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21"}, "8a3a5e47-3453-4b06-b303-7e27f4d26e24": {"doc_hash": "a4b89369b8f4658d5582a841e37af4655777ee483bf4a2f0a2ed9096748acc98", "ref_doc_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21"}, "2a64de94-2a9f-4b24-9722-51af2f3f6435": {"doc_hash": "310fab20f99326232b1c314673e270e3f7077df167e513528dd5c5f5ed2c8be0", "ref_doc_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21"}, "061177d0-a846-4e8d-a4c0-e17acc301fa0": {"doc_hash": "e5b5a029be4d9c4def7cf6e29e9d20e677a9493c8789298be890b841cc56cdac", "ref_doc_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21"}, "4ecad45f-8da3-4338-bb37-717c76c05f7a": {"doc_hash": "0d1e2faaa5fcb735ec5fa5942677b8fab5c691bbc318a661db5c281953cba70a", "ref_doc_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21"}, "fbb530a1-b76e-461c-b22d-278419929366": {"doc_hash": "5684d3e2ffc81d5f05b1c0ba4f83b308f1a452caa24f12b21af3810df76432ec", "ref_doc_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21"}, "cc4c8936-1eff-414d-a833-44b6157396ea": {"doc_hash": "c8190eea4cbe16e61ff50755d9f12640c879ce6230556009a54acbccdd58f174", "ref_doc_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21"}, "69ac8749-aad5-488c-9dc1-1c532b9fbacf": {"doc_hash": "02f43f9d6fa54c30b63de87bb10b448ae8b7d15dee464c622934f45bb3862308", "ref_doc_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21"}, "fc8593ab-ee05-41fb-9933-7245144c40e9": {"doc_hash": "ec7cdb96ca76b725b5f858e43d7aeb472fc2c9c658aafa914e2706376b44b334", "ref_doc_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21"}, "e71812e5-bfd4-4901-a223-161467c9ace7": {"doc_hash": "9a2cbfc1d4baa3dc819078f6b7835912e47056210d36b858c1936feb5d44d730", "ref_doc_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21"}, "9e955de3-0d21-4e8d-b11e-044a037226f2": {"doc_hash": "dd75ee35b39707f84d76b9ad5b2b01fbfc7cda3529e495d52baff2bf2c2c541c", "ref_doc_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21"}, "8c74cadf-a185-4b5e-91ad-5aaa82a1e85f": {"doc_hash": "84b92a88373139dc545cacd315670f62e9ea91a153405aeef21467b54173af25", "ref_doc_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21"}, "12aeba0e-e585-414b-b3bd-08d8506f7acd": {"doc_hash": "88178ac9b879c8a9b7d00306fedabb32301b9b702c29ff2d427381d0dec9130e", "ref_doc_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21"}, "572fa0a4-1474-42c9-a3ab-231ddcc31c91": {"doc_hash": "73341a4146e53cb7948860e95077f9eaa33c943656102c67c8db45192a7ef12d", "ref_doc_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21"}, "6a27f949-01b8-458a-88bb-d8c2af30527b": {"doc_hash": "84dc6435899f101833e3e817ee5eb387226c33c5743e4f971eaaeeff2f43f244", "ref_doc_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21"}, "e4b63d4a-8ab2-4473-86f2-579d43fd52ed": {"doc_hash": "0d285d8957326a8085631f00f9c4bca74a0a0973829461792119adc2e7b3cfd3", "ref_doc_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21"}, "73435b39-0648-446f-bde5-335afe963385": {"doc_hash": "0f90c926aa3f11ed6b89ff6dd0abd6905e2578adb683c6310c173d882d200ab4", "ref_doc_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21"}, "f61086ce-490b-4e0f-96d6-f3a722d9c953": {"doc_hash": "a46195bc14319bc5ba570677c36577192fe7cd6b492cdece7b15cc5744553357", "ref_doc_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21"}, "e3f1f680-8ee0-425b-8a84-026f5932110f": {"doc_hash": "e38e696f05887f764cde847abede9a703e56c4641baaabdfb100bb534da7fea0", "ref_doc_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21"}, "549bb890-08ac-42fc-83b5-af2c70ee38f2": {"doc_hash": "8c168d766a2940ef850ec61181205693ed57b0148819f23622386e960a406480", "ref_doc_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21"}, "1ea32183-e198-4ca4-bfd2-f9065b6aeeb0": {"doc_hash": "a38b7a691e352f18ab90df9fa91155607cfd4a512212b42e4f5b9c83bdfdd276", "ref_doc_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21"}, "a72a7af7-aa04-42fa-a791-29dda87f55d2": {"doc_hash": "75378691f36b72af7e6057406487caf67d7e43dd10aeaf6753dda1ce63a09907", "ref_doc_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21"}, "2853573c-a62c-494f-9f74-34800c0fe1b5": {"doc_hash": "59cabc4b3f9b626e9f0fd262a8eefd363b04790322b8f75d44714043acc1800a", "ref_doc_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21"}, "fc958e75-9c50-4220-80fe-286a2c341ec3": {"doc_hash": "3a318b09fb89b0c55ba4b9110a045cef0b40eeae89b93336c497e1967406f5b1", "ref_doc_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21"}, "08095a1c-786c-4e5c-b688-28164b24f11e": {"doc_hash": "789107b1c2aaec6ff850211a84cd4914d6482ae6c3de36d1165d755ede3bf77b", "ref_doc_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21"}, "748b6b8b-2edb-4d2c-a8a8-b7bc69b2073f": {"doc_hash": "c35041ab90be67f92d8ae0ca3ac46b80ed111ed11cf7d050a806acc4f16b4845", "ref_doc_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21"}, "4072bf9b-e8eb-4a62-81eb-e6ef8a3c8809": {"doc_hash": "b424502c461a50bd175be51be8d561c2a672d2ff2db91db251c8c09c18d5f1e9", "ref_doc_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21"}, "d21e97a4-53e2-44b1-8a36-d125f521d76a": {"doc_hash": "4b3c8fc378280859a461d5e7f621f322a92975e9d1fe900b996724ab2e7f148b", "ref_doc_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21"}, "88845729-021c-4536-a5e2-e4b218d383f1": {"doc_hash": "fdc52e9ab5f8538474e0b1ee10bb61ef6fc17fdb939c0410d4cd5a8c64021f09", "ref_doc_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21"}, "799817cb-2f20-4e81-9aa5-e0127c2a9958": {"doc_hash": "fae59550da85e251361c4485f2e40e193eb8a1360eb484ac136842c93c026324", "ref_doc_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21"}, "a6264c02-2951-4925-8b94-c1da7ff43983": {"doc_hash": "bdc220b15f2779e05d611dbaea712ddacfcf3deeecdb221f632e5d454e931e09", "ref_doc_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21"}, "bf81922e-dd54-43fa-b26a-4a2c13df2aae": {"doc_hash": "56e82b9ae4848f6413d45c0f5c91ccf1dab124b257a25d2eb7d97f265f72dea6", "ref_doc_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21"}, "876e9ab1-f2d2-401f-a97d-ada86be8312f": {"doc_hash": "04753f9c7f3bb361c6f07871aafa53fb890a068f6652ed0a398f3f8000ff69b9", "ref_doc_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21"}, "d2c47cfb-60d0-4839-a245-e4dd8e99b4bc": {"doc_hash": "ccd3f2e2e027793a024896776c89873c141d58f0ec24a907018818b1d532458c", "ref_doc_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21"}, "7e993ede-ab68-4887-aecd-43bc545095c9": {"doc_hash": "811efbf3b7ee9235704b48f981b6aeb0428f15a0aca7aacf0b9c38d808bb41c6", "ref_doc_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21"}, "e974e9eb-a7c9-4308-a8e1-f1a0615b9b69": {"doc_hash": "de438ff09581b0caffb241f58af2b58a476bde803c9984e8af67e44be12651af", "ref_doc_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21"}, "f419147d-1d8a-4c9d-871b-3b9118fc9a95": {"doc_hash": "ff3e82c733c9430cede37466b7e1e05fd1e938b2c322b73c1003f0fc148f0d0b", "ref_doc_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21"}, "0b6dc728-aed7-46e4-99c0-c729021d22d0": {"doc_hash": "84ac0596946a8b99f953e0db59bc1ff889b0c8ac649e5a8ea333a3c189888ea7", "ref_doc_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21"}, "638f299a-16a7-4d56-9df9-9c1dd608a004": {"doc_hash": "4fbb595c49fe6ebb339d0b5d8363dbd0d651cf41dd7c4bb891717ce1109c72f8", "ref_doc_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21"}, "ae3a4bca-3ad0-4ac2-ac9e-3e11a4a64f41": {"doc_hash": "b8f123c0f069553ea1261cb6dbf43a5c9c398f8418210ee1bd276c506310beef", "ref_doc_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21"}, "1ba1b3ea-a30c-4107-ac01-8fc170a6c12e": {"doc_hash": "3f1f404a2200af4c475f5d153d21d314e02e10c129515c5d33bc4da7f98dde56", "ref_doc_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21"}, "15db8f52-7a3e-47c6-a2c2-5744cc50bb67": {"doc_hash": "af3ea130b80de7e945cb85bb42901f5401727cf4a100cd67d497ef31d59a088a", "ref_doc_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21"}, "8f468a4d-c8a3-4b9f-b817-8a751cd9c86e": {"doc_hash": "d58a512e2f0c966c6a80a56e9aa6d528864eaf284b092008c669d0ef4bf8346c", "ref_doc_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21"}, "c1d7f2e5-3b81-4500-8e6f-3b4390d430ad": {"doc_hash": "4226bade5ad4bb063646c73bc85c5bf8521ec945280e26a8fd393d854f557330", "ref_doc_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21"}}, "docstore/data": {"869b4319-8490-4387-88d0-fb025e3fbf22": {"__data__": {"id_": "869b4319-8490-4387-88d0-fb025e3fbf22", "embedding": null, "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21", "node_type": "4", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "7b8ab6f4cd22076034037208ddad5c4e39dec1170ddfde79e3ef7c946fa0a322", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4e78e5ea-1ae5-4124-a267-429cab145046", "node_type": "1", "metadata": {}, "hash": "c2e170b44336d2e340a4aac23a90bb20a4d050d52d67d742b991122f1f0ebcb8", "class_name": "RelatedNodeInfo"}}, "text": "Practical Insight and Methods for Successful IT Delivery\n\n\nEnterprise Agile\u00ae\nPractical Insight and Methods for Successful IT Delivery\nInnovations in technology and commerce have combined to disrupt traditional business models and drive an increased pace of change.\nOrganisations are looking to employ new working methods and technologies to increase their Agility, whilst remaining efficient and without introducing significant risk.\nBJSS has developed the Enterprise Agile\u00ae approach to help organisations realise greater value through increased flexibility to meet user needs. The approach has been developed by expert practitioners and draws\non 30 years\u2019 experience of successful delivery for public and private sector clients.\nThis book presents key concepts of the BJSS Enterprise Agile\u00ae approach and offers practical guidance for anyone involved in the delivery and support of technology-led products and services.\nbjss.com/enterprise-agile\n\nFirst edition published in 2008 in Great Britain by\nBJSS Limited\n1 Whitehall Quay Leeds\nLS1 4HR\nUnited Kingdom\nCopyright \u00a9 2008, 2012, 2014, 2016, 2017, 2018, 2019, 2022, 2023 BJSS Limited.\nAll rights reserved. No part of this publication may be reproduced, stored in a retrieval system, or transmitted, in any form or by any means, electronic, mechanical, photocopying, recording or otherwise, without the prior permission of the copyright owner.\n\u2018Enterprise Agile\u00ae\u2019 and \u2018BJSS Enterprise Agile\u00ae\u2019 are registered trademarks of BJSS Limited.\nTenth edition (\u2018Lenman\u2019), 10th January 2023. ISBN: 978-0-9565371-8-8\n\nAbout BJSS\nBJSS is the UK\u2019s leading privately-owned technology and engineering consultancy for business. Trusted by its clients, BJSS collaborates to deliver complex, innovative technology, engineering, and industry solutions that millions of people use every day.\nRenowned for technical excellence, cost-effective delivery, and its award-winning Enterprise Agile approach, BJSS works with some of the world\u2019s largest public and private sector organisations to design, deliver and support large-scale digital transformation.\nWith locations across the UK, Europe, the USA, and Australia, BJSS is\nan end-to-end transformation partner covering everything from strategy and service design through to technology delivery and managed services.\n\nThe Queen\u2019s Award for Enterprise\nThe Enterprise Agile approach is a distillation of years of our learnings from delivering industrial-strength software for clients in some of the most complex environments, and has been recognised with a Queen\u2019s Award for Enterprise in the Innovation category.\n\nForeword\nWhen our company was founded in 1993, one of our core principles was a total focus on delivery. In our constant search to deliver on that vision, we have dedicated a great deal of effort to discover what works and what doesn\u2019t when designing, delivering, and maintaining enterprise-scale systems.\nOne of our core values as a business is the pride we take in sharing\nour knowledge and expertise with clients. We first published this book\nin 2008 to distill thousands of work years of real-world experience of creating industrial-strength software in some of the most demanding public and private sector environments. And we\u2019ve regularly updated\nthe book to document how our thinking has changed with the constantly changing trends in technology and business.\nEnterprise Agile is now in its tenth edition, and we have evolved our approach as global pressures drive our clients to implement new business models, and as innovations in technology redefine the way organisations operate. This latest update includes a chapter about how enterprise-level organisations can drive value through data-led programmes, outlining Agile approaches to the data challenge that our clients have found useful.\nWe hope you find something of value here and that we have helped encourage you to put into practice some of the techniques we describe.\n\nContents\nChapter 01: The Agility Challenge 17\nIntroduction 18 Concepts 20\nThe Drivers for Agility 20 Delivering More with Less 21 Managing Risk 21 A Brief Overview of Agile 22\nBJSS Opinion 25\nThe Value Triangle 25 Becoming a More Agile Organisation 27 Change Often 27 Overcoming Potential Barriers to Agility 28\nThe Enterprise Agile Approach 29\nBuilt on Experience 29 Founding Principles 30\nWhere to go Next 31 Key Points 34\nChapter 02: Organisational Agility 35\nConcepts 36\nTechnology at the Heart of the Organisation 36 Multi-Speed IT 38 The Product Portfolio 40\n\nInnovation as a Catalyst for Agility 42 Taking a Product or Project Perspective 44\nBJSS Opinion 45\nThe Hierarchy of Concerns 45 Organisation-Level Activities 47 Enterprise Architecture 51 Governance and Funding 53 Cloud Governance 54 Mapping the Portfolio 56\nThe Enterprise Agile Approach 58\nComponents of the Technology Landscape 58 The Innovation Lab 59 Hackathons 61\nKey Points 62\nChapter 03: A Pattern for\nDelivering Value", "start_char_idx": 1, "end_char_idx": 4921, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4e78e5ea-1ae5-4124-a267-429cab145046": {"__data__": {"id_": "4e78e5ea-1ae5-4124-a267-429cab145046", "embedding": null, "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21", "node_type": "4", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "7b8ab6f4cd22076034037208ddad5c4e39dec1170ddfde79e3ef7c946fa0a322", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "869b4319-8490-4387-88d0-fb025e3fbf22", "node_type": "1", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "6ea9011aff149582725fee5e9d2a2b37671acf92db555e1bdc84a35baf6f1ea8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0f94f635-1835-4233-b8ef-9b9a7d1496be", "node_type": "1", "metadata": {}, "hash": "e6c8fe0deb5469ccd439f1f0c56fcff43758270cf04900ade1a4b2c25aeee896", "class_name": "RelatedNodeInfo"}}, "text": "of Agile 22\nBJSS Opinion 25\nThe Value Triangle 25 Becoming a More Agile Organisation 27 Change Often 27 Overcoming Potential Barriers to Agility 28\nThe Enterprise Agile Approach 29\nBuilt on Experience 29 Founding Principles 30\nWhere to go Next 31 Key Points 34\nChapter 02: Organisational Agility 35\nConcepts 36\nTechnology at the Heart of the Organisation 36 Multi-Speed IT 38 The Product Portfolio 40\n\nInnovation as a Catalyst for Agility 42 Taking a Product or Project Perspective 44\nBJSS Opinion 45\nThe Hierarchy of Concerns 45 Organisation-Level Activities 47 Enterprise Architecture 51 Governance and Funding 53 Cloud Governance 54 Mapping the Portfolio 56\nThe Enterprise Agile Approach 58\nComponents of the Technology Landscape 58 The Innovation Lab 59 Hackathons 61\nKey Points 62\nChapter 03: A Pattern for\nDelivering Value 63\nConcepts 64\nThe Evolution of Agile Methods 64 Devops and the Convergence in Technology 67 Continuous Delivery 69 Cloud as an Agile Enabler 70 Different Change Scenarios 70\nBJSS Opinion 73\nReleasing Change to the Users 73 When Large Scale Change is Unavoidable 75\n\nStaying out of Trouble 76\nThe Enterprise Agile Approach 79\nA Lifecycle for Products 79 Achieving MVP \u2013 The \u2018No Surprises Endgame\u2019 83\nKey Points 85\nChapter 04: The Optimal Team 87\nConcepts 88\nThe Return of the Full Stack Engineer 88 Self-Optimising Organisations 89\nBJSS Opinion 90\nAbility-Led versus Process-Led 90 A Supportive Culture and Values System 91 Creating Productive Teams 92 Considerations for a Productive Environment 94\nThe Enterprise Agile Approach 97\nA Brief Guide to Organisation and Teams 97 The Product Team 97 The Shape of the Individual 100 The Key Delivery Roles 102 Focused Delivery Teams 108 Responsive Service Teams 110 Effective Team Leadership 110 Organising Change Across Delivery Teams 111 Scaling the Model 113 Focused Streams of Activity 114\n\nLeading Consistency Through Capabilities 116 Building Communities for Continuous Improvement 117\nKey Points 118\nChapter 05: Effective Leadership 119\nConcepts 120\nProject & Service Management Leadership Convergence 120\nBJSS Opinion 121\nThree Key Leadership Components 121 \u2018Necessary and Sufficient\u2019 Governance 124 Defining the Business Challenge 125 Estimating Work 126\nThe Enterprise Agile Approach 128\nTaking a Risk-First Approach 128 Implementing Good Governance 130 Bridging to the Organisation 131 Diligence Within the Product Team 132 The Ongoing Importance of Planning 134 Planning Across Lifecycle Phases 136 Estimating for MVP 138 Managing Changes to the Plan 140 Active Raid Management for Improved Predictability 140 Reporting 142 Keep the Information Flowing 144\nKey Points 145\n\nChapter 06: Understanding Human-Centred Design 147\nConcepts 148\nUnderstanding User Needs 148 Evaluating the User Journey 150 Changing Human Behaviours 151\nBJSS Opinion 153\nEmbrace a Human-Centred Design Approach 153 Generate Value Through Service Design 155 Introduce a Service Design Blueprint 157 Set Strategy with Evidence-Based Design 159 Remove Barriers to Human-Centred Design 161 Human-Centred Design Evolution 162\nThe Enterprise Agile Approach 163\nThe Who & Why of Delivery 164 The Right Problem to Solve 165 Human-Centred Design Artefacts 167 Integrating Human-Centred Design 168\nKey Points 170\nChapter 07: Crafting the\nProduct Increment 171\nConcepts 172\nThe Product Increment 172 Alternative Modes of Operation 175\n\nBJSS Opinion 177\nAlways Use the Process 177\nThe Enterprise Agile Approach 179\nStarting and Finishing a Story 179 Sprint Delivery Patterns 183 Use of Special Sprints 185 The Practices of Effective Sprints 186 Updating the Service Wrap 194 Combining Organisation and Technology Change 194\nKey Points 196\nChapter 08: Engineering\nQuality Outcomes 197\nConcepts 199\nKey Components of Engineering Delivery 199\nBJSS Opinion 200\nStart With Strong Architecture 200 Measure for Success 203 Engineering Good Customer Service 203\nThe Enterprise Agile Approach 204\nBuilding the Delivery Pipeline 204 Operating and Improving the Delivery Pipeline 206 Building in Product Quality 207 Developing a Strategy for Testing 209 Determining Where to Focus Test Effort 211 A Structured Approach to Testing 213\n\nTest Phases and the Sprint Pattern 214 Dealing with Defects 216 Developing for the Cloud 216 Delivery and Service Metrics 218 Measuring Change 219 Assuring Technical Quality 225 Do Everything Continuously", "start_char_idx": 4093, "end_char_idx": 8469, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0f94f635-1835-4233-b8ef-9b9a7d1496be": {"__data__": {"id_": "0f94f635-1835-4233-b8ef-9b9a7d1496be", "embedding": null, "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21", "node_type": "4", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "7b8ab6f4cd22076034037208ddad5c4e39dec1170ddfde79e3ef7c946fa0a322", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4e78e5ea-1ae5-4124-a267-429cab145046", "node_type": "1", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "b8cb2e2f17c7a0eb51ad063190bca59fc8f4ccfb64df16b8e5e7c874049a998b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c5428558-3b7c-4af0-8d16-a7955c795706", "node_type": "1", "metadata": {}, "hash": "9685a4252b32db0e9deaf06ce7d248fb94427e4de43c26bf253460a63acee973", "class_name": "RelatedNodeInfo"}}, "text": "Agile Approach 179\nStarting and Finishing a Story 179 Sprint Delivery Patterns 183 Use of Special Sprints 185 The Practices of Effective Sprints 186 Updating the Service Wrap 194 Combining Organisation and Technology Change 194\nKey Points 196\nChapter 08: Engineering\nQuality Outcomes 197\nConcepts 199\nKey Components of Engineering Delivery 199\nBJSS Opinion 200\nStart With Strong Architecture 200 Measure for Success 203 Engineering Good Customer Service 203\nThe Enterprise Agile Approach 204\nBuilding the Delivery Pipeline 204 Operating and Improving the Delivery Pipeline 206 Building in Product Quality 207 Developing a Strategy for Testing 209 Determining Where to Focus Test Effort 211 A Structured Approach to Testing 213\n\nTest Phases and the Sprint Pattern 214 Dealing with Defects 216 Developing for the Cloud 216 Delivery and Service Metrics 218 Measuring Change 219 Assuring Technical Quality 225 Do Everything Continuously 226\nKey Points 227\nChapter 09: Service Agility 229\nConcepts 230\nService Maturity 230 No Service 232 Ad-hoc Services 232 Managed Service 234\nBJSS Opinion 238\nMeeting the Challenge 239 Engineering Good Customer Service 240\nThe Enterprise Agile Approach 245\nService Agility at 10,000 feet 245 Anatomy of a Service Wrap 248 Establishing the Service Wrap 252\nKey Points 254\n\nChapter 10: The Journey to Agility 255\nConcepts 256\nThe Rise of the Commercial Agile Framework 256 Change Management 257\nBJSS Opinion 258\nHolistic Adoption 258 One Size Does Not Fit All 258 Agile Transformational Models 259 Example Barriers to Agility 261 A Culture of Innovation and Continuous Improvement 262 Use Appropriate Funding and Commercial Models 263\nThe Enterprise Agile Approach 264\nAdopting Agility within the Organisation 264 Monitor Maturity 266 Foster Supplier Collaboration 269 Funding for Success 269\nKey Points 272\nChapter 11: Enterprise Data 273\nConcepts 275\nData Lake, Data Lakehouse, Data Mesh, Data Fabric 275 Data Science 276 DataOps and MLOps 277\nBJSS Opinion 279\nIs Agile Data Difficult? 279\n\nCentralisation vs Decentralisation 280\nThe Enterprise Agile Approach 282\nAlign IT and the Business 282 Focusing on Value 282 Thinking Holistically 284 Delivering a Steel Thread 286 Using the Right Technology 288 Implementing a DataOps Culture 290 Data Science Enterprise Agility 292\nKey Points 295\nAfterword 296 Appendix A 297\nEngineering Successful Change 297\nAppendix B 299\nGlossary 299\n\n Chapter 01\nThe Agility Challenge\n\nIrrespective of the nature of your organisation, the chances are you are grappling with the same challenge - how to more rapidly and reliably adapt to the changing demands of clients, consumers or citizens within a shifting global marketplace.\nWhile the drive to do things faster, cheaper and better is not new, the number of sectors being disrupted by innovative commercial models powered by digital technologies is unprecedented. These inventive new offerings further increase the expectations of customers, driving organisations to quickly adapt their services, or risk becoming irrelevant.\nIntroduction\nIn the first edition of Enterprise Agile, published in 2008, we focused on the use of Agile techniques to deliver software projects. Since then, we have delivered many more projects using our Enterprise Agile method.\nIn the light of the Covid-19 pandemic, these techniques, as well as the values and principles that underpin them, have been demonstrated\nto be relevant beyond just software delivery. During a period of unprecedented disruption, some previously successful organisations have tragically failed to survive. Others, however, have been able to respond quickly and effectively to the changes thrust upon them, their customers and their employees. These organisations have been able to survive, and in some cases thrive, in a radically different world.\nAt a time of rapid upheaval, Agility is no longer the preserve of Software Development Teams in isolation from the rest of the enterprise. It is increasingly important that the entire organisation follows Agile values and principles and is capable of rapid change.\n 18 The Agility Challenge\n\nIn response to these changes, we have updated our approach once again. In this revised edition, we look not only at the software\ndelivery lifecycle but also at the wider subject of building and running technology-led products and services in an Agile organisation. This expanded scope includes areas such as remote and hybrid working, enterprise data, integrating business change, Design Thinking, service management, Cloud and software-defined infrastructure.\nWe have significantly expanded the scope of our method, but the underlying principles remain:\n1. An absolute focus on high-quality delivery\n2. A risk-first approach to prioritising delivery and change\n3. Strong architecture and engineering principles at the core\n4.", "start_char_idx": 7537, "end_char_idx": 12372, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c5428558-3b7c-4af0-8d16-a7955c795706": {"__data__": {"id_": "c5428558-3b7c-4af0-8d16-a7955c795706", "embedding": null, "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21", "node_type": "4", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "7b8ab6f4cd22076034037208ddad5c4e39dec1170ddfde79e3ef7c946fa0a322", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0f94f635-1835-4233-b8ef-9b9a7d1496be", "node_type": "1", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "b940878bebeede3ecaf5b025eeb84eb3de511fde859cca8f92edf643092910a2", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "602ea8a3-0a86-461b-afec-aad512b093e9", "node_type": "1", "metadata": {}, "hash": "18d9646c9fdf67e3e4a6ecb889eb004022f302b6e5dd4b4bd2df08b69ad42bea", "class_name": "RelatedNodeInfo"}}, "text": "At a time of rapid upheaval, Agility is no longer the preserve of Software Development Teams in isolation from the rest of the enterprise. It is increasingly important that the entire organisation follows Agile values and principles and is capable of rapid change.\n 18 The Agility Challenge\n\nIn response to these changes, we have updated our approach once again. In this revised edition, we look not only at the software\ndelivery lifecycle but also at the wider subject of building and running technology-led products and services in an Agile organisation. This expanded scope includes areas such as remote and hybrid working, enterprise data, integrating business change, Design Thinking, service management, Cloud and software-defined infrastructure.\nWe have significantly expanded the scope of our method, but the underlying principles remain:\n1. An absolute focus on high-quality delivery\n2. A risk-first approach to prioritising delivery and change\n3. Strong architecture and engineering principles at the core\n4. Using only \u2018Necessary and Sufficient\u2019 processes and artefacts\n5. Delivering change with a \u2018No surprises endgame\u2019.\nAs in previous editions of this book, we explore current concepts, outline our views and experience, and present our approach for successful delivery. We aim to help all organisations address the Agility challenge with a focus on the delivery of high-quality, technology-led products\nand services.\n The Agility Challenge 19\n\nConcepts\nThe Drivers for Agility\nThe Covid-19 pandemic and the events that followed, taught us just how unpredictable the future can be and the critical importance of being able to respond rapidly to the changes to market conditions and consumer behaviours.\nAmid an unprecedented level of global upheaval, digital technologies continue to be a key catalyst for increased Agility. Digital adoption has skyrocketed across virtually every industry and customer segment, prompting many organisations to reconsider their entire business model. Social media enables near-instant feedback, making or breaking products and services overnight. As economic pressures have intensified, consumers have become increasingly fickle, and the abundance of aggregators such as price comparison engines makes shopping around easier than ever before. Long term brand loyalty is much less prevalent when consumer purchasing decisions are driven by price.\nAs a result, organisations are seeking to transform themselves and embed the ability to change to meet customer needs into the fabric of who they are. By reorganising themselves to rapidly deliver business and technological change, businesses can respond to the challenges of:\n\u25cb Global events that transform customer needs, invalidate business models, and necessitate new and different operating models\n\u25cb Disruption of a whole industry sector by innovative commercial models delivered by digital technologies\n\u25cb Reduced customer loyalty and the ease of switching to new service providers\n\u25cb Demand from a technologically savvy customer base that is increasingly seeking better digital experiences.\n 20\nThe Agility Challenge\n\nDelivering More with Less\nNot only do organisations now face unprecedented pressure to rapidly change and deliver new services, but they must also increase efficiency and minimise expenditure while doing so. Doing more with less is a common theme across all industry sectors, and achieving it means not only delivering change effectively but also becoming more efficient at running existing products and services.\nSuccess is no longer measured by delivering a pre-defined scope on time and to budget. The success of a product is defined by its ability\nto deliver business value by meeting customer needs. The challenge organisations face is delivering this value with the minimum expenditure possible and then, once delivered, gathering feedback from customers to build the next iteration as rapidly and cost-effectively as possible.\nConsiderable work has been done over the years on Lean thinking in manufacturing, and Agile delivery in technology. At BJSS we talk about efficiency in terms of lightweight processes supporting the \u2018Necessary and Sufficient\u2019 tasks for predictable and efficient delivery.\nManaging Risk\nA desire for predictability in project and technology delivery is common to all our conversations with clients. Organisations are driven to plan and budget in annual cycles, often as a result of the need to meet short-term shareholder or stakeholder expectations. Corporate governance often drives risk avoidance behaviours that are counter to the need to evolve and innovate for long term survival.\nEvery organisation must innovate and embrace Agility to survive in markets that are being disrupted with greater frequency than ever before. Innovation and Agility are the essential ingredients of a modern successful organisation, but embracing Agility cannot result in a loss\n The Agility Challenge 21\n\nof control or governance. Over many years we have adapted Agile techniques to harness the benefits of incremental delivery and the flexibility to change whilst providing a degree of predictability and linkage to good governance practices.\nThe key to great Agile delivery is not to try and know everything up front before committing to something, but to know just enough that the risk profile is understood. Key risks can then be managed and surprises during delivery avoided. This requires properly configured and experienced teams, supported by sufficient, lightweight processes.", "start_char_idx": 11354, "end_char_idx": 16872, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "602ea8a3-0a86-461b-afec-aad512b093e9": {"__data__": {"id_": "602ea8a3-0a86-461b-afec-aad512b093e9", "embedding": null, "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21", "node_type": "4", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "7b8ab6f4cd22076034037208ddad5c4e39dec1170ddfde79e3ef7c946fa0a322", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c5428558-3b7c-4af0-8d16-a7955c795706", "node_type": "1", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "dd0a097a78de8e7fbd7c7aaf043c3e5e90f6dc9fac18c275086043dc89dbda85", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "035c7397-aa53-4d82-b8a1-9feca194846c", "node_type": "1", "metadata": {}, "hash": "b2dbeb940242585e5989bea3f5f9e033b0cf9eaa021511fd5fbeaa6debf0448b", "class_name": "RelatedNodeInfo"}}, "text": "Corporate governance often drives risk avoidance behaviours that are counter to the need to evolve and innovate for long term survival.\nEvery organisation must innovate and embrace Agility to survive in markets that are being disrupted with greater frequency than ever before. Innovation and Agility are the essential ingredients of a modern successful organisation, but embracing Agility cannot result in a loss\n The Agility Challenge 21\n\nof control or governance. Over many years we have adapted Agile techniques to harness the benefits of incremental delivery and the flexibility to change whilst providing a degree of predictability and linkage to good governance practices.\nThe key to great Agile delivery is not to try and know everything up front before committing to something, but to know just enough that the risk profile is understood. Key risks can then be managed and surprises during delivery avoided. This requires properly configured and experienced teams, supported by sufficient, lightweight processes.\nA Brief Overview of Agile\nThe set of principles and practices that the industry has come to know as Agile ways of working have been around for some time. The underlying concepts can be traced back to software development methodologies such as XP, RUP and Scrum that originated in the 1990s.\nWe can look even further back to parallels in manufacturing, research and development practices such as Toyota\u2019s Lean manufacturing or Lockheed Martin\u2019s Skunk Works.\nWritten in 2001, the Agile Manifesto has come to codify and act as a rallying point for similar philosophies and ways of working.\n 22 The Agility Challenge\n\n Figure 1-1: The Agile Manifesto\n         The Agility Challenge 23\n\nA common misconception is that Agile working supports extremes\nof behaviour, such as the abandonment of processes, plans and documentation. The Manifesto itself states that this is not the case (as it attributes value to the items on the right) and some of the authors of the Manifesto have gone on record to suggest that it primarily indicates a weighting or preference to guide behaviour when constrained or operating at edge cases.\nAgile is not a process or methodology in itself, but rather a philosophy and an umbrella term for an expanding number of frameworks and practices that share common principles and values. Irrespective of the methodologies adopted, organisations or teams that succeed in embracing Agile working share many traits, including:\n\u25cb A focus on satisfying the customer\u2019s needs\n\u25cb Value derived through end deliverables rather than intermediate artefacts\n\u25cb Iterative working with tight feedback loops\n\u25cb \u2018Necessary and Sufficient\u2019 ceremonies and documentation\n\u25cb Anticipation and acceptance of change\n\u25cb Elimination of overheads/waste\n\u25cb Concurrent working over consecutive working\n\u25cb Early (and continuous) focus on quality\n\u25cb Minimisation of independent silos of practice, knowledge or control\n\u25cb Introspection and continuous improvement.\n 24\nThe Agility Challenge\n\nAlthough Agility may not necessarily directly improve straight-line delivery speed, the elimination of unnecessary work, focus on small deliveries, maximisation of concurrency and emphasis on delivery of customer value will often yield a significant performance improvement for many teams.\nAs mentioned previously, a number of these concepts originate from outside of software development, and as a result, many of them are relevant to the wider organisation. Agile is no longer a term that can be applied exclusively to software.\nBJSS Opinion The Value Triangle\nIn earlier editions of this book, we discussed the concept of the iron triangle for a software development project. This considers the triple constraint of scope, time and cost, and the challenge of meeting all three simultaneously to create a quality outcome.\nWe recently updated this diagram to address a broader triple constraint facing organisations, particularly the technology function - the Value Triangle. This challenges CIOs to deliver technology predictably, with low risk, whilst retaining organisational flexibility and Agility, reducing costs and delivering value for money.\nThe Value Triangle is shown in Figure 1-2 and is something we address throughout this book.\n The Agility Challenge 25\n\n Figure 1-2: The Value Triangle for the Agile Organisation\nEfficiency\nValue for money\n    Predictability\nFlexibility\nRisk\nAgility\n 26\nThe Agility Challenge\n\nBecoming a More Agile Organisation\nOrganisations must become more Agile - to embrace change, innovate and be more responsive to user needs.\nThis book offers practical insights into organisation, processes, and techniques to deliver change and technology-led products. It is worth noting that becoming a more Agile organisation is an ongoing journey, not a one-off activity, and so we do not offer a prescriptive target operating model for the organisation.\nEmbracing change requires good working practices, with feedback loops for continuous improvement, and a supportive culture and values system for the people involved. Organisations that combine these essential ingredients will thrive.\nChange Often\nBecoming a flexible organisation involves becoming comfortable with change as a routine activity. This is good for the organisation as it enables it to be responsive to customer needs and more readily realise value from those relationships.", "start_char_idx": 15852, "end_char_idx": 21212, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "035c7397-aa53-4d82-b8a1-9feca194846c": {"__data__": {"id_": "035c7397-aa53-4d82-b8a1-9feca194846c", "embedding": null, "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21", "node_type": "4", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "7b8ab6f4cd22076034037208ddad5c4e39dec1170ddfde79e3ef7c946fa0a322", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "602ea8a3-0a86-461b-afec-aad512b093e9", "node_type": "1", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "2f1e6ad6a70e192ef996493081f107b26dd4b9deccf315583e76f63d36f0acf9", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "284c104f-6f03-4fe8-bf5e-7bc1ade47f74", "node_type": "1", "metadata": {}, "hash": "4a6b5106a69b10f4499eb5c32feb1a30d0a2081d033ab00faa2634a5d18ea131", "class_name": "RelatedNodeInfo"}}, "text": "This book offers practical insights into organisation, processes, and techniques to deliver change and technology-led products. It is worth noting that becoming a more Agile organisation is an ongoing journey, not a one-off activity, and so we do not offer a prescriptive target operating model for the organisation.\nEmbracing change requires good working practices, with feedback loops for continuous improvement, and a supportive culture and values system for the people involved. Organisations that combine these essential ingredients will thrive.\nChange Often\nBecoming a flexible organisation involves becoming comfortable with change as a routine activity. This is good for the organisation as it enables it to be responsive to customer needs and more readily realise value from those relationships.\nChange can be unsettling for the people involved, but we believe it is worth learning to embrace this and using a culture and values system to support individuals in feeling secure in an organisation that regularly innovates and adapts.\nAnother barrier to frequent change is often an aversion to the \u2018risk\u2019 of technology change. This generally becomes a self-fulfilling prophecy. Due to the perceived risk of technology changes, rigorous approval gates and associated process overhead are mandated in an attempt to reduce the risk of failure. This high \u2018release tax\u2019 ensures change is less frequent and, as a consequence, more changes are put into each release.\n The Agility Challenge 27\n\nBigger changes of course carry a greater risk of failure. Modern DevOps and Continuous Delivery techniques can help break this cycle.\nOvercoming Potential Barriers to Agility\nMoving towards a more Agile organisation, one able to rapidly embrace change, isn\u2019t without challenges, but the benefits are worthwhile. Recent innovations in technology and delivery approaches have provided mechanisms for surmounting many of the traditional barriers to organisational Agility. Throughout this book, we offer some insights into how to overcome some of the typical challenges.\n 28 The Agility Challenge\n\nThe Enterprise Agile Approach\nBuilt on Experience\nAs a supplier that values long term client relationships and organic growth, we recognise the importance of delivering on our commitments. To do this, we have developed the approach described in this book. Enterprise Agile is what we believe \u2018good looks like\u2019 in terms of implementing technology change and running technology services. The ideas, processes and philosophy outlined here are embodied in the work we do for us to be successful as a supplier and for our clients to realise the value of their investment.\nA focus on delivery is embedded in our psyche. Many evangelists theorise about how to deliver change and technology initiatives. We\nhave written this book based on practical experience and insights and lessons learned from delivering hundreds of projects over more than 28 years to a broad range of clients in sectors as diverse as Public Sector, Health and Social Care, Retail and Consumer Markets, Financial Services, and Energy, Commodities and Utilities.\nThis perspective is an important dimension that is often missed from other texts on Agility. If your vendor model is not aligned to enterprise architecture and the delivery model, significant issues are likely. Organisational tensions and politics arising from misaligned goals will adversely impact the delivery of effective change.\nMost organisations of any scale work with multiple suppliers to deliver all or part of their operational business processes, customer engagement and technology. It is only when supplier incentives and vendor management are consistent with the organisational goals, architecture and delivery model, that true Agility is possible.\n The Agility Challenge 29\n\nFounding Principles\nSuccessfully delivering change is first and foremost about people. Whatever the change initiative, the outcome will be determined by bringing people on the journey and engaging high-ability teams to deliver.\nSupporting the teams delivering services are the lightweight patterns, processes, technology and tooling that we describe.\nTo guide any change initiative, we focus closely on two key components:\n\u25cb Insight - Into the needs of the user and the marketplace\n\u25cb High-Quality Deliverables - To underpin and de-risk the delivery.\nUltimately the goal of any change initiative is to create value for the organisation. Delivering business and technological change must be guided by insight and sound discipline. Supporting this are several essential principles:\n\u25cb Risk-First - Prioritising change based on risk profile\n\u25cb Sustainability - Building resilient solutions that can easily support\nchange well into the future\n\u25cb Quality Built-in - Embedding quality from the outset\n\u25cb Transparency - Clarity throughout the delivery process\n\u25cb Innovation - Thinking beyond the usual solution\n\u25cb \u2018Necessary and Sufficient\u2019 - Doing just enough of the right things\n\u25cb Rigour and Control - Knowing where you are and what\u2019s left to do.\n 30 The Agility Challenge\n\nWhere to go Next\nThis book recommends good practice in the areas of People, Process and Tools - the three ingredients required for organisational Agility. If you are new to some of the concepts here you may wish to read from start to finish.", "start_char_idx": 20408, "end_char_idx": 25716, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "284c104f-6f03-4fe8-bf5e-7bc1ade47f74": {"__data__": {"id_": "284c104f-6f03-4fe8-bf5e-7bc1ade47f74", "embedding": null, "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21", "node_type": "4", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "7b8ab6f4cd22076034037208ddad5c4e39dec1170ddfde79e3ef7c946fa0a322", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "035c7397-aa53-4d82-b8a1-9feca194846c", "node_type": "1", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "275335ac14dc93eefb5a306f15c3ee581f475c3255d659e47bf63aab81483149", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "02afceb5-ca16-4260-bf28-260a0f55c149", "node_type": "1", "metadata": {}, "hash": "df834da8cbc77da2bc164c0b4eeb5eaeaa5d3578814f17614cb78f972250dfb6", "class_name": "RelatedNodeInfo"}}, "text": "Ultimately the goal of any change initiative is to create value for the organisation. Delivering business and technological change must be guided by insight and sound discipline. Supporting this are several essential principles:\n\u25cb Risk-First - Prioritising change based on risk profile\n\u25cb Sustainability - Building resilient solutions that can easily support\nchange well into the future\n\u25cb Quality Built-in - Embedding quality from the outset\n\u25cb Transparency - Clarity throughout the delivery process\n\u25cb Innovation - Thinking beyond the usual solution\n\u25cb \u2018Necessary and Sufficient\u2019 - Doing just enough of the right things\n\u25cb Rigour and Control - Knowing where you are and what\u2019s left to do.\n 30 The Agility Challenge\n\nWhere to go Next\nThis book recommends good practice in the areas of People, Process and Tools - the three ingredients required for organisational Agility. If you are new to some of the concepts here you may wish to read from start to finish. Readers looking to pursue specific topics might want to choose from those listed below.\nWithin each chapter, we provide a consistent structure that introduces key concepts, offers our opinion and experience and outlines the Enterprise Agile method for achieving success.\nChapter 2 \u2013 Organisational Agility\nIntroduces some of the principles important in achieving greater Agility in both organisations and product delivery whilst managing risk.\nChapter 3 - A Pattern for Delivering Value\nProvides a map of the approaches to delivering products to customers and introduces the Enterprise Agile product lifecycle.\nChapter 4 - The Optimal Team\nDiscusses how to structure people around the process and the human factors to be considered in creating productive teams.\nChapter 5 - Effective Leadership\nIdentifies the leadership skills and practices essential to building and running quality products.\n The Agility Challenge 31\n\nChapter 6 - Understanding Human-Centred Design\nOutlines a structured approach to capturing user needs and focusing on achieving organisational outcomes.\nChapter 7 - Crafting the Product Increment\nDescribes the anatomy of the Sprint as the unit of delivery and the daily operating rhythm of Delivery Teams.\nChapter 8 - Engineering Quality Outcomes\nExplores the delivery pipeline and engineering practices used in changing and running products to a high standard.\nChapter 9 - Service Agility\nDescribes how Enterprise Agile combines traditional structured service management approaches with Agile delivery.\nChapter 10 - The Journey to Agility\nSuggests where to start with implementing greater Agility in the organisation and making it work in a client and supplier relationship.\nChapter 11 \u2013 Enterprise Data\nApplying some of the principles and values of Enterprise Agile to data projects in order to deliver meaningful business results.\n 32 The Agility Challenge\n\nAfterword\nProvides a link to more practical details of how to implement Enterprise Agile in your organisation.\nAppendix A - Engineering Successful Change\nPresents some \u2018golden rules\u2019 for achieving a \u2018No surprises endgame\u2019.\nAppendix B - Glossary\nDefines some of the key terms used throughout the book.\n The Agility Challenge 33\n\n Key Points\n1. Rapid change is essential if organisations are to survive disruption.\n2. Organisations are looking to create value through change and are grappling with the triple constraint of flexibility, effectiveness, and predictability.\n3. Many of the historic barriers to greater Agility have been dissolved by new approaches and technologies. The global Covid-19 pandemic has also accelerated the need for businesses to be more rapidly responsive to change.\n4. The Enterprise Agile approach focuses on insight into user needs and high-quality delivery principles.\n5. This book describes a method for building and running technology-led products based on nearly 30 years of practical experience.\n 34 The Agility Challenge\n\n Chapter 02\nOrganisational Agility\n\nOrganisations are seeking greater Agility to thrive in a rapidly changing world where delivering value to customers is key. Meeting this challenge requires updated thinking on how to build and run technology, and how to weave this new approach into the organisational fabric.\nGreater Agility requires a combination of the right people, supported by the organisational culture and values, lightweight processes, and appropriate tools. We start by exploring\nsome of these key components and the essential things\nthat enable Agility.\nConcepts\nTechnology at the Heart of the Organisation\nOrganisations have historically imposed functional divides within their internal structure. There is, of course, a need to group people and processes in an organisation of any reasonable scale. The challenge as organisations grow is that people can develop an affinity to their job function at the expense of the delivery of business value through the product or service they provide.\nEnabling true organisation-wide Agility requires a rethink of what organisations look and feel like. The established view of IT as an internal service provider, separate from \u2018the business\u2019 requires re-examination. Technologies can no longer be seen as merely useful tools provided by the IT department to help businesses execute their processes. To deliver innovative digital services, all modern organisations need technology at their core.", "start_char_idx": 24763, "end_char_idx": 30102, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "02afceb5-ca16-4260-bf28-260a0f55c149": {"__data__": {"id_": "02afceb5-ca16-4260-bf28-260a0f55c149", "embedding": null, "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21", "node_type": "4", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "7b8ab6f4cd22076034037208ddad5c4e39dec1170ddfde79e3ef7c946fa0a322", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "284c104f-6f03-4fe8-bf5e-7bc1ade47f74", "node_type": "1", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "de99fd415edb332a4ee915ed035feb2677071b3c4c46885bdfc850586a08415d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f4c2ec35-e065-44ca-824f-665b589bee55", "node_type": "1", "metadata": {}, "hash": "8fdc74f847360f981dcc422d37c1afec42c52e328274fd4d246961480564a447", "class_name": "RelatedNodeInfo"}}, "text": "We start by exploring\nsome of these key components and the essential things\nthat enable Agility.\nConcepts\nTechnology at the Heart of the Organisation\nOrganisations have historically imposed functional divides within their internal structure. There is, of course, a need to group people and processes in an organisation of any reasonable scale. The challenge as organisations grow is that people can develop an affinity to their job function at the expense of the delivery of business value through the product or service they provide.\nEnabling true organisation-wide Agility requires a rethink of what organisations look and feel like. The established view of IT as an internal service provider, separate from \u2018the business\u2019 requires re-examination. Technologies can no longer be seen as merely useful tools provided by the IT department to help businesses execute their processes. To deliver innovative digital services, all modern organisations need technology at their core. The successful modern organisation is, fundamentally, a technology organisation operating in a particular domain.\n 36 Organisational Agility\n\n  Figure 2-1: Organisational Convergence\n  \u2018Business\u2019 Domain Specialists\n\u2018IT\u2019 Technology Specialists\nProduct Teams\n Now more than ever, CIOs need to understand how technology can add value to the organisation while CMOs need to understand what it can offer customers. To meet these challenges, many organisations have appointed a CDO (Chief Digital Officer), a move which is proving to be pivotal in driving digital strategies forward. But this is only one piece\nof the Agile puzzle. A deeper cultural and structural shift is required to transform into a truly Agile organisation that can rapidly deliver change.\nWe explore culture and organisation in more detail in Chapter 4.\n Organisational Agility 37\n\nMulti-Speed IT\nDelivering new and innovative digital services will not typically be a greenfield adventure. Unless you are a start-up or a relatively young organisation, you will already have mature back-office systems, legacy technology, and a wealth of experience around your customer needs and business processes. The challenge is to leverage existing knowledge and systems to change rapidly - without being constrained by a lack of elasticity in the legacy world.\nMany people have already considered this dilemma and produced a variety of models to allow for varying rates of change. Much of this thinking is based on the concept of shearing layers - the different refresh rates of the components of a building: \u2018site, structure, skin, services, space and stuff\u2019. The site on which a building is placed is fixed forever. The structure of a building is expected to last tens of years, whilst the services, layout and d\u00e9cor will change more frequently.\nThe use of shearing layers is adopted by the architectural principle of pace layering that designs buildings with future adaptability in mind.\n 38 Organisational Agility\n\n  Figure 2-2: Gartner Pace Layering\nSystems of Differentiation\nPace layering was introduced into the technology domain by Gartner. Within the technology model, it is acknowledged that different systems can evolve at different speeds based on their proximity to the end-customer and the need for innovation.\nThe idea of multi-speed technology change was also popularised\nby Geoffrey Moore, who proposed that rapidly changing systems of engagement could be used to fuel innovation and develop new services with more stable systems of record as foundations.\nFigure 2-3: Bimodal Technology Change\nOrganisational Agility 39\n  Systems of Innovation\nSystems of Record\n    Systems of Engagement\nSystems of Record\n Rate of Change Built to Last Built to Change\n\nThese models can be thought of as multi-lane highways with a different velocity of change in each lane. Both models highlight two key points that we will return to several times throughout this book:\n1. There is no \u2018one size fits all\u2019 delivery approach\n2. Appropriate architecture is essential.\nThe point on architecture is important - it is a critical ingredient in supporting one of the core values of Enterprise Agile - sustainability and the ability to easily support change well into the future. You can only achieve this proposed separation of layers if your technology stack supports it.\nThis is where well-defined APIs and service layers become essential.\nThe use of these interfaces allows work to start while decisions on UI, database, and inter-service communication are yet to be made \u2013 which, in turn, demonstrates business value to customers early. Delivering value to the customer at the earliest opportunity can mean the difference between a customer-led success story and a technology-centric project that failed to deliver.\nThe Product Portfolio\nThe concept of portfolio management dates back to the 1970s. Whereas projects and programmes are temporary structures that deliver change, a portfolio is an enduring model of the applications in the organisation and is used to direct investment.\nThe product portfolio thus represents the technology delivery that the organisation is undertaking to deliver its strategy.", "start_char_idx": 29125, "end_char_idx": 34262, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f4c2ec35-e065-44ca-824f-665b589bee55": {"__data__": {"id_": "f4c2ec35-e065-44ca-824f-665b589bee55", "embedding": null, "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21", "node_type": "4", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "7b8ab6f4cd22076034037208ddad5c4e39dec1170ddfde79e3ef7c946fa0a322", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "02afceb5-ca16-4260-bf28-260a0f55c149", "node_type": "1", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "54c33116375f710408c006f29ea891db1ea4bd4c3dd25bee378bd1203e70c144", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "41c9d308-f9f3-4dc6-8cd8-cc2dff1cb62b", "node_type": "1", "metadata": {}, "hash": "681cbebe8db279b6910204d525e6c7e5081b904390b384da7b2db9ca0f8d54e5", "class_name": "RelatedNodeInfo"}}, "text": "You can only achieve this proposed separation of layers if your technology stack supports it.\nThis is where well-defined APIs and service layers become essential.\nThe use of these interfaces allows work to start while decisions on UI, database, and inter-service communication are yet to be made \u2013 which, in turn, demonstrates business value to customers early. Delivering value to the customer at the earliest opportunity can mean the difference between a customer-led success story and a technology-centric project that failed to deliver.\nThe Product Portfolio\nThe concept of portfolio management dates back to the 1970s. Whereas projects and programmes are temporary structures that deliver change, a portfolio is an enduring model of the applications in the organisation and is used to direct investment.\nThe product portfolio thus represents the technology delivery that the organisation is undertaking to deliver its strategy. Combining the product portfolio with a tool such as the McFarlan Matrix allows an organisation to track how individual initiatives contribute to each strategic goal.\n 40 Organisational Agility\n\n Figure 2-4: McFarlan\u2019s Portfolio Matrix\nCritical to existing business operations (Controller)\nValuable but not critical to success (Caretaker)\nCritical to achieving future business strategy (Developer)\nMay be critical to future success (Entrepreneur)\nImpact on Strategy\nFigure 2-4 shows an example of the McFarlan Matrix of Portfolio Categorisation, which provides four basic classifications of application.\nComplementing a portfolio view of applications is the ITIL (information technology infrastructure library) service portfolio or catalogue. Similarly, this describes the services provided by a technology function often related to the support of the application portfolio. Within the modern organisation, a portfolio management approach is still relevant, although separation of applications and services is likely to be replaced by a common view of the technology-led products provided to internal and external user communities.\nOrganisational Agility 41\n Factory Strategic\nSupport Turnaround\n    Impact on Business Operations\n\nInnovation as a Catalyst for Agility\nAll organisations are looking to change at an increasing pace to meet the Agility challenge set out in Chapter 1. Whilst start-ups have a perceived advantage over established organisations with significant legacy technology and processes, this perception may not always hold true. Whilst it is often true that being small can make change easier, the key factor is not size, or being new - it is innovation.\nMany established organisations can find it hard to innovate, having\nspent considerable time and effort optimising their organisations for operational efficiency. This optimisation does not create an environment, nor encourage the behaviours required, for innovation. Nobody\ncould argue against the need for innovation - just look at the fall of Blockbuster and the rise of Netflix, or the decline of Blackberry and Nokia as dominant forces in the mobile phone market, and the success of Apple and Samsung.\nBut what is innovation, and how can all organisations embrace it?\nSome organisations embrace the concept of innovation labs, which are deliberately distanced from the core organisation, as a mechanism to generate new ideas for products and services. For others, innovation is built into the fabric of the firm.\nTo foster innovation, the critical ingredients are the right behaviours and skills combined with Lean thinking and a culture that supports risk-taking.\n 42 Organisational Agility\n\n One model that describes the characteristics of innovation is the Harvard definition of the Innovator\u2019s DNA, as illustrated in Figure 2-5. Adopting these behaviours is an essential part of making innovation work in any organisation.\nFigure 2-5: Harvard Definition of the Innovator\u2019s DNA\nQuestioning Observing\nTake Risks Networking Experimenting\n   Courage to Innovate\nBehavioural Skills\nCognitive Skills\n     Challenge the Status Quo\nAssociated Thinking\nInnovative Business Ideas\n       Organisational Agility 43\n\nTaking a Product or Project Perspective\nHow an organisation delivers change is largely driven by the perspective of the products provided. Where \u2018run\u2019 the organisation and \u2018change\u2019 the organisation are distinct activities, full organisational Agility cannot be achieved. In this traditional model, the vehicle for delivering change is the project. Some organisations can take a product perspective and see both operating and enhancing a product as \u2018business as usual\u2019 activities. Within this model, the capacity of the Product Team dictates the speed at which change is delivered.\nKey to whether an organisation takes a product or project perspective is often governance and funding. Run activities are typically funded from operational expenditure, while change is usually a capital investment.\nUsing projects and programmes as containers for change is not necessarily a bad thing. It can be useful for getting to an initial product launch, for example. Nonetheless, there are significant benefits to breaking down barriers between \u2018change\u2019 and \u2018run\u2019 teams, and having a combined, retained Product Team.\nThe most obvious downside to projects is that they are temporary structures. Considerable energy (and associated expense) is required to form a team that becomes a productive, coherent unit.", "start_char_idx": 33330, "end_char_idx": 38744, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "41c9d308-f9f3-4dc6-8cd8-cc2dff1cb62b": {"__data__": {"id_": "41c9d308-f9f3-4dc6-8cd8-cc2dff1cb62b", "embedding": null, "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21", "node_type": "4", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "7b8ab6f4cd22076034037208ddad5c4e39dec1170ddfde79e3ef7c946fa0a322", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f4c2ec35-e065-44ca-824f-665b589bee55", "node_type": "1", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "c34f2b7f3a06bbdb6e7ed23b522b4da5152fb3ff64f2164e5c311dafefae512e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1a20c553-69ec-428f-bcf3-586450459612", "node_type": "1", "metadata": {}, "hash": "25674ca1fa8e27e3561c28c7c4c7e83ce46f60bd202e4f6f6cc03a5b5801e183", "class_name": "RelatedNodeInfo"}}, "text": "In this traditional model, the vehicle for delivering change is the project. Some organisations can take a product perspective and see both operating and enhancing a product as \u2018business as usual\u2019 activities. Within this model, the capacity of the Product Team dictates the speed at which change is delivered.\nKey to whether an organisation takes a product or project perspective is often governance and funding. Run activities are typically funded from operational expenditure, while change is usually a capital investment.\nUsing projects and programmes as containers for change is not necessarily a bad thing. It can be useful for getting to an initial product launch, for example. Nonetheless, there are significant benefits to breaking down barriers between \u2018change\u2019 and \u2018run\u2019 teams, and having a combined, retained Product Team.\nThe most obvious downside to projects is that they are temporary structures. Considerable energy (and associated expense) is required to form a team that becomes a productive, coherent unit. This time-consuming and expensive process is then repeated for the next project.\nOrganisations should start thinking about change as business as usual rather than as a discrete project activity. In a product-led organisation, once the investment in creating a team has been made, the organisation is in a position to reap the long-term benefits from that investment.\n 44 Organisational Agility\n\nBJSS Opinion The Hierarchy of Concerns\nTo build a model of what \u2018good\u2019 looks like, it is useful to dimension the solution space in several ways. A good starting point is to consider the hierarchy of responsibilities and activities in product delivery. Progressing through successive levels reveals further detail and a lower level of granularity.\nFigure 2-6 identifies four key layers: the organisation, the portfolio, the product, and the Delivery Team. Our model is constructed on the premise that organisations operate one or more portfolios of products they wish to build upon. The focus at the organisation level is on strategy, funding and governance.\nBeneath the organisation layer sits the portfolio(s) containing the individual products that serve users and customers. Each of these products is typically technology-enabled and requires focused leadership to ensure they operate and change in a way that delivers value to the organisation.\nFinally, the lowest layer deals with the day-to-day work of the Delivery Team and the implementation and support of technology and business change.\n Organisational Agility 45\n\n Figure 2-6: Hierarchy of Concerns\n Organisation\nPortfolio\nProduct\nDelivery\nStrategy and organisation roadmap Culture and values\nSourcing and supplier strategy Enterprise architecture Governance and finance\nPrioritising initiatives to deliver strategy Integration and management of dependencies Allocation of people\nBusiness architecture\nValue-based investment decisions\nProduct roadmap\nProduct backlog and direction Release planning and prioritisation User communication and feedback Solution architecture\nService metrics\nDelivery backlog Detailed estimation Work allocation User-centric design Technical assurance Delivery metrics\n       46\nOrganisational Agility\n\nOrganisation-Level Activities\nThe organisation needs to lay out the context and framework within which Product Teams can deliver value. Ultimately, the organisation needs to establish a strategy, and set goals and a roadmap. This process will be most effective when there is a feedback loop. This insight will come from Product Teams and will always be guided by information relating to the success of current products, user needs, and general movement in the market.\nA complete discussion of business strategy and marketing is beyond the scope of this book. It is important to reflect on the attributes of strategy and organisational-level constraints that influence the work of Product Teams in delivering change and operating effectively.\nStrategy and Roadmap\nWe expect there to be a forward vision for the direction of the organisation and its implications for the products and services offered. The organisation\u2019s strategy will address the markets it is targeting, and the range of products and services on offer.\nProduct Teams should be empowered to deliver against this strategy by maximising value through evolving their product to meet ever-changing user needs. A broad roadmap for the organisation should highlight the introduction of new products into the portfolio, or the retirement and replacement of legacy ones.\nCulture and Values\nThe adoption of Agile is frequently misinterpreted as simply the adoption of a new set of practices and events. However, to truly evolve from a \u2018traditional\u2019 organisation to an Agile one, a fundamental change in the entire mindset of the organisation is often required.\n Organisational Agility 47\n\nThe organisation\u2019s culture and values should support the work of the Product Teams and enable them to operate as autonomously as possible. The tone and behaviours of the team and its ability to collaborate effectively towards delivery should be reinforced by the organisation.\nA challenge we often see is when multiple suppliers are engaged in support of a Product Team, or parts of the organisation are outsourced. Ideally, you would want all suppliers collaborating towards the common goal of delivering the most advantageous change for the customer.", "start_char_idx": 37720, "end_char_idx": 43129, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1a20c553-69ec-428f-bcf3-586450459612": {"__data__": {"id_": "1a20c553-69ec-428f-bcf3-586450459612", "embedding": null, "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21", "node_type": "4", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "7b8ab6f4cd22076034037208ddad5c4e39dec1170ddfde79e3ef7c946fa0a322", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "41c9d308-f9f3-4dc6-8cd8-cc2dff1cb62b", "node_type": "1", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "7c6ff08ff35a3df8196a388f8d4db1e5a09fb2fd594b5a43b927396abe5b3e0a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "08ec17ac-e048-44a7-a5fa-9a323446cca6", "node_type": "1", "metadata": {}, "hash": "1c1f08be6409c8665e0e86fdb37bca53a71abbce2637610324ecfdaafa61d47d", "class_name": "RelatedNodeInfo"}}, "text": "A broad roadmap for the organisation should highlight the introduction of new products into the portfolio, or the retirement and replacement of legacy ones.\nCulture and Values\nThe adoption of Agile is frequently misinterpreted as simply the adoption of a new set of practices and events. However, to truly evolve from a \u2018traditional\u2019 organisation to an Agile one, a fundamental change in the entire mindset of the organisation is often required.\n Organisational Agility 47\n\nThe organisation\u2019s culture and values should support the work of the Product Teams and enable them to operate as autonomously as possible. The tone and behaviours of the team and its ability to collaborate effectively towards delivery should be reinforced by the organisation.\nA challenge we often see is when multiple suppliers are engaged in support of a Product Team, or parts of the organisation are outsourced. Ideally, you would want all suppliers collaborating towards the common goal of delivering the most advantageous change for the customer. This requires not only the correct sourcing strategy, but we also recommend that all supplier staff are aligned to the culture and values of the\nhost organisation.\nSourcing and Supplier Strategy\nThe approach taken to the use of suppliers by an organisation and the strategy for the use of internal and external teams plays a pivotal role in the success of any product. We believe that good delivery is ability-led and relies on having strong people in key roles. The procurement and utilisation of the right people for the job is a critical success factor.\nAll too often, procurement functions have been given objectives by the organisation that do not align with the objectives of the Product Teams. Ultimately, all functions in the organisation should be focused on the common goal of delivering customer value. Collaboration and effective working across the supply chain are the keys to Agility, and a balance is required such that the commercial interests of all parties are preserved.\nWhere a Product Team wishes to make use of external products or services, it is recommended that support from procurement or vendor management is embedded within the team. By including the vendor management function within the Product Team, supplier performance management can be more relevant within the context of the work being undertaken.\n 48 Organisational Agility\n\nCloud Migration\nMoving to the Cloud can be a key enabler for business Agility. However, many organisations fail to unlock the full value, allowing Cloud migration to become a technical activity, and not considering the impact on the full operating model in advance.\nThe best starting point is to understand the current maturity of the business with Cloud, followed by a design phase to drive the optimum operating model that suits this competence. We have found the following patterns to be extremely useful for building Cloud readiness, as shown in Table 2-1.\n Organisational Agility 49\n\nTable 2-1: Cloud Migration Patterns\n Pattern\n   Description\n   Best use\n   Strangler\n \u25cb Build separate facade between old and new environments\n\u25cb Educate teams\n\u25cb Same team to run with\nresource augmentation\n\u25cb Gradual migration from old to new\n \u25cb Large scale data centre exit, or gradual reduction\n\u25cb Typical lift and shift rehost\n Side car\n  \u25cb Build small ops model and separate team\n\u25cb Deploy some shared services. Major focus on automation\n  \u25cb New business unit\n\u25cb Demand for app refractor or replatform\n All in\n   \u25cb Straight switch from old to new operations model\n\u25cb No time constraints\n   \u25cb Start up\n\u25cb New business acquisition\n   Rotten apple\n  \u25cb Replacement of old tech stack driven by need to replace and reduce costs and/or add new features\n  \u25cb Replacement of expensive technology, such as WebSphere, WebLogic, Oracle, to Cloud system\n   Combination\n  \u25cb Combination of two approaches\n\u25cb Useful when time on side\n\u25cb Often an intermediate step before full pattern or when no clear strategy is available\n  \u25cb Start up\n\u25cb New business acquisition\n   50 Organisational Agility\n\nEnterprise Architecture\nIn an organisation of any reasonable scale, we expect to see some form of enterprise architecture function. This group needs to provide a clear set of lightweight constraints and guidance that enable Product Teams to operate and deliver change. There is a clear balance to be struck. We are not in favour of ivory towers and overly prescriptive corporate standards that get in the way of Agility.\nThe enterprise architecture function operates best as a two-way dialogue and as a group that coaches and supports Product Teams, rather than simply passing down standards. The key reason for this function is to help the organisation move forward at pace rather than hold it back. To this end, enterprise architecture should primarily be about providing guidance. This will enable the experience from\npast lessons learned to benefit the team, rather than simply enforcing standards.\nCertain strategic goals in the organisation may require support from the enterprise architecture function.", "start_char_idx": 42103, "end_char_idx": 47160, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "08ec17ac-e048-44a7-a5fa-9a323446cca6": {"__data__": {"id_": "08ec17ac-e048-44a7-a5fa-9a323446cca6", "embedding": null, "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21", "node_type": "4", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "7b8ab6f4cd22076034037208ddad5c4e39dec1170ddfde79e3ef7c946fa0a322", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1a20c553-69ec-428f-bcf3-586450459612", "node_type": "1", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "12059dde62dec89420d798830eb890986ae5eaba2de2d6d5405a411a77a0f94e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e696956f-7523-44f3-993f-222102656b2a", "node_type": "1", "metadata": {}, "hash": "e4b52946d5fc2e0db52c4476ed778be342c196f9e75f5acaf892fc8fc34ed83f", "class_name": "RelatedNodeInfo"}}, "text": "This group needs to provide a clear set of lightweight constraints and guidance that enable Product Teams to operate and deliver change. There is a clear balance to be struck. We are not in favour of ivory towers and overly prescriptive corporate standards that get in the way of Agility.\nThe enterprise architecture function operates best as a two-way dialogue and as a group that coaches and supports Product Teams, rather than simply passing down standards. The key reason for this function is to help the organisation move forward at pace rather than hold it back. To this end, enterprise architecture should primarily be about providing guidance. This will enable the experience from\npast lessons learned to benefit the team, rather than simply enforcing standards.\nCertain strategic goals in the organisation may require support from the enterprise architecture function. It may be necessary, for example, to re-platform technology to introduce new levels of interoperability across a range of products. This type of broader organisation initiative will require overarching architectural support.\n Organisational Agility 51\n\n Several enterprise architecture models exist, and their coverage is beyond the scope of this book. It is useful to draw attention to the core elements that we expect the function to cover. The four key components are business architecture, information architecture, application architecture, and technology architecture as shown in Figure 2-7.\nFigure 2-7: Four-layer Architecture\nBusiness Architecture\nInformation Architecture\nApplication Architecture\nTechnology Architecture\nBusiness processes and activities\nData modelling and reference data\nCustom built and off-the-shelf package\nInfrastructure and deployment models\n      The enterprise architecture function will only cover the lightweight standards around these areas. Most of the specific detail will come from the solution architecture for specific products.\n 52 Organisational Agility\n\nGovernance and Funding\nFunding the initiatives described in the product portfolio will be decided by how they contribute to the overall strategic aims of the organisation.\nFunding will normally be allocated through an annual planning process. While this does not support a fully Agile model, it corresponds to a related need to report financial results to shareholders. This is often a real-world constraint that cannot be changed.\nThrough an appropriate governance process, it is possible that funding across the portfolio may be allocated more dynamically. However,\nthis is unlikely to work for large-scale capital investment projects.\nA common route to funding change is allocating a budget to individual products. This effectively sets a resource capacity that product owners are empowered to use as they see fit to maximise value for the organisation.\nA lightweight but effective governance process should sit between the broader organisation and the Product Teams. Governance should effectively draw together stakeholders from architecture, delivery management and product ownership to ensure proper alignment and decision making. Where relevant, it is likely vendor management or suppliers would also be represented. We cover governance in more detail in Chapter 5.\n Organisational Agility 53\n\n  Figure 2-8: Technological Evolutions\n1950s 1980s\nMainframe Client Server\n      2010s 1990s\nContainerisation Virtualisation\n    Cloud Governance\nEnterprise IT has undergone several technological evolutions over the last 60 years: mainframe, client server, virtualisation, and containerisation have all driven architectural change.\n 54 Organisational Agility\n\nIn each case, technological change has enabled organisations to drive efficiencies and enable innovation but not without some significant internal changes. Cloud has been no different.\nTo fully realise the benefits of Cloud computing, organisations need to change their approach to people, processes, and culture.\nSome of the key changes that are introduced by Cloud include:\n1. Cloud computing transforms spending from a capital expense for on-premises and co-located IT infrastructure to a pay-as-you-go utility billing model for Cloud resources and services. This has not been an issue for Agile \u2018born-in-the-Cloud\u2019 organisations but has a significant impact on more traditional enterprises with legacy estates and existing investment in data centres\n2. On-demand Cloud computing offers scope for huge reductions. In the time it takes to provision infrastructure, engineers can deploy entire enterprise stacks across multiple environments at the push of a button. For the first time, engineers have access to seemingly limitless resources and the associated potential for uncontrolled expenditure. Establishing deployment controls and the visibility of costs is imperative\n3. To fully realise the benefits of Cloud services, organisations must instill infrastructure change management processes to align with Agile software development practices such as continuous monitoring and continuous delivery\n4. Cloud TCO requires a more nuanced analysis than previous models. The impact of a Cloud implementation on the business requires consideration of the \u2018soft\u2019 benefits of Cloud adoption as well as the spend. These benefits are often hidden and include increased developer productivity, reuse of services, and architectural patterns which, in turn, lead to increased throughput of delivery and improved quality.\n Organisational Agility 55\n\n Mapping the Portfolio\nThe system landscape in many organisations is often quite complex.", "start_char_idx": 46283, "end_char_idx": 51851, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e696956f-7523-44f3-993f-222102656b2a": {"__data__": {"id_": "e696956f-7523-44f3-993f-222102656b2a", "embedding": null, "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21", "node_type": "4", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "7b8ab6f4cd22076034037208ddad5c4e39dec1170ddfde79e3ef7c946fa0a322", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "08ec17ac-e048-44a7-a5fa-9a323446cca6", "node_type": "1", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "3203412260d6d111a6bb7ebd53f8064e3c0b8717a9de1c92b73528aefdbfe2aa", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "30669a87-ad82-4fdc-a47a-dffc0a313877", "node_type": "1", "metadata": {}, "hash": "8b7b5c6c4727bf90f1ceaa15db07d8a8c49575581eb02a1a3d50ef28c037b3b4", "class_name": "RelatedNodeInfo"}}, "text": "In the time it takes to provision infrastructure, engineers can deploy entire enterprise stacks across multiple environments at the push of a button. For the first time, engineers have access to seemingly limitless resources and the associated potential for uncontrolled expenditure. Establishing deployment controls and the visibility of costs is imperative\n3. To fully realise the benefits of Cloud services, organisations must instill infrastructure change management processes to align with Agile software development practices such as continuous monitoring and continuous delivery\n4. Cloud TCO requires a more nuanced analysis than previous models. The impact of a Cloud implementation on the business requires consideration of the \u2018soft\u2019 benefits of Cloud adoption as well as the spend. These benefits are often hidden and include increased developer productivity, reuse of services, and architectural patterns which, in turn, lead to increased throughput of delivery and improved quality.\n Organisational Agility 55\n\n Mapping the Portfolio\nThe system landscape in many organisations is often quite complex. Mapping the portfolio can be undertaken in many ways depending on the view required. The decision as to the appropriate approach is informed by the desired rate of change and the criticality of the system, as illustrated in Figure 2-9.\nFigure 2-9: Mapping System Changes\n56 Organisational Agility\nMission Criticality\n Cyber Defence\nHigh Frequency Trading\nTracing Risk Management\n HR / Recruitment\nBusiness Intelligence\nAP/AR\nPayroll\nFlight Control Systems\n Required Rate of Change\n\n Mapping out the organisation\u2019s portfolio of products and services in this way can be very helpful. It allows the organisation to take a view on where investment should go, and also advise as to the types of teams and suppliers to apply. Figure 2-10 introduces some broad categories\nof approach.\nFigure 2-10: Technical Implementation Based on System Mapping\nOrganisational Agility\n57\nMission Criticality\n  HR / Recruitment\nBusiness Intelligence\nProduct Implementation\nAP/AR\nPayroll\nFlight Control Systems\nTracing Risk Management\nEnd User Computing\n Cyber Defence\nHigh Frequency Trading\nEnterprise Advanced Custom Development Engineering\n Required Rate of Change\n\n The Enterprise Agile Approach\nComponents of the Technology Landscape\nIn our approach, we recommend that modern organisations embrace several concepts within the technology space. The underlying culture and values of the organisation support these components and guide all behaviours and decision making.\nFigure 2-11: Components of the Technology Landscape\n    Innovation\nStrategy\nGovernance\nDelivery Management\nMethods and Tools\n  Architecture\n Analysis\n Assurance\n Vendor\nManagement\n Product Engineering\n Platform Engineering\nCulture and Values\n  58\nOrganisational Agility\n\nAt the core of technology delivery are the strategic and supporting functions of Innovation, Governance, Methods, and Tooling. These functions serve to determine the direction and provide oversight on delivery and are often combined into the \u2018Office of the CIO\u2019.\nDelivering change and supporting the technology products of the organisation is the remit of Product Engineering Teams. These teams are aligned to particular products, and are principally concerned with the delivery and maintenance of software.\nPlatform engineering provides the underlying infrastructure on which products are run. For many organisations, this will be a public or private Cloud solution. The platform will usually be presented to Product Teams as Infrastructure as a Service (IaaS) or Platform as a Service (PaaS), allowing them to code against APIs and self-provision infrastructure, removing a traditional blocker to Agility - long infrastructure lead times.\nThe Innovation Lab\nAn Innovation Lab is useful for facilitating Agility in the organisation. Some organisations may have dedicated Innovation Labs, others may spin one up for a short period, or bring in a third party to facilitate one for them. In either case, Innovation Labs can be fully remote or have a dedicated physical working space.\nEither way, the key point is that the lab has a Lean process for generating innovative technology-led business ideas. Its purpose is to create a business idea that may be developed further into a product within the organisation\u2019s portfolio.\n Organisational Agility 59\n\n An Innovation Lab functions best when \u2018Innovator\u2019s DNA\u2019 behaviours are combined with Lean thinking and a process for the generation and refinement of potential ideas. Our process for ideation is illustrated in Figure 2-12. The model seeks to open up the idea generation process, and align with organisational goals and desired outcomes.\nFigure 2-12: The Ideation Process\nTake Action\n  Clarify the Mission\n   Task, Review, Socialise\n  60\nOrganisational Agility\nSolution & Envision\nGenerate Information\n\nHackathons\nA Hackathon is a useful tool to enable Agility and idea generation around a specific problem. Taking place over one or two days, a Hackathon has a single objective, usually to produce a basic functioning solution to\na given problem.", "start_char_idx": 50738, "end_char_idx": 55870, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "30669a87-ad82-4fdc-a47a-dffc0a313877": {"__data__": {"id_": "30669a87-ad82-4fdc-a47a-dffc0a313877", "embedding": null, "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21", "node_type": "4", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "7b8ab6f4cd22076034037208ddad5c4e39dec1170ddfde79e3ef7c946fa0a322", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e696956f-7523-44f3-993f-222102656b2a", "node_type": "1", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "ffd4dfa01a2f4de192551277702df9b054e775a6f2049fb73d3a30ac7591c3f6", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "fef6bbc2-01dc-4a09-980e-585cf0021e89", "node_type": "1", "metadata": {}, "hash": "b7ff0fe9b44eb616d16875fa0b9ff7a8872d5b7e8788f6acb32584e8e719aec0", "class_name": "RelatedNodeInfo"}}, "text": "Its purpose is to create a business idea that may be developed further into a product within the organisation\u2019s portfolio.\n Organisational Agility 59\n\n An Innovation Lab functions best when \u2018Innovator\u2019s DNA\u2019 behaviours are combined with Lean thinking and a process for the generation and refinement of potential ideas. Our process for ideation is illustrated in Figure 2-12. The model seeks to open up the idea generation process, and align with organisational goals and desired outcomes.\nFigure 2-12: The Ideation Process\nTake Action\n  Clarify the Mission\n   Task, Review, Socialise\n  60\nOrganisational Agility\nSolution & Envision\nGenerate Information\n\nHackathons\nA Hackathon is a useful tool to enable Agility and idea generation around a specific problem. Taking place over one or two days, a Hackathon has a single objective, usually to produce a basic functioning solution to\na given problem. The team, ideally formed from different disciplines, attempts to address the objective either as a competition - with multiple teams attempting to solve the same problem - or collectively as a single group.\nThe competitive approach allows alternative options to be explored with left-field solutions that may not normally be considered. Due to the fixed timescale, the focus is on addressing the problem and not creating a production-ready deliverable. Indeed, the emphasis is on innovation and exploration. Enterprise Agile provides the appropriate Hackathon structure, through Stand-ups and Show and Tells, which are used to share information as the event progresses. Mini-Sprints, that might only last three hours, can be used to explore and potentially discard ideas.\nThe Hackathon should ring-fence the attendees from their day-to-day tasks, with everyone being co-located - often off-site - to ensure there are no distractions. Allowing a team to focus on a problem this way can be very liberating. A Hackathon can act as an interesting introduction to concepts such as DevOps, with members from different disciplines working together, demonstrating how the removal of traditional barriers between development and operations can open up new Agility.\nThe advent of the Cloud allows Hackathons to be undertaken without the need for purchasing hardware or software licences and can leverage free trials provided by the various Public Cloud vendors. This allows teams to evaluate options and services very quickly.\n Organisational Agility 61\n\n Key Points\n1. The successful modern organisation has technology at its core as an enabler, rather than a discrete supporting function.\n2. Multi-speed IT provides a useful model for introducing Agility to systems that engage customers.\n3. Agility can be increased by taking a product perspective of continuous change rather than discrete projects.\n4. Technology delivery is guided by the organisation\u2019s culture and values system.\n5. Innovation Labs are a powerful tool for creating new ideas and introducing Agility into the organisation.\n 62\nOrganisational Agility\n\n Chapter 03\nA Pattern for Delivering Value\n\nOur aim with this book is to highlight good practice for using Agility to introduce and enhance technology products. In\nthe opening chapters, we explored the challenges facing organisations and the rationale for our approach. In this chapter, we describe the patterns and practices for delivering value.\nNo \u2018one size fits all\u2019 methodology or approach is appropriate\nto every change initiative. Rather, one of several common approaches can be adapted to suit the needs of the organisation, framed by a supportive culture and values system.\nIncreasing organisational Agility is a journey and is not achieved by rigidly implementing a new operating model. Success comes from embracing Agile techniques and an Agile mindset.\nConcepts\nThe Evolution of Agile Methods\nWhat we now describe as \u2018Agile methods\u2019 began appearing in the early 1990s, before the Agile Manifesto. These early methods focused on developing individual software applications in isolation. Born out of the frustration of working in a process-heavy environment, software engineers sought a more effective way of working closely with users to develop the software they needed.\nMany of these early methods eschewed all process and were often criticised for letting software projects become \u2018developer playgrounds\u2019 with insufficient formality for enterprise-scale change initiatives. This frustration with early attempts at Agile led us to develop the Enterprise Agile approach. We aimed to help clients enjoy the benefits of greater\n 64 A Pattern for Delivering Value\n\nflexibility and efficiency, whilst retaining predictability and achieving a \u2018No surprises endgame\u2019 for delivery projects.\nRecent developments have seen the growth of scaled Agile approaches that seek to address larger change initiatives. Whilst some of these\nare gaining traction, they are still largely software-focused and do not always link effectively to organisation governance and business change.\nXP\nExtreme Programming (XP) is an early Agile methodology dating back to the late 1990s. It identifies twelve practices and several supporting activities, values and principles.", "start_char_idx": 54973, "end_char_idx": 60138, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fef6bbc2-01dc-4a09-980e-585cf0021e89": {"__data__": {"id_": "fef6bbc2-01dc-4a09-980e-585cf0021e89", "embedding": null, "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21", "node_type": "4", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "7b8ab6f4cd22076034037208ddad5c4e39dec1170ddfde79e3ef7c946fa0a322", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "30669a87-ad82-4fdc-a47a-dffc0a313877", "node_type": "1", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "17f4a7c6c4ef3fec2c0877761912508772764bf93b48addb8f36298d983ce898", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "faa92482-e7b7-4bbb-8750-cd395942cc62", "node_type": "1", "metadata": {}, "hash": "263583f0b4e97309d37ff8538eeade45a78d9e363e0049456bc3340c07b5fadc", "class_name": "RelatedNodeInfo"}}, "text": "Many of these early methods eschewed all process and were often criticised for letting software projects become \u2018developer playgrounds\u2019 with insufficient formality for enterprise-scale change initiatives. This frustration with early attempts at Agile led us to develop the Enterprise Agile approach. We aimed to help clients enjoy the benefits of greater\n 64 A Pattern for Delivering Value\n\nflexibility and efficiency, whilst retaining predictability and achieving a \u2018No surprises endgame\u2019 for delivery projects.\nRecent developments have seen the growth of scaled Agile approaches that seek to address larger change initiatives. Whilst some of these\nare gaining traction, they are still largely software-focused and do not always link effectively to organisation governance and business change.\nXP\nExtreme Programming (XP) is an early Agile methodology dating back to the late 1990s. It identifies twelve practices and several supporting activities, values and principles. Most commonly known for pair programming, XP also promoted practices such as programmer welfare through development at a sustainable pace.\nWhilst not often applied in a textbook fashion, some of the core elements of XP remain at the heart of Agile delivery, notably continuous integration and test-driven development. A criticism of XP is that it is best suited to small teams and does not scale effectively.\n(R)UP\nThe Unified Process (UP) refers to the generic process that was popularised as the Rational Unified Process (RUP) after the commercial toolset of that name and to a lesser extent in the Open Source version, Open UP. The key elements of UP are a project lifecycle comprising four phases: Inception, Elaboration, Construction and Transition.\nThe previous version of Enterprise Agile extended several UP principles including a focus on risk and architecture, with iterative and incremental delivery. The strong link between UP and the RUP toolset caused many to think it was a commercial methodology requiring the toolset and was in part a factor in its declining usage.\n A Pattern for Delivering Value 65\n\nScrum\nAlso originating in the 1990s, Scrum is what many people will recognise as a common Agile approach. Scrum provides definitions of roles, events and artefacts, many of which have entered common parlance and some of which have been adopted by the Enterprise Agile approach. Scrum also defines a set of values that are fundamental\nto its successful adoption and some of these are also shared by the Enterprise Agile approach.\nScrum has become a very popular Agile method and has proven effective, particularly on small scale initiatives. In response to the desire to take Scrum principles and apply them to larger-scale problems, newer methods such as Large Scale Scrum (LeSS) and Nexus\nhave emerged.\nLeSS\nLarge Scale Scrum (LeSS) is an attempt to identify how Scrum can be scaled effectively across multiple teams working on a shared product. Formalised in 2005, LeSS combines years of experience in product development with the principles of Scrum and Lean thinking. Two variants of LeSS exist - LeSS for up to eight teams and LeSS Huge for bigger groups. It provides a framework that covers principles, structure, management, technical excellence and adoption.\nNexus\nDescribed as an \u201cexoskeleton of Scrum\u201d, the Nexus framework is increasingly used in scaled Agile projects where multiple Scrum Teams are working on a single product. It can be used alongside the Scrum Guide to scale Scrum and encourage an integrated effort amongst multiple development teams working on a common product.\n 66 A Pattern for Delivering Value\n\nSAFe\nThe Scaled Agile Framework (SAFe) has been through five revisions since 2012 and, through its \u2018Big Picture\u2019, illustrates a process for Agile delivery at scale. SAFe makes a distinction between Team, Programme and Portfolio and introduces the concept of the \u2018Agile Release Train\u2019.\nAs a method for scaled Agile delivery SAFe has been gaining in popularity. However, it has faced criticism from the Agile community for being too rigid. Some also say it lacks the strong customer focus that is central to the Agile mindset.\nDevOps and the Convergence in Technology\nIn the early days of Agile software development, it was recognised\nthat, for effective delivery, the divide between different technology disciplines such as Developers and Testers needed to be broken down. Multi-disciplinary teams focused on the common goal of delivering software that works in a live environment rather than throwing work that is development complete \u2018over the wall\u2019 to the Testers or the Operations Team. More recently, DevOps practices have advocated bringing together Development and Technical Operations as a single team responsible for the traditionally separate activities of building and running a software system. We address this topic in more detail in Chapter 8.", "start_char_idx": 59166, "end_char_idx": 64044, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "faa92482-e7b7-4bbb-8750-cd395942cc62": {"__data__": {"id_": "faa92482-e7b7-4bbb-8750-cd395942cc62", "embedding": null, "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21", "node_type": "4", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "7b8ab6f4cd22076034037208ddad5c4e39dec1170ddfde79e3ef7c946fa0a322", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "fef6bbc2-01dc-4a09-980e-585cf0021e89", "node_type": "1", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "e60e6a4bbdeeef0d006f9fec448e9a6aa5a9682df397f45f9367d58041016747", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6e7f70d8-8037-424b-8dce-614a09d2916e", "node_type": "1", "metadata": {}, "hash": "0ef7fd4d49c2f0b945ead605071f76b4fe51601ec6c3984b365fdbb199614908", "class_name": "RelatedNodeInfo"}}, "text": "As a method for scaled Agile delivery SAFe has been gaining in popularity. However, it has faced criticism from the Agile community for being too rigid. Some also say it lacks the strong customer focus that is central to the Agile mindset.\nDevOps and the Convergence in Technology\nIn the early days of Agile software development, it was recognised\nthat, for effective delivery, the divide between different technology disciplines such as Developers and Testers needed to be broken down. Multi-disciplinary teams focused on the common goal of delivering software that works in a live environment rather than throwing work that is development complete \u2018over the wall\u2019 to the Testers or the Operations Team. More recently, DevOps practices have advocated bringing together Development and Technical Operations as a single team responsible for the traditionally separate activities of building and running a software system. We address this topic in more detail in Chapter 8.\n A Pattern for Delivering Value 67\n\n Figure 3-1: Convergence Within Technology Departments\n   \u2018Build\u2019 Project Delivery\n\u2018Run\u2019 Service Management DevOps Product Delivery\nThis convergence is key to achieving savings in the operational side of the organisation.\nFigure 3-2: Transfer of Methods in DevOps\nSoftware Engineering Techniques Service Management Principles\nBuild Run\n     68\nA Pattern for Delivering Value\n\nAs shown in Figure 3-2, the adoption of DevOps techniques allows cohesive teams to efficiently build and run products for their customers.\nSoftware engineering techniques and automation have moved over the line from project delivery into operations, while service management techniques have moved back into development. It is the automation of many error-prone manual processes that reduces the barrier to rapid change and takes much of the effort out of operating a technology product.\nContinuous Delivery\nRegardless of the mechanism for getting change into the hands of users, during delivery we would always want to divide change into bite-sized pieces. At the end of each piece, the team reviews where they are and solicits feedback. Typically, this means working within time-boxed periods known as \u2018Iterations\u2019 or \u2018Sprints\u2019 that focus on delivering measurable outcomes as a result of a set of changes. After one or more Sprints, the changes are released to the user. This forms the basis of incremental delivery.\nIt is also possible that changes are immediately released to the user independent of each other. This model offers greater flexibility and is often better suited to small scale change and relatively\nmature products.\nContinuous delivery is a method of fully automating software production, quality assurance and deployment using a delivery pipeline through which software change can flow, enabling deployment into production\nat any time.\nIrrespective of the overarching delivery pattern adopted, continuous delivery and the use of repeatable automated processes is powerful and forms a key part of the Enterprise Agile approach.\n A Pattern for Delivering Value 69\n\nCloud as an Agile Enabler\nIt is worth calling out Cloud as a facet of the delivery pattern and\na key enabler of Agility. Agile methods have historically focused on\nthe production of software. Treatment of infrastructure delivery is often scant or non-existent. Traditional \u2018tin and wires\u2019 infrastructure provisioning led to project plan dependencies and inhibited Agile ways of working.\nWith Cloud, or more specifically software-defined infrastructure, increments of change to products can include not only the application software but the corresponding changes to the infrastructure too, packaged and released simultaneously. This opens up a powerful new paradigm in systems delivery and enables new architectures based on lightweight microservices to be easily deployed.\nDifferent Change Scenarios\nIn defining our thinking around delivering change, we have explored several common scenarios that we see regularly and have considerable experience of. Organisations must address a huge variety of change initiatives, but we feel these scenarios cover the bulk of the cases.\nFrequently occurring initiatives in Business to Business (B2B), Business to Consumer (B2C) or Government to Citizen (G2C) include:\nWeb-Scale Platform Evolution\nLarge modern technology organisations often embrace Agility at scale. Where they have a single product and no significant legacy, they can apply Agile methods across the organisation and release change often. Examples include companies such as Facebook, Spotify, etc.\n 70 A Pattern for Delivering Value\n\nChange Programmes\nOften requiring significant capital investment and business change, these programmes typically arise as a result of mergers and acquisition, the need for a platform refresh or the expiration of outsourcing agreements. The scale of the change, funding model and often \u2018big bang\u2019 nature of cutover impacts the level of Agility achieved.\nWe cover change programmes in more detail in our Enterprise Agile In Action paper on Transformation.\nEnhancement Projects\nMost organisations run projects continuously to enhance the technology products within their portfolio.\nIt would be possible to write a whole book on the philosophical point of \u2018Is there such a thing as an Agile project?\u2019 Greater Agility is achieved by releasing often and making value-based decisions on delivery priorities.", "start_char_idx": 63073, "end_char_idx": 68477, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6e7f70d8-8037-424b-8dce-614a09d2916e": {"__data__": {"id_": "6e7f70d8-8037-424b-8dce-614a09d2916e", "embedding": null, "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21", "node_type": "4", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "7b8ab6f4cd22076034037208ddad5c4e39dec1170ddfde79e3ef7c946fa0a322", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "faa92482-e7b7-4bbb-8750-cd395942cc62", "node_type": "1", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "ca7209703dd93a187fc2c00908e5d7ac5617d43f71a70314195bfa3864fe9024", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "82b4acb4-1a6d-4da4-b625-50c0f78f246e", "node_type": "1", "metadata": {}, "hash": "f4790729e7b1e47cecf13ba3960ed0c8fb8e83248c68b98fd9377e73e0aabb04", "class_name": "RelatedNodeInfo"}}, "text": "Where they have a single product and no significant legacy, they can apply Agile methods across the organisation and release change often. Examples include companies such as Facebook, Spotify, etc.\n 70 A Pattern for Delivering Value\n\nChange Programmes\nOften requiring significant capital investment and business change, these programmes typically arise as a result of mergers and acquisition, the need for a platform refresh or the expiration of outsourcing agreements. The scale of the change, funding model and often \u2018big bang\u2019 nature of cutover impacts the level of Agility achieved.\nWe cover change programmes in more detail in our Enterprise Agile In Action paper on Transformation.\nEnhancement Projects\nMost organisations run projects continuously to enhance the technology products within their portfolio.\nIt would be possible to write a whole book on the philosophical point of \u2018Is there such a thing as an Agile project?\u2019 Greater Agility is achieved by releasing often and making value-based decisions on delivery priorities. This can be at odds with traditional project funding processes which require an agreed business case upfront.\nGreenfield Project\nCreating a new, relatively standalone product should be undertaken in line with Agile ways of working. Feature priorities are addressed based on user needs and business value to create a Minimum Viable Product (MVP). Once launched, the MVP can be enhanced incrementally based on customer feedback.\n A Pattern for Delivering Value 71\n\nProof of Concepts\nSmall scale PoC work is a prime candidate for Lean and Agile working methods. With this type of work, a fast feedback loop is a powerful tool to direct the effort of the team towards the objectives.\nAgility in all Scenarios\nAt a time of transformative new digital technologies and globally disruptive events, the challenge becomes how to use Agility throughout the entire organisation to more rapidly and reliably adapt to\nshifting client, consumer or citizen demands. It is easy to see why small-scale changes are good candidates for Agile delivery, particularly on mature products. The adoption of Agility in larger solutions tends to be in organisations that have adopted a product (rather than a project) perspective and have placed technology at the heart of the organisation.\nAgility is often lost on large scale change programmes, where several factors impact the level of Agility:\n1. Funding \u2013 Change programmes typically involve a large capital investment that requires a detailed upfront business case and scoping exercise\n2. Delivery Model \u2013 It can be difficult to deliver change in small pieces, particularly on large programmes that might, for example, be replacing a legacy product\n3. Vendor Model \u2013 Where several suppliers are engaged, it is too easy to form silos that create barriers to Agility and the end-to-end delivery of value\n4. Architecture \u2013 Appropriate architecture is required to enable delivery to be decomposed effectively on large programmes.\nWithin this book and the Enterprise Agile method, we describe techniques to enable Agile ways of working in all of these scenarios.\n 72 A Pattern for Delivering Value\n\nBJSS Opinion Releasing Change to the Users\nEarlier we discussed different types of change initiative and how these might be delivered through continuous product innovation or discrete projects. Whenever possible, we want to break down large changes into smaller, manageable chunks and put them in front of real users to get feedback. Piecemeal introduction of change allows for regular course corrections. These subtle direction changes keep the product aligned with the market and optimise the value derived by the organisation.\nThe constructs used will depend on two key factors:\n1. How the organisation allocates funding and measures value delivered\n2. The process by which change can be delivered to the user.\nThere are situations when frequent releases are not possible, for example replacing a legacy trading system - all users need all functionality and all have to be in the same market \u2013 so a big bang transition is unavoidable.\nIdeally, you would want to release change to users often and as small incremental features, because:\n1. The users benefit from new product features\n2. The organisation gains value\n3. The Product Team receives feedback to refine the roadmap\n4. Change becomes a low risk \u2018Business as Usual\u2019 activity.\n A Pattern for Delivering Value 73\n\nThere are, of course, many real-world constraints and differences across sectors and products. Continuously delivering change to a social media networking application is likely to be easier than to a commodities trading platform, for example.\nIt is worth spending some time exploring the factors that impact release cycles. Firstly, let\u2019s tackle a key challenge for many organisations \u2013 perceived risk. We purposefully use the term \u2018perceived risk\u2019. It is often\na very subjective assessment based on prior experience that may or may not be relevant. Many organisations unintentionally develop a risk-averse culture, perhaps based on the reaction to a previous failed release.\nAttitude to risk often leads to a self-fulfilling prophecy. Change is perceived as risky; this results in additional process and a high \u2018release tax\u2019.", "start_char_idx": 67443, "end_char_idx": 72699, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "82b4acb4-1a6d-4da4-b625-50c0f78f246e": {"__data__": {"id_": "82b4acb4-1a6d-4da4-b625-50c0f78f246e", "embedding": null, "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21", "node_type": "4", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "7b8ab6f4cd22076034037208ddad5c4e39dec1170ddfde79e3ef7c946fa0a322", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6e7f70d8-8037-424b-8dce-614a09d2916e", "node_type": "1", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "6777bf54e46585a66fb46ab65cc5b3fe3544d1b4369e5a28216a2e3924aa86c3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "5ab62190-c751-4103-8fe4-acebb7e1c1cf", "node_type": "1", "metadata": {}, "hash": "b12e251aa6a9700829080466844a674fcf98fcbd541dfbc98554bdc087dded46", "class_name": "RelatedNodeInfo"}}, "text": "Change becomes a low risk \u2018Business as Usual\u2019 activity.\n A Pattern for Delivering Value 73\n\nThere are, of course, many real-world constraints and differences across sectors and products. Continuously delivering change to a social media networking application is likely to be easier than to a commodities trading platform, for example.\nIt is worth spending some time exploring the factors that impact release cycles. Firstly, let\u2019s tackle a key challenge for many organisations \u2013 perceived risk. We purposefully use the term \u2018perceived risk\u2019. It is often\na very subjective assessment based on prior experience that may or may not be relevant. Many organisations unintentionally develop a risk-averse culture, perhaps based on the reaction to a previous failed release.\nAttitude to risk often leads to a self-fulfilling prophecy. Change is perceived as risky; this results in additional process and a high \u2018release tax\u2019. As a result, changes are made less often and releases become bigger, and riskier, as a result. The automation and DevOps techniques we talk about in this book are key to breaking out of this cycle.\nA further important determinant of the change cycle is the impact on the user and other products and services. Where a change involves new ways of working, new people in new roles and so forth, then more up-front planning is required. These non-Agile real-world constraints, such as recruitment and training, get in the way of continuous\nchange. This can be approached by breaking the work down into manageable chunks that address specific aspects of the new ways of working, including subgroups, or even individual new roles, as they are introduced.\nAnother category of impact concerns integration with other technology products, some of which may reside outside of the organisation. In these circumstances, changes have to be aligned with change in other upstream or downstream systems. This is why appropriate architecture is so crucial to achieving Agility. Good enterprise architecture will enable integration across systems changing at different speeds.\n 74 A Pattern for Delivering Value\n\nWhen Large Scale Change is Unavoidable\nAs discussed, releasing changes to existing products often comes down to attitude to risk and an assessment of the impact or scale of the change. One common class of problem is worth exploring further.\nLaunching a new product involves a large change, particularly if replacing a legacy system. This situation is often unavoidable, for example, re-writing an outsourced service that is coming to the end of the contract.\nThe functionality for the new product must reach critical mass for it\nto be useful - this is often referred to as the Minimum Viable Product (MVP). There are two transition options - big bang or incremental. With a big bang approach, all users begin to use the product at the same time rather than it being introduced to smaller groups of users in phases.\nThe obvious choice is to avoid big bang due to the risk. However, that\nis not without challenge, particularly if modifications are required to\nthe existing system to run old and new in parallel. Sometimes big bang is the only option, for example, when users cannot be partitioned in\nany way, such as on a trading platform where a single market with counterparty credit relationships exists. Big bang and incremental rollout are contrasted in Table 3-1.\n A Pattern for Delivering Value 75\n\nTable 3-1: Comparing Big Bang and Incremental Transition\n Big Bang\n   Incremental\n   All users begin using the product at the same time\n  Users phased onto new product a group at a time\n   Potential high risk if issue found post-launch\n Allows for feedback and refinement if issues found\n Upfront dry run tests to mitigate transition risk\n  Potentially complex to plan and execute, with a lengthy cutover period\n Requires long test phases to mature product\n  The additional expense of parallel running with the legacy system(s)\n It is clear which system is in use\n   Needs clarity over which product is the system of record\n  We have successfully transitioned systems using both big bang and incremental approaches - this is only possible by using the engineering and delivery practices highlighted later in this book.\nStaying out of Trouble\nHaving reviewed and recovered many projects, we have identified several common pitfalls experienced by organisations delivering technology-enabled products. A small subset of these are listed in Table 3-2.", "start_char_idx": 71781, "end_char_idx": 76245, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5ab62190-c751-4103-8fe4-acebb7e1c1cf": {"__data__": {"id_": "5ab62190-c751-4103-8fe4-acebb7e1c1cf", "embedding": null, "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21", "node_type": "4", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "7b8ab6f4cd22076034037208ddad5c4e39dec1170ddfde79e3ef7c946fa0a322", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "82b4acb4-1a6d-4da4-b625-50c0f78f246e", "node_type": "1", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "e39628402f9504c84a3687375ec313cce622df9fbab05cf458823ed2b41694ff", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "afb0623c-4e6e-4795-b073-fdf4af749e3f", "node_type": "1", "metadata": {}, "hash": "cb4eb58893c2f1bce78da7b7ed5d520f93fbec95b58ce379abc8ccf9f7a6628f", "class_name": "RelatedNodeInfo"}}, "text": "Staying out of Trouble\nHaving reviewed and recovered many projects, we have identified several common pitfalls experienced by organisations delivering technology-enabled products. A small subset of these are listed in Table 3-2.\n 76 A Pattern for Delivering Value\n\nTable 3-2: Common Delivery Challenges\n Challenge\n   Remedy\n   Failure to gain sufficient momentum due to lack of clarity and direction\n \u25cb Clearly understood and communicated goals at a macro (product) level and micro (feature) level\n\u25cb Visible and active supporting organisation culture and values to guide team decision making\n   Poor results in terms of quality and progress due to lack of motivated or suitably skilled team\n   \u25cb Recognition that process is no substitute for ability, appropriate use of specialists and generalists\n\u25cb Empowered teams and individuals working towards clear goals\n   Persistent problems due to lack of alignment of delivery and governance models\n  \u25cb For large scale changes use a phased delivery pattern and link this to key governance decisions\n\u25cb Implement lightweight assurance including regular board and design authority meetings\n   Inability to know the position of delivery due to poor information\n  \u25cb A clear set of delivery metrics and KPIs to cover progress and quality against expected objectives\nand trends\n\u25cb Use appropriate tooling to gather data at source and avoid building an industry around reporting\n  Continued overleaf\n A Pattern for Delivering Value 77\n\nTable 3-2 continued: Common Delivery Challenges\n Challenge\n   Remedy\n   Lack of suitable controls due to dogmatic approach to Agile working\n \u25cb Build communities to share experiences and ensure action on feedback (within and outside the team)\n\u25cb Develop lightweight metrics and assurance and maintain focus on organisation goals and governance\n   Insufficient quality in delivered solution due to poor analysis and engineering\n   \u25cb Quality built-in upfront using Agile test techniques rather than trying to add later through quality control\n\u25cb Structured analysis techniques to produce quality requirements with traceability and acceptance criteria\n  No single approach, method or target-operating model addresses\nall scenarios. Delivering technology and business change is difficult. The important thing is to consider each scenario and product within the context of the organisation. For example, unless you are a technology start-up, you rarely get the opportunity to work in a legacy-free environment.\n 78 A Pattern for Delivering Value\n\n The Enterprise Agile Approach\nA Lifecycle for Products\nWe have covered the role of the organisation in operating and changing products. Any organisation will deliver a range of products and services to its customers. Whilst there is some variation, most products follow a similar path in terms of their lifecycle. The Enterprise Agile product lifecycle is illustrated in Figure 3-3.\nFigure 3-3: The Product Lifecycle\nFeasibility Discovery Delivery\nMVP\nTechnology delivery has historically been split into \u2018Build\u2019 and \u2018Run\u2019.\nOur model can, if required, support Projects and Programmes delivering change, with the operation of the resultant product undertaken by technology operations and BAU Teams. Our strong preference, however, is for combined Product Teams undertaking Build and Run activities.\nRather than immediately focusing on these structures it is worth taking a step back and looking more holistically at the product lifecycle.\nA Pattern for Delivering Value 79\n   Idea\nConcept\nProduct\nRetire\n\nAll products require some upfront work to get them to a state where they are sufficiently defined to start building and then have sufficient substance to rollout to some or all users. This is the Minimum Viable Product (MVP).\nOnce the initial version of the product is launched it will continue to evolve to meet growing user needs. These post-launch changes may be small features delivered continuously or, if organisational constraints make it unavoidable, larger features delivered incrementally by a larger change project.\nEventually, the product will be retired. This process can be gradual where users are slowly migrated to a replacement product and all\nor part of the original product remains. It can also be a more abrupt transition when existing services are turned off. This can happen when an outsourced contract comes to an end.\nWithin the product lifecycle are several discrete phases. The early phases prepare the organisation and team for the introduction of a new product. A key focus in these early stages is to set a course and reduce risk whilst retaining Agility. The use of these phases allows the organisation to make investment decisions and informed choices about delivery options, for example, to build or buy technology components.\nThe three phases of Feasibility, Discovery and Delivery act as a \u2018ready, aim, fire\u2019 mechanism to prepare the organisation for the commitment of developing a new product. Each of these phases has several core objectives and should link to a governance process.\n 80 A Pattern for Delivering Value\n\nFeasibility\nThe purpose of the Feasibility phase is to assess how an idea can meet the needs of the user and generate value for the organisation.", "start_char_idx": 76017, "end_char_idx": 81231, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "afb0623c-4e6e-4795-b073-fdf4af749e3f": {"__data__": {"id_": "afb0623c-4e6e-4795-b073-fdf4af749e3f", "embedding": null, "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21", "node_type": "4", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "7b8ab6f4cd22076034037208ddad5c4e39dec1170ddfde79e3ef7c946fa0a322", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "5ab62190-c751-4103-8fe4-acebb7e1c1cf", "node_type": "1", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "f23f248a7f5edf9795bc821174de0eb43507cff7ddca2a0397cdd39ed5bc5d73", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e16f21c2-91e6-435a-a5f6-0b09d50b5ee5", "node_type": "1", "metadata": {}, "hash": "5bce567f10ba88f2b9f560c138add0c940fd9f5832a57cab52cd2a0c9e65ad42", "class_name": "RelatedNodeInfo"}}, "text": "It can also be a more abrupt transition when existing services are turned off. This can happen when an outsourced contract comes to an end.\nWithin the product lifecycle are several discrete phases. The early phases prepare the organisation and team for the introduction of a new product. A key focus in these early stages is to set a course and reduce risk whilst retaining Agility. The use of these phases allows the organisation to make investment decisions and informed choices about delivery options, for example, to build or buy technology components.\nThe three phases of Feasibility, Discovery and Delivery act as a \u2018ready, aim, fire\u2019 mechanism to prepare the organisation for the commitment of developing a new product. Each of these phases has several core objectives and should link to a governance process.\n 80 A Pattern for Delivering Value\n\nFeasibility\nThe purpose of the Feasibility phase is to assess how an idea can meet the needs of the user and generate value for the organisation. This phase takes an idea and translates it into a more concrete concept that can be further explored.\nAt this stage, a small team of specialists will work for a short period to determine if the idea is sufficiently substantive to warrant further effort.\nDiscovery\nIn essence, Discovery is concerned at a high level with validating the problem to be solved, how will it be solved (both solution architecture and delivery approach), and what measures will be put in place to ensure successful delivery, and a refined delivery plan.\nThe aim of a Discovery phase is to de-risk subsequent delivery and hone in on the options for implementation. Discovery will not answer all questions or establish all requirements in detail, but it will establish the scope for an MVP.\nA core Product Team will be formed to undertake Discovery. This process can last anywhere from a few weeks to two months and results in the delivery of prototypes or product mock-ups.\nDelivery\nDuring the Delivery phase, features of the product are incrementally delivered based on a roadmap that captures the value released to the organisation. Beyond launch, the Delivery phase supports and operates the product for the users.\n A Pattern for Delivering Value 81\n\nA cohesive Product Team is required. This team may exist for some time until the product is retired.\nThe key outcomes of each lifecycle phase are summarised in Table 3-3. Table 3-3: Lifecycle Phase Outcomes\n Phase\n   Purpose\n   Outcomes\n   Feasibility\n  \u25cb Understand broad scope of the change, models for delivery and feasibility\n  \u25cb Initial Business Case\n\u25cb Candidate\ntechnology solutions\n\u25cb Resource and vendor model\n   Discovery\n \u25cb Perform sufficient upfront Discovery to build out estimation for MVP delivery\n\u25cb De-risk delivery with PoCs that prove the solution architecture\n \u25cb Team and Organisation\n\u25cb Solution Architecture\n\u25cb Assurance approach\n\u25cb Indicative costs and initial plan\n\u25cb Functional Catalogue\n\u25cb Non-Functional\nRequirements\n\u25cb Scope of Discovery\n\u25cb Risks\n Delivery\n   \u25cb Iteratively build out the solution required to implement the change\n\u25cb Deliver the technical and business change to users through a regular\nrelease pattern\n\u25cb Run the service and support users\n   \u25cb Software artefacts\n\u25cb Business change artefacts\n\u25cb Business value realised\n\u25cb User needs met\n\u25cb Solutions deployed\n\u25cb Support incidents resolved\n   82 A Pattern for Delivering Value\n\nAchieving MVP \u2013 The \u2018No Surprises Endgame\u2019\nAt the enterprise level, getting to a Minimum Viable Product (MVP),\nand therefore delivering tangible value to customers or the business,\nfor many products involves implementing large-scale change. It is in this scenario, where large capital investments have been made, that executives get nervous and look for evidence of predictability in delivery. It is precisely for this reason that the Feasibility-Discovery-Delivery pattern is so important as a technique to de-risk delivery.\nHowever, this should not be confused with traditional \u2018predictive\u2019 lifecycles such as Waterfall. A balance between upfront and deferred Discovery must be struck. Just as important as charting a course during the early phases is evidencing progress in the right direction during Delivery through a process of incremental acceptance.\nFigure 3-4 illustrates how incremental acceptance is achieved by running through all facets of delivery at regular intervals and validating the content and quality of the product at each stage. There are two\nkey parts to this acceptance, firstly that the user needs are being\nmet (functional acceptance) and secondly that the product performs adequately and can be operated effectively (non-functional acceptance).\nThis process of incremental acceptance and the product lifecycle of Enterprise Agile are key ingredients of the \u2018No surprises endgame\u2019 - our delivery objective for any change initiative.", "start_char_idx": 80233, "end_char_idx": 85074, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e16f21c2-91e6-435a-a5f6-0b09d50b5ee5": {"__data__": {"id_": "e16f21c2-91e6-435a-a5f6-0b09d50b5ee5", "embedding": null, "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21", "node_type": "4", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "7b8ab6f4cd22076034037208ddad5c4e39dec1170ddfde79e3ef7c946fa0a322", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "afb0623c-4e6e-4795-b073-fdf4af749e3f", "node_type": "1", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "208038e1413c59e6181b9a148daa1447459e1700523260555f3d7fe5aa7b2a26", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "992e117b-97ec-4a46-9ebe-0abbe431db88", "node_type": "1", "metadata": {}, "hash": "fc4e4a59951add5c957dcbeb3fb5f1a32cdf17fc8ff450534b8d2660543460d3", "class_name": "RelatedNodeInfo"}}, "text": "It is precisely for this reason that the Feasibility-Discovery-Delivery pattern is so important as a technique to de-risk delivery.\nHowever, this should not be confused with traditional \u2018predictive\u2019 lifecycles such as Waterfall. A balance between upfront and deferred Discovery must be struck. Just as important as charting a course during the early phases is evidencing progress in the right direction during Delivery through a process of incremental acceptance.\nFigure 3-4 illustrates how incremental acceptance is achieved by running through all facets of delivery at regular intervals and validating the content and quality of the product at each stage. There are two\nkey parts to this acceptance, firstly that the user needs are being\nmet (functional acceptance) and secondly that the product performs adequately and can be operated effectively (non-functional acceptance).\nThis process of incremental acceptance and the product lifecycle of Enterprise Agile are key ingredients of the \u2018No surprises endgame\u2019 - our delivery objective for any change initiative.\n A Pattern for Delivering Value 83\n\n Figure 3-4: Delivering Business Value\n    0%   S0   5% 20%   S1     25% 40%     S2     60% 60%     S3     70% 80%     S4     85% 100%     S5     100%\n\u2018No Surprises Endgame\u2019\n 84\nA Pattern for Delivering Value\nIterative Non-Functional Acceptance\nSprints\nIterative\nFunction Acceptance\n MVP\n\n Key Points\n1. DevOps and Continuous Delivery techniques enable a unified delivery lifecycle to cover both change and service.\n2. Where possible, change should be released to users regularly and in small chunks.\n3. Introducing large scale change, such as replacing an existing system, requires a risk-reduction pattern to get to an MVP.\n4. Enterprise Agile uses Feasibility, Discovery and Delivery phases to improve predictability in implementing new initiatives.\n5. Delivery should be continuous using an automated pipeline to put change into\nthe hands of users as required and support incremental acceptance.\n A Pattern for Delivering Value 85\n\n 86\n\n Chapter 04\nThe Optimal Team\n\nEffective delivery requires the correct organisation of highly capable people and the appropriate utilisation of their skills. Good teams are not made overnight, and this is a considerable drawback of delivering change in discrete projects. Continuous delivery of change by a Product Team in an Agile organisation overcomes some of these challenges.\nBeing effective also requires that individuals and teams be supported by the culture and values of the organisation. There is a difficult balance to strike between empowering teams to make decisions and being quasi-autonomous, and potentially losing control as people operate outside the legitimate constraints put in place by the wider organisation.\nConcepts\nThe Return of the Full Stack Engineer\nWhen BJSS was established in 1993, it was common for software engineers to perform the full range of tasks required to deliver a system. This often included not only cutting code but writing and executing automated tests, creating build and deployment scripts, and maintaining development and test environments.\nOver the years, the software stack and the array of foundation products, frameworks and tools available to facilitate the production of a system have grown dramatically, leading many practitioners to specialise. For example, larger teams often engage specialists to maintain the build servers and develop deployment scripts.\n 88 The Optimal Team\n\nRecently, the term \u2018Full Stack Engineer\u2019 has become popular. In our view, this term describes what good all-round engineers have always done - have the skill and flexibility to work on all engineering tasks required to deliver a working solution.\n\u2018Polyglot\u2019 has also recently become a fashionable term to describe a developer fluent in multiple programming languages. This too is not a new concept for us. Being skilled in several technologies can be good for the individual\u2019s career and the flexibility of the organisation but should be balanced with a desire for in-depth knowledge in a particular field. Certainly, there are cases where engineering specialism is required, for example, a DBA role. We discuss what makes a good engineer later in this chapter.\nIt is worth saying something about another term we often hear - \u2018DevOps Engineer\u2019. This role description can cause some confusion. DevOps is a cultural and organisational concept rather than a specific engineering discipline. Often what is meant is working with scripting technologies to automate the delivery pipeline. Again, this is a task to which most Full Stack Engineers can turn their hand, although there are cases where a specialist can be useful. We avoid confusion by using the term Platform Engineer when referring to infrastructure delivery.\nSelf-Optimising Organisations\nOne of the barriers to Agility we identified at the start of this book was dealing with real-world constraints and business change. Examples\nof potential challenges here include staff redeployment, training and recruitment.", "start_char_idx": 84009, "end_char_idx": 89059, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "992e117b-97ec-4a46-9ebe-0abbe431db88": {"__data__": {"id_": "992e117b-97ec-4a46-9ebe-0abbe431db88", "embedding": null, "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21", "node_type": "4", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "7b8ab6f4cd22076034037208ddad5c4e39dec1170ddfde79e3ef7c946fa0a322", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e16f21c2-91e6-435a-a5f6-0b09d50b5ee5", "node_type": "1", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "10e305625c131661dc7251697f33a55ab50654feff407ededd106489a08a1c19", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "de7db0e6-fa56-4f54-af35-24594365d7ef", "node_type": "1", "metadata": {}, "hash": "673b12931626fefcf1675f2a06997a277c30e0cfc986b633b9d4d3b5da81bc6b", "class_name": "RelatedNodeInfo"}}, "text": "Certainly, there are cases where engineering specialism is required, for example, a DBA role. We discuss what makes a good engineer later in this chapter.\nIt is worth saying something about another term we often hear - \u2018DevOps Engineer\u2019. This role description can cause some confusion. DevOps is a cultural and organisational concept rather than a specific engineering discipline. Often what is meant is working with scripting technologies to automate the delivery pipeline. Again, this is a task to which most Full Stack Engineers can turn their hand, although there are cases where a specialist can be useful. We avoid confusion by using the term Platform Engineer when referring to infrastructure delivery.\nSelf-Optimising Organisations\nOne of the barriers to Agility we identified at the start of this book was dealing with real-world constraints and business change. Examples\nof potential challenges here include staff redeployment, training and recruitment. Some thinking is emerging as to how some of these issues may be overcome and how to apply Agile principles to organisation design and business change.\nOne such example of this is Holacracy, a management system devised by Brian Robertson. It replaces hierarchy and large organisational change\n The Optimal Team 89\n\nwith a flat management structure and distributed authority. Whilst in its infancy, Holacracy is gaining some ground and demonstrates the desire amongst a variety of organisations to gain competitive advantage through a more flexible and rapidly changing structure and empowering people to take control of their work and challenges.\nBJSS Opinion Ability-Led versus Process-Led\nSuccessful change initiatives are ability-led not process-led. Many organisations mistakenly rely upon process to drive a quality outcome, particularly at scale. Whilst process is important, having empowered, capable individuals in key roles is essential to enabling rapid change and innovation.\nCommoditising or de-skilling technology delivery with excessive process is fraught with issues. We prefer to build teams from highly capable individuals with a mix of experience levels and a shared appetite for delivery success.\nThe Agile Manifesto reinforces this message by favouring People and Interactions over Processes and Tools. It should be noted that, as with all tenets of the Agile Manifesto, this is a preferred bias rather than an extreme position. Product Teams need to operate within the constraints of the organisation and maintain a regular, healthy, connected dialogue.\nCountering the perception of Agile as a \u2018Developer playground\u2019 requires that the organisation properly aligns teams to goals and implements the \u2018Necessary and Sufficient\u2019 lightweight governance in preference to a return to command-and-control management.\n 90 The Optimal Team\n\nA Supportive Culture and Values System\nProduct Teams must be appropriately supported by the organisation to operate effectively. The organisation\u2019s culture and values exist to guide teams in their daily work, particularly when conflict arises, or difficult decisions are required.\nA healthy organisation will keep the conversation alive through\nregular engagement with teams and individuals. Note that, in many organisations, Product Teams comprise permanent employees, contingent labour and multiple suppliers. This presents a challenge that should not be overlooked. We strongly recommend that orientation and, where necessary, adjustments to team values are made when people are added to the team.\nAll individuals should contribute to, identify with, and sign up to\nthe values of their team and the wider organisation. This simple but powerful act helps everyone move forward together. It must be clear that this is not about rigid command and control, but an evolving set of guiding principles to aid and support teams.\n The Optimal Team 91\n\nCreating Productive Teams\nWe are often engaged in helping organisations to initiate new projects and programmes in which teams comprise people who have never worked together. This is one of the key reasons why projects as a vehicle for delivering change can be inefficient. It is essential to consider, particularly in the Leadership Team, the characteristics of the individuals concerned. We shouldn\u2019t think of people the way we think of personal computers or desks, as interchangeable components that can be re-deployed with minimal disruption. Teams and the people within them have unique characteristics that need to be considered in the formation and ongoing operation of the team.\nVarious theories have been offered to describe the dynamics of a team and how a group develops. Most commonly quoted is Bruce Tuckman, who initially identified four phases of group development: Forming, Storming, Norming, Performing. This was later updated to describe a fifth phase, Adjourning.\nOther similar models have been proposed, such as Tubbs\u2019 System Model (Orientation, Conflict, Consensus, Closure) and Fisher\u2019s theory of decision emergence (Orientation, Conflict, Emergence, Reinforcement).\nThese models can be useful to describe the evolution of a team and how they tackle problems. It is worth taking this into account when planning and considering the productivity of the team.", "start_char_idx": 88096, "end_char_idx": 93335, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "de7db0e6-fa56-4f54-af35-24594365d7ef": {"__data__": {"id_": "de7db0e6-fa56-4f54-af35-24594365d7ef", "embedding": null, "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21", "node_type": "4", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "7b8ab6f4cd22076034037208ddad5c4e39dec1170ddfde79e3ef7c946fa0a322", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "992e117b-97ec-4a46-9ebe-0abbe431db88", "node_type": "1", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "01755bc8425de1f695d35f766f9b0f722d831470a2b7dca251272bcb3edb1e8a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3068c505-71a2-410f-8141-738d5a1a1bf5", "node_type": "1", "metadata": {}, "hash": "1df6e4bc6bc3bfe8901fd8feeb4ac3ba6a84a7576dabd380b17744916d1d7a50", "class_name": "RelatedNodeInfo"}}, "text": "We shouldn\u2019t think of people the way we think of personal computers or desks, as interchangeable components that can be re-deployed with minimal disruption. Teams and the people within them have unique characteristics that need to be considered in the formation and ongoing operation of the team.\nVarious theories have been offered to describe the dynamics of a team and how a group develops. Most commonly quoted is Bruce Tuckman, who initially identified four phases of group development: Forming, Storming, Norming, Performing. This was later updated to describe a fifth phase, Adjourning.\nOther similar models have been proposed, such as Tubbs\u2019 System Model (Orientation, Conflict, Consensus, Closure) and Fisher\u2019s theory of decision emergence (Orientation, Conflict, Emergence, Reinforcement).\nThese models can be useful to describe the evolution of a team and how they tackle problems. It is worth taking this into account when planning and considering the productivity of the team.\n 92 The Optimal Team\n\n Figure 4-1: Tuckman\u2019s Stages of Group Development\nForming\nWorking Group\nStorming\nPseudo Team\nNorming\nPotential Team\nPerforming\nReal Team\nTeam Effectiveness\nA key contributor to a productive team is clarity of goals and required outcomes. We passionately believe in keeping teams engaged and aware of the bigger picture. Team communication begins with Agile events such as the daily Stand-up, which keeps the team aligned in terms of challenges and the work of their peers.\nWider team communication should also be encouraged. This will\ninclude community gatherings for individuals interested in particular disciplines, for example, test automation or user-centred design. We also recommend that the entire Product Team is gathered together periodically for a full \u2018Town Hall\u2019 meeting. This should happen even if the team is large to re-assert objectives and allow Q&A.\nSocial functions are also a key part of getting a team to gel and operate effectively. The Leadership Team can often be buried in delivery challenges and forget this essential ingredient for productivity. The organisation of social functions is best left to someone in the team - they are often likely to have better ideas and be more enthusiastic about this aspect than the Management Team.\nThe Optimal Team 93\nAdjourning\nHigh Performing Team\n       Performance Impact\n\nConsiderations for a Productive Environment\nThe physical environment can have a considerable impact on team performance. Organisations require spaces that support different working methods. It must be possible to work quietly and concentrate on technical tasks. In addition, the environment must allow teams to collaborate and work together. This support should go beyond traditional meeting spaces. Allowing for osmotic communication and quick informal problem-solving as a team or pairing around particular problems helps keep teams productive and the work flowing.\nHaworth\u2019s model for organisational space design reaffirms the relationship between environment and culture is defined as Control (hierarchy); Compete (Market); Collaborate (Clan) and Create (adhocracy). The Values Framework can be a helpful tool for assessing and motivating desirable behaviours through environmental adjustments.\nPeople often ask us about the importance of co-location to delivery, particularly following the Covid-19 pandemic, which forced many of us to challenge our preconceptions regarding the effectiveness of remote teams. In the wake of the pandemic, the option to co-locate was suddenly removed. Many teams had to adapt their ways of working to comply with the restrictions imposed.\nThis sudden shift to remote working generated numerous benefits for individuals. People gained their time back from not having to commute to the office. They were able to spend more time with family and developed new ways of working and communicating through tools such as Zoom. While remote working has benefits, some colleagues struggled to adapt, stating that they missed in-person interactions in the office or had impractical workspaces at home, such as those in shared accommodation.", "start_char_idx": 92347, "end_char_idx": 96464, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3068c505-71a2-410f-8141-738d5a1a1bf5": {"__data__": {"id_": "3068c505-71a2-410f-8141-738d5a1a1bf5", "embedding": null, "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21", "node_type": "4", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "7b8ab6f4cd22076034037208ddad5c4e39dec1170ddfde79e3ef7c946fa0a322", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "de7db0e6-fa56-4f54-af35-24594365d7ef", "node_type": "1", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "d0d02da8ac2b1b31fda7694c3add76c8413f520c0efa0a58e56feb0591fc1fbf", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "943f04db-d844-41a0-aeac-e30ba4f8f20b", "node_type": "1", "metadata": {}, "hash": "e36095c09bcdc85ec1f42c8d4d853f13374bc9a733bb7a86a5a68f516fe7a60b", "class_name": "RelatedNodeInfo"}}, "text": "The Values Framework can be a helpful tool for assessing and motivating desirable behaviours through environmental adjustments.\nPeople often ask us about the importance of co-location to delivery, particularly following the Covid-19 pandemic, which forced many of us to challenge our preconceptions regarding the effectiveness of remote teams. In the wake of the pandemic, the option to co-locate was suddenly removed. Many teams had to adapt their ways of working to comply with the restrictions imposed.\nThis sudden shift to remote working generated numerous benefits for individuals. People gained their time back from not having to commute to the office. They were able to spend more time with family and developed new ways of working and communicating through tools such as Zoom. While remote working has benefits, some colleagues struggled to adapt, stating that they missed in-person interactions in the office or had impractical workspaces at home, such as those in shared accommodation.\n 94 The Optimal Team\n\n  F l e\ns e d\nm e n t\nS h o r t\n  v e l o p\n- t e r m\nr m D e\nP e r f\nn g - t e\no r m a n\nL o\nc e\na\nl\ne r n\nI\nn\nt\ne\nr\nn\n  a\nl\nE x t\nr\no\nu\ng\nh\nI\nn\nc\nr\ne\ne\na\nk\nt\nh\nm\ne\nn\nt\nB\nr\na\nl\ne\nF\n Figure 4-2: Competing Values Framework\nThe Optimal Team\n95\nCOLLABORATE (Clan)\ndo things together\nCONTROL (Hierachy)\ndo things right\nCREATE (Adhocracy)\ndo things first\nCOMPETE (Market)\ndo things fast\no\nc\nu\nxi\nb\nl\n\nAs the pandemic began to subside and restrictions were lifted, some organisations continued working in a remote-first model. Others gradually reverted to office-based work and some, including ourselves, transitioned to a \u2018hybrid\u2019 (or \u2018blended\u2019) working model.\nFor those organisations continuing to work remotely, our advice is to, as much as possible, mimic the conditions of a co-located office environment. For example, the efficiency of frequent face-to-face communication is invaluable, even if it\u2019s over video conferencing.\nWe have had much success operating in a hybrid model where\nour employees split their time between working in the office and working remotely. By working in this way, we\u2019ve seen increased people availability, accelerated ramp-up, greater diversity in opinions and shared accountability for work across organisational boundaries.\nSuccessful hybrid working patterns depend on an equal balance between office and remote work. We often hear of organisations neglecting in-person face-to-face interactions, which can negatively impact delivery.\nFrom our experience, in-person interactions and meetings still play a crucial role in helping us achieve better project outcomes and solve problems more effectively. They also help individuals form relationships with new team members, particularly in the early \u2018forming\u2019 stages. There is no better way to develop inter-team relationships than socialising face-to-face.\n 96 The Optimal Team\n\nThe Enterprise Agile Approach\nA Brief Guide to Organisation and Teams\nTo navigate the people and organisational aspects of Enterprise Agile, a brief overview of key concepts is provided here.\nFirst, let us consider the building blocks of the delivery organisation:\n\u25cb Individuals performing specific tasks relating to change and service delivery - we promote the notion of \u2018T-shaped\u2019 individuals\n\u25cb Delivery and Service Teams, which are highly cohesive teams of individuals working toward common goals\n\u25cb The Product Team, which consists of one or more teams and a leadership function.\nThese elements create a scalable method for organising people to\nbuild, maintain and enhance products. An effective leadership function, comprising Product Ownership, Delivery Management, Solution Architecture and Service Design Leadership, is at the heart of the successful Product Team. We will now explore each of these concepts in more detail.\nThe Product Team\nThe Agile organisation comprises several building blocks aligned to our hierarchy of concerns. Certain roles are fulfilled at an organisation level, at a product level and within Engineering and Business Change Teams. The broad picture of the Product Team and the relationships they have is shown in Figure 4-3.\n The Optimal Team 97\n\nAt the heart of any Product Team are the four key roles of Product Owner, Delivery Manager, Solution Architect and Service Design Lead. These key positions decide what changes are made to the product and how the ongoing service will be delivered.\nThis nucleus of the Product Team has the responsibility for managing the Delivery and Service Teams and the relationship with user groups and stakeholders. The remainder of the Product Team is responsible for delivering change and supporting the product.", "start_char_idx": 95469, "end_char_idx": 100125, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "943f04db-d844-41a0-aeac-e30ba4f8f20b": {"__data__": {"id_": "943f04db-d844-41a0-aeac-e30ba4f8f20b", "embedding": null, "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21", "node_type": "4", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "7b8ab6f4cd22076034037208ddad5c4e39dec1170ddfde79e3ef7c946fa0a322", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3068c505-71a2-410f-8141-738d5a1a1bf5", "node_type": "1", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "ed2f1b936b8180daef654bb9a772d90a4b6bdb4b3a407a20e42bb4882993ec03", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b9faadd7-14c0-44d6-8c7d-2fec94f1714e", "node_type": "1", "metadata": {}, "hash": "022afb95923e7a17eacb94addd2a9be0b388e86c66a2ac19bbd4fa97db0d3835", "class_name": "RelatedNodeInfo"}}, "text": "We will now explore each of these concepts in more detail.\nThe Product Team\nThe Agile organisation comprises several building blocks aligned to our hierarchy of concerns. Certain roles are fulfilled at an organisation level, at a product level and within Engineering and Business Change Teams. The broad picture of the Product Team and the relationships they have is shown in Figure 4-3.\n The Optimal Team 97\n\nAt the heart of any Product Team are the four key roles of Product Owner, Delivery Manager, Solution Architect and Service Design Lead. These key positions decide what changes are made to the product and how the ongoing service will be delivered.\nThis nucleus of the Product Team has the responsibility for managing the Delivery and Service Teams and the relationship with user groups and stakeholders. The remainder of the Product Team is responsible for delivering change and supporting the product.\nThe Product Team will work closely with the Design Team that may comprise Service Designers, Visual Designers, Content Producers and Analysts. The Design Team investigates and interprets pertinent information to design the optimum product or service. This process establishes a framework for the Product Manager to own.\nThe size and specialisms of a Design Team will depend on the complexity of the overall experience - i.e., how difficult will it be to motivate desired behaviours, and how challenging or numerous are\nthe business processes and customer touchpoints to achieve those behaviours. For particularly complex projects demanding organisational restructure or multi-faceted orchestration and oversight, a Service Designer may form part of the core Product Team.\n 98 The Optimal Team\n\n   E x e\ne r\nn a\n  i e s\ne h\nm e\nt e r n a a l i s t T\n y B o d t a k\nn t\nl U s e e a m s\no l d\ng e\nI n S p e c i\nl a t o r\nS\nr C o\nR e g u\nm m u n\n  D\nT e a m s\ne\nl\ni\nv\ne\nr\ny\n h a n g e\n  T\ne\na\nm\ns\nE\nx\nt\ne\nr\nn e s s C\ni t y\ne\nr\ns\nn\na\nl\nU\nB u s i\nu\np\np\nl\ni\nn\nt\ns\ne\nr\nC\n  S\nm\ne\nD\ne\nl\no\nm\nm\nS\ne\nr\nv\ni\nc\ng\ne\ni\nv\ne\nu\nn\ni\nt\ny\ne\nT\ne\na\nm\nn\na\nr\ny\ns\n Figure 4-3: Product Team Structure\nThe Optimal Team\n99\ncu\nt\ni\nv\ne\nM\na\nProduct Owner Delivery Manager Solution Architect Service Design Lead\nM\na\n\nThe basic building block is the \u2018T-shaped\u2019 technologist. These individuals are assembled into cohesive Delivery Teams, with potentially multiple teams for a particular product.\nMost Engineering Teams will be multi-disciplinary and charged with delivering end-to-end features that meet user needs and add value\nto the organisation. General-purpose Feature Delivery Teams may\nbe supported by specialist Engineering Teams. For example, a non-functional Test Team providing assurance of the complete integrated product against the non-functional requirements for the solution. Care should be taken to avoid these specialist teams becoming single point dependencies such that they are bottlenecks to the overall delivery of the product. In these instances, the specialisms should be integrated into the Delivery Teams so that these teams may continue\nto be autonomous. This may be achieved by restructuring the team, through a formal education programme, or via shadowing.\nIn addition to Engineering Teams, Service Teams will be required to deal with customer service enquiries and support the usage of the product by the organisation and external users.\nIn the Agile organisation, there are also likely to be Business Change Teams that update manual processes and execute organisational change.\nThe Shape of the Individual\nWe expect teams to include a diverse range of people. The Product Team will comprise technologists, domain specialist and managers, in a coherent unit organised for effective delivery. Most technologists have some kind of specialism - development, testing, analysis, database design, etc.\n 100 The Optimal Team\n\n A common question is to what extent specialists should be used within technology delivery rather than generalists. Achieving the benefits of Agility requires a team of people with diverse skills working together towards a common goal. However, too much specialisation risks creating silos, inefficiencies and key person dependencies that are hard to overcome.", "start_char_idx": 99214, "end_char_idx": 103398, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b9faadd7-14c0-44d6-8c7d-2fec94f1714e": {"__data__": {"id_": "b9faadd7-14c0-44d6-8c7d-2fec94f1714e", "embedding": null, "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21", "node_type": "4", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "7b8ab6f4cd22076034037208ddad5c4e39dec1170ddfde79e3ef7c946fa0a322", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "943f04db-d844-41a0-aeac-e30ba4f8f20b", "node_type": "1", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "436c6c16dd897d699c38b7589605bbabe442a807b4ec090ed6baa24fc6ed04a9", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0e07597f-51cd-436d-8c10-469e4d21ca03", "node_type": "1", "metadata": {}, "hash": "6016fdbb11cdfb576032945a78d376e50b89bdb07a59ca1dbf4765f2a8a56b1c", "class_name": "RelatedNodeInfo"}}, "text": "In addition to Engineering Teams, Service Teams will be required to deal with customer service enquiries and support the usage of the product by the organisation and external users.\nIn the Agile organisation, there are also likely to be Business Change Teams that update manual processes and execute organisational change.\nThe Shape of the Individual\nWe expect teams to include a diverse range of people. The Product Team will comprise technologists, domain specialist and managers, in a coherent unit organised for effective delivery. Most technologists have some kind of specialism - development, testing, analysis, database design, etc.\n 100 The Optimal Team\n\n A common question is to what extent specialists should be used within technology delivery rather than generalists. Achieving the benefits of Agility requires a team of people with diverse skills working together towards a common goal. However, too much specialisation risks creating silos, inefficiencies and key person dependencies that are hard to overcome. For technology personnel, we always look for \u2018T-shaped\u2019 individuals, as illustrated in Figure 4-4.\nFigure 4-4: \u2018T-shaped\u2019 Technologists\nDelivery Capability\nEngineering Mindset, Motivation\n  Technical Specialism e.g. Test Automation\n The Optimal Team 101\n\nAt their core, everyone on the team has a passion for delivery, a solid understanding of Agile principles, and a good engineering and problem-solving mindset. This core is supported by specialist technology skills, perhaps in test automation tools or software-defined infrastructure.\nStrong technologists should always be able to learn the next test tool or programming language. When hiring into teams it is important to focus on the core attributes of the individual rather than hiring only for specific technologies.\nThese same specialised-generalist principles are also applied to managerial personnel. All managers are expected to have a strong knowledge of Agile and project and service management principles. In Enterprise Agile, managers are expected to support delivery, not just report on it. It is also likely that managers will have a specialism in the same way that \u2018T-shaped\u2019 technologists do. For managers, this may be expertise in infrastructure delivery or test management; for Service Design professionals this could be research or information design\nand architecture.\nThe Key Delivery Roles\nCertain key roles must be filled for teams to successfully build and run the product. Depending on the scale of the organisation and product, not all roles will map to different individuals. Some roles are also quite broad and in larger organisations will be split across several people.\nAs we have already discussed, the organisation has a role to play in setting certain boundaries and constraints for Product Teams as well as providing support and guidance.\n 102 The Optimal Team\n\nTable 4-1: Key Organisational-Level Roles\n Role\n   Responsibilities\n   Product Sponsor\n  \u25cb Provides funding\n\u25cb Governance oversight\n   Enterprise Architect\n  \u25cb Guides on architectural standards and supports their adoption\n\u25cb Architectural governance oversight\n  The Product Team requires effective leadership and roles in this\nspace are pivotal. Table 4-2 outlines the key roles involved in leading the Product Team. The emphasis here is on leadership rather than management. The Leadership Team charts a course for the product and empowers the Delivery and Support Teams to do their daily work.\nTable 4-2: Product Leadership Roles\n Role\n   Responsibilities\n   Product Owner\n \u25cb Serves as the voice of the customer\n\u25cb Aligns Product Roadmap to strategic goals\n\u25cb Develops scope and defines backlog items to guide the Agile software development team\n\u25cb Develops detailed specifications for product features so they are understood by development teams\n Delivery Manager\n   \u25cb Plans and coordinates business and technical change\n\u25cb Manages change and service\n\u25cb Ensuring delivery meets business objectives\n Continued overleaf\n The Optimal Team 103\n\nTable 4-2 continued: Product Leadership Roles\n Role\n   Responsibilities\n   Solution Architect\n  \u25cb Owns the big picture of the solution\n\u25cb Supports the adoption of architectural standards\n\u25cb Manages the technical governance process\n   Service Design Lead\n  \u25cb Understands the business domain and user insights\n\u25cb Owns the Product Roadmap\n\u25cb Leads the service design activities\n\u25cb Accountable for maximising the value of the product delivered by the Product Team\n The teams of technologists, domain specialists and customer support analysts deliver the real work of implementing and supporting change. The key roles within those teams are listed in Table 4-3.", "start_char_idx": 102375, "end_char_idx": 107036, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0e07597f-51cd-436d-8c10-469e4d21ca03": {"__data__": {"id_": "0e07597f-51cd-436d-8c10-469e4d21ca03", "embedding": null, "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21", "node_type": "4", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "7b8ab6f4cd22076034037208ddad5c4e39dec1170ddfde79e3ef7c946fa0a322", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b9faadd7-14c0-44d6-8c7d-2fec94f1714e", "node_type": "1", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "5fb729d31f7ab0b488de521be4ef640aa0b7b9634d4b35ac84d29e5502f0be17", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1211d1d1-9ac3-425a-a771-32e07b00d24e", "node_type": "1", "metadata": {}, "hash": "9d29f2871f5bce4efb2cc678634f6ab8c8444ca3e9134a1a85b7bb5d43acac8b", "class_name": "RelatedNodeInfo"}}, "text": "The key roles within those teams are listed in Table 4-3.\nTable 4-3: Team Roles\n Role\n   Responsibilities\n   Team Lead\n  \u25cb Guides the work of the team\n\u25cb Removes blockers and escalates issues\n   Service Designer\n  \u25cb Defines the optimum approach or solution to meet business and audience goals\n\u25cb Considers interactions across all channels and touchpoints\n\u25cb Provides research skills\n  Continued overleaf\n 104 The Optimal Team\n\nTable 4-3 continued: Team Roles\n Role\n   Responsibilities\n   Technical Lead\n  \u25cb Coaches and mentors technologists\n\u25cb Accountable for technical design; implements key frameworks\n   User Experience Lead\n \u25cb Establishes principles supporting ideal experience\n\u25cb Recommends solutions and features through testing with end users\n Analyst\n  \u25cb Organises user needs\n\u25cb Aligns delivery to outcomes\n Digital Analyst\n   \u25cb Tracks metrics relevant to Key Performance Indicators\n\u25cb Analyses and reports on key data\n   User Researcher\n \u25cb Designs research using a variety of methods, from observation, interviews and usability testing, to surveys, focus groups and analytics\n\u25cb Identifies themes from a variety of data sets to uncover insights and make evidence-based decisions\n Designer\n  \u25cb Defines the structure and visual style of a solution\n\u25cb Sets UI rules for technologists to implement\n Content Producer\n   \u25cb Creates copy, imagery, videos or any other type of content required for the solution\n   Developer\n  \u25cb Implements technical change\n\u25cb Maintains the delivery pipeline\n   Tester\n  \u25cb Develops approaches to build in quality\n\u25cb Creates and executes test packs\n  Continued overleaf\n The Optimal Team 105\n\nTable 4-3 continued: Team Roles\n Role\n   Responsibilities\n   Platform Engineer\n \u25cb Maintains and improves infrastructure automation, CI environment and application release\n Release Engineer\n   \u25cb Defines the necessary steps needed to release software\n   Support Analyst\n \u25cb Receives and triages support incidents\n\u25cb Works with the team on problem management\n Release Analyst\n   \u25cb Manages, plans, schedules and controls software builds\n  As we discussed earlier in this chapter, the concept of the \u2018T-shaped\u2019 Engineer is nothing new. Typically, it specifies a broad range of capabilities combined with in-depth knowledge of at least one technical discipline. This is particularly applicable for the Platform Engineer. The engineering role has evolved from the requirement for expertise in a single subject matter, such as networking, to an understanding of the entire infrastructure stack delivered as software-defined Cloud services. This has led to the breakdown of boundaries between Infrastructure Architecture, Infrastructure Design and Infrastructure Deployment,\nwith the Platform Engineer requiring an understanding of the entire solution rather than a single subject. In addition, the introduction of Infrastructure as Code necessitates an understanding of software development techniques and automation.\n 106 The Optimal Team\n\nAgile Software Engineering has historically been delineated alongside Development, Test, and Platform Engineering roles. With the introduction of Infrastructure as Code, these disciplines have moved closer together and share many principles. In each case, the engineering requires in-depth discipline and specific knowledge (such as Java, Selenium, Terraform/AWS), and shares many aspects:\n\u25cb A shared codebase\n\u25cb The requirement for code quality (including code reviews)\n\u25cb Consistent change control processes.\nThere are several organisational benefits to be realised:\n1. Cross-training between roles becomes easier, providing career flexibility\n2. Project resourcing challenges can be overcome with multi-discipline engineers\n3. Improved quality and velocity through consistent approach across disciplines.\n The Optimal Team 107\n\nFocused Delivery Teams\nThe building block of the organisation for delivering technology change is the Delivery Team. These teams are deliberately constructed cohesive units working collaboratively towards common goals. There isn\u2019t a universally applicable formula for the type and number of individuals in the team, but there are some reasonable guidelines. Typically, we expect to see Delivery Teams configured such that:\n1. One individual can ably support the team - this implies an optimal team size of about 6-10\n2. It includes all the skills required to deliver an increment of valuable change\n3. All are focused on a common goal \u2013 delivery of specified features.\nIrrespective of the method, all technology delivery comprises activities to analyse, develop, test, build and deploy. All of these activities need to be covered by the individuals within the team. By working together on the goal of delivering a feature to the user, these teams avoid the creation of the traditional silo mentality that has historically existed between functions such as Development and Test.", "start_char_idx": 106979, "end_char_idx": 111829, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1211d1d1-9ac3-425a-a771-32e07b00d24e": {"__data__": {"id_": "1211d1d1-9ac3-425a-a771-32e07b00d24e", "embedding": null, "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21", "node_type": "4", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "7b8ab6f4cd22076034037208ddad5c4e39dec1170ddfde79e3ef7c946fa0a322", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0e07597f-51cd-436d-8c10-469e4d21ca03", "node_type": "1", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "c349173278aaef68f1b606e12eb4b88a7ee8383bae6f3445e66459f24571999e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a620f1ff-aa2d-43ef-bb5a-15c53041a2b9", "node_type": "1", "metadata": {}, "hash": "2b8865119c54c797d084be5e505425a755bf2713968c60391e309c1afb811ccd", "class_name": "RelatedNodeInfo"}}, "text": "These teams are deliberately constructed cohesive units working collaboratively towards common goals. There isn\u2019t a universally applicable formula for the type and number of individuals in the team, but there are some reasonable guidelines. Typically, we expect to see Delivery Teams configured such that:\n1. One individual can ably support the team - this implies an optimal team size of about 6-10\n2. It includes all the skills required to deliver an increment of valuable change\n3. All are focused on a common goal \u2013 delivery of specified features.\nIrrespective of the method, all technology delivery comprises activities to analyse, develop, test, build and deploy. All of these activities need to be covered by the individuals within the team. By working together on the goal of delivering a feature to the user, these teams avoid the creation of the traditional silo mentality that has historically existed between functions such as Development and Test.\n 108 The Optimal Team\n\n  Figure 4-5: Example Delivery Team Structure\n   Developer\nAnalyst\nDeveloper\n    Tester Team Lead\nDeveloper\nTechnology Lead\nTester\n   Platform Engineer\nDeveloper\nFigure 4-5 provides an example of a technology Delivery Team with\nall the elements required to design, construct and deliver a solution to the user.\n The Optimal Team 109\n\nResponsive Service Teams\nAs products increase in scale, it may be necessary to complement the Delivery Teams in the Product Team with Service Teams that operate the product and respond to user queries. Each team may contain a\nmix of people specialising in dealing with users and resolving incidents. Where a defect or insight is found, the Service Team passes it to the Delivery Teams for resolution or enhancement. This proactive approach uncovers new opportunities for product improvement. In traditional IT support terms, Service Teams undertake first and second line support, and Delivery Teams undertake third line support. Service Teams should include service agents who deal with customers and diagnose basic issues together with more technical people who may use tools provided by the Delivery Teams, or the underlying platform, to fix incidents.\nAs the Product Team scales further, Service Teams may focus on particular groups of users or parts of the system. As with Delivery Teams, all the members of Service Teams are focused on a common goal \u2013 providing a great service for users.\nEffective Team Leadership\nGetting the right people to lead teams is pivotal to success. There are two aspects to this which may or may not be filled by one person. Firstly, a strong lead is required to prioritise the activities of the team, track progress towards goals, raise issues and remove blockers that impede delivery.\nThe second side to leadership is more technically biased, taking a lead on design, mentoring the team and upholding the constraints and standards set by the broader organisation. Often the best technologist in the team is not the right person to perform the former of these roles but may be suited to the latter.\n 110 The Optimal Team\n\nOrganising Change Across Delivery Teams\nWhen multiple Delivery Teams are engaged in delivering a product, a decision is required as to how to divide work between them. There are two schools of thought:\n1. The teams could have an affinity with components or parts of the system\nor\n2. The teams could be organised around cohesive end-to-end features that cut across potential technology or component boundaries.\nThere isn\u2019t a definitive answer, although we have a strong preference for feature teams rather than component teams. We often change from one type of team to the other during a project, starting with component teams then moving to feature teams later when the basic structure is in place. There are advantages and disadvantages to each approach, as outlined in Table 4-4.\n The Optimal Team 111\n\nTable 4-4: Team Affinity\n Feature Teams\n   Component Teams\n   Focused on end-to-end delivery and the common goal of creating business value\n Easier to allocate work across feature dependencies\n   Clear responsibility for fixing issues, avoids defects being thrown \u2018over the wall\u2019\n  Allows specialist teams to work on specialist technologies\n Ensures continuous and regular integration across components\n   Enables multi-speed delivery across different systems\n   Creates greater awareness of the full technology stack across the team\n  May more efficiently facilitate sharing of components across multiple\nProduct Teams\n  A key thing to remember is that success requires alignment of delivery model, team organisation, architecture and vendor management. If you engage multiple suppliers and they are providing expertise for specific elements of the technology stack, feature teams may not be the answer.\nReal-world constraints often mean a hybrid model is used in many organisations. For example, the software vendor may maintain the back-office operational fulfilment package, while cohesive feature teams maintain multi-channel customer engagement systems. It is also possible for the position to move with time as the early stages of delivering a new product require focused work on frameworks.", "start_char_idx": 110869, "end_char_idx": 116046, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a620f1ff-aa2d-43ef-bb5a-15c53041a2b9": {"__data__": {"id_": "a620f1ff-aa2d-43ef-bb5a-15c53041a2b9", "embedding": null, "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21", "node_type": "4", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "7b8ab6f4cd22076034037208ddad5c4e39dec1170ddfde79e3ef7c946fa0a322", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1211d1d1-9ac3-425a-a771-32e07b00d24e", "node_type": "1", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "6412189ad747c6c11ac89e5d1bd194cc1c61fc01026b8dbf7cb9cb43b0334316", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e60f7546-83e2-4a80-9a48-56b3bff04242", "node_type": "1", "metadata": {}, "hash": "bd9aea8094a67bc69604ddf684855a9fa5cf1caef6840586ff4051759f37d75e", "class_name": "RelatedNodeInfo"}}, "text": "If you engage multiple suppliers and they are providing expertise for specific elements of the technology stack, feature teams may not be the answer.\nReal-world constraints often mean a hybrid model is used in many organisations. For example, the software vendor may maintain the back-office operational fulfilment package, while cohesive feature teams maintain multi-channel customer engagement systems. It is also possible for the position to move with time as the early stages of delivering a new product require focused work on frameworks.\n 112 The Optimal Team\n\nIn our experience, wherever there are hand-offs required between teams to secure end-to-end delivery, a level of coordination is required of each of the teams involved. Whilst this coordination may be achievable, it will inevitably create an overhead for each team and may require additional time and people for the delivery.\nScaling the Model\nWhen the overall Product Team becomes larger than around five Delivery and Service Teams, it is probably time to think about how to adapt the structure. Traditional thinking would suggest creating a hierarchy and an additional layer of management. To an extent, there is no avoiding some form of organisational structure to coordinate across the growing team, but any structure should be lightweight and pass the Enterprise Agile \u2018Necessary and Sufficient\u2019 test.\nSeveral models have been offered by organisations employing large-scale Agile delivery techniques. Some organisations employ terminology such as Individuals or Teams to describe groupings\nof teams. In Enterprise Agile, we adopt the more straightforward nomenclature of Streams and Teams to describe bigger team structures and organisational containers.\nA key driver in our thinking about larger teams is the balance between empowering people to take ownership of their work and quality of delivery, and the organisation\u2019s need for some consistency of approach and easily digestible information on status and progress. A key to success in larger teams is effective communication. Structured\nand formal channels should be supported by informal ad-hoc communications, enabled by the working environment and suitable technical and collaboration tools.\n The Optimal Team 113\n\nIn Enterprise Agile, several key constructs help support the growing team:\n\u25cb Stream - A group of teams working on related functionality or components of the system\n\u25cb Capability - A logical grouping of team members undertaking the same job function\n\u25cb Community - A group of people with similar interests looking to promote improvements in a particular area.\nFocused Streams of Activity\nAs the number of individual teams grows, they may require some logical grouping and additional coordination. For this purpose, we use the\nterm \u2018Stream\u2019 to describe a collection of related teams. Teams may be grouped by function such as Delivery, Service and Business Change, by functional area or by technical component. There are clear advantages to each, but our preference is for functional area first and technical component second. We are keen to avoid silos and promote the concept of tightly bound teams working toward common goals based on delivering customer value. To be successful, the organisation of Streams should align with the technical architecture and any supplier model\nand incentives.\nWhen there are several Streams each with many teams, it may be necessary to replicate the Product Leadership function across each Stream. This ensures that there is sufficient delivery management, solution architecture and product management bandwidth to coordinate and lead the work of the team as illustrated in Figure 4-6.\n 114 The Optimal Team\n\n   d e r\nn a\no l\ng e\nk e h\nm e\nt a\nn t\nS\n e\nn\nt\nD\ne\nm\ne\nl\ni\nv\nn\na\ng\ne\nr\ny\n                  Figure 4-6: Multiple Streams\nProduct Leadership\nM\na\nProduct Owner Delivery Manager Solution Architect Service Design Lead\nM\na\nStream A\nStream B\nStream C\nThe Optimal Team\n115\nStream Leadership\nStream Leadership\n\n  Leading Consistency Through Capabilities\nWhen multiple teams exist, it is useful to lead the work of the same job function across these teams. For example, a test capability may exist to group together the Testers across several teams and share best practice, ways of working and tools. A Test Lead may span the teams and provide guidance, support, best practice on working methods, and a lightweight governance function.\nThis secondary alignment of the individual to a Capability, in addition\nto the primary role of delivering as part of the team, provides a useful structure to support people in their daily work. The use of Capabilities is illustrated in Figure 4-7.\nFigure 4-7: Capability Leadership\nLead BA\nLead Developer\nLead Tester\nBA Capability\nDeveloper Capability\nTest Capability\nTeam C\n                Team A\nTeam B\n 116\nThe Optimal Team\n\nBuilding Communities for Continuous Improvement\nIf, as we suggest, technologists are located within Delivery Teams tied to products, then we hope that their primary affinity is to the product.", "start_char_idx": 115503, "end_char_idx": 120534, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e60f7546-83e2-4a80-9a48-56b3bff04242": {"__data__": {"id_": "e60f7546-83e2-4a80-9a48-56b3bff04242", "embedding": null, "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21", "node_type": "4", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "7b8ab6f4cd22076034037208ddad5c4e39dec1170ddfde79e3ef7c946fa0a322", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a620f1ff-aa2d-43ef-bb5a-15c53041a2b9", "node_type": "1", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "35a17ef9ae80538496d702814ae162b7688aba9351d59227270b63500a380b54", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "02dc3922-3bc9-486b-86bd-20e0326d5982", "node_type": "1", "metadata": {}, "hash": "da7b891218f8dd0d19a3575869ffeebc24d2b585036fc1b6a81d6c871ce38f4e", "class_name": "RelatedNodeInfo"}}, "text": "For example, a test capability may exist to group together the Testers across several teams and share best practice, ways of working and tools. A Test Lead may span the teams and provide guidance, support, best practice on working methods, and a lightweight governance function.\nThis secondary alignment of the individual to a Capability, in addition\nto the primary role of delivering as part of the team, provides a useful structure to support people in their daily work. The use of Capabilities is illustrated in Figure 4-7.\nFigure 4-7: Capability Leadership\nLead BA\nLead Developer\nLead Tester\nBA Capability\nDeveloper Capability\nTest Capability\nTeam C\n                Team A\nTeam B\n 116\nThe Optimal Team\n\nBuilding Communities for Continuous Improvement\nIf, as we suggest, technologists are located within Delivery Teams tied to products, then we hope that their primary affinity is to the product. Whilst this achieves focus on product delivery, it is important for both the organisation and the individual that there is a broader fabric of community within the technology domain.\nCreating Communities for particular groups of individuals or specific skill areas helps develop people and the organisation through improved sharing of ideas and knowledge. It allows the organisation to experiment and innovate from the ground up, supported by lightweight governance.\nA typical way to build a Community is to encourage knowledge sharing through appropriate tools and to bring together interested individuals from across different Product Teams regularly. Ideas and improvements to working methods or tools identified by these groups are likely to contribute to the appropriate governance process, such as a Technical Design Authority.\n The Optimal Team 117\n\n Key Points\n1. Team decisions and priorities should be guided and supported by the culture and values system of the organisation.\n2. Delivery is ability-led and effective teams are made from \u2018T-shaped\u2019 individuals who all have broad experience of Agile delivery coupled with a specialism.\n3. Change and service should be delivered by cohesive teams with everyone working toward a common goal.\n4. A strong leadership function, comprising Product Ownership, Delivery Management, Solution Architecture and Service Design Leadership is required to drive delivery.\n5. Build self-sustaining communities from the bottom up to share ideas and promote good practice within specific technical areas.\n 118 The Optimal Team\n\n Chapter 05\nEffective Leadership\n\nAt the heart of a strong Product Team is a leadership function that can guide and direct the delivery of features that meet user needs and add value to the organisation. The number and type of individual roles may vary according to the scale of the service provided and the structure of the delivery and operations functions.\nLeaders need a full 360-degree view of any initiative to manage effectively, both outwardly to stakeholders and also within the Delivery Team. They need to be capable of working with the broader organisation on strategy and to enable good governance. Effective leadership of empowered teams is where the most leverage is gained for organisations looking to thrive in the modern economy.\nConcepts\nProject & Service Management Leadership Convergence\nSeveral innovations in technology are combining in a new model for building and running the products and services that organisations rely upon.\nThe rise of Cloud computing and the era of \u2018software-defined everything\u2019 means that software engineering practices are taking over the full technology stack and heavily influencing not just the build, but also the running of services - the DevOps model.\n 120 Effective Leadership\n\nHowever, DevOps is not just about the technology of continuous delivery. It is a cultural and organisational shift that requires a new way of thinking about how to change and support products.\nIn addition to the expansion of software engineering practices into technical operations, service management thinking is moving back up the line into delivery. The lifecycle of a product does not begin when software is delivered to Operations, but when an organisation conceives and initiates the production of the idea.\nTraditionally the \u2018Build\u2019 of a product was separate from the operations required to \u2018Run\u2019 it. This led to two separate disciplines of project management and service management. Increasingly, these areas overlap.\nBJSS Opinion\nThree Key Leadership Components\nA good Product Team requires three elements of leadership, often provided by three or more individuals:\n1. Delivery (project and service) management\n2. Product domain expertise\n3. Solution architecture.\nEach has a role to play in working upward with the wider organisation and stakeholders, and downward into the team delivering change and running the service.\n Effective Leadership 121\n\n   d e r\nn a g\nh o l\ne m\na k e\ne n\nS t\nt\n e\nn\nt\nD\ne\nm\ne\nl\ni\nv\nn\na\ng\ne\nr\ny\n Figure 5-1: 360 Degree Product Leadership\nProduct Owner Delivery Manager Solution Architect\nM\na\nThe common responsibilities of each of the key leadership roles are explored in Table 5-1.", "start_char_idx": 119635, "end_char_idx": 124758, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "02dc3922-3bc9-486b-86bd-20e0326d5982": {"__data__": {"id_": "02dc3922-3bc9-486b-86bd-20e0326d5982", "embedding": null, "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21", "node_type": "4", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "7b8ab6f4cd22076034037208ddad5c4e39dec1170ddfde79e3ef7c946fa0a322", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e60f7546-83e2-4a80-9a48-56b3bff04242", "node_type": "1", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "4fabb642a8273470c5a62a2109d0f009a7f1dc99e9a8814a908311c0c068b74b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f760d215-16b3-4b6d-8fc9-8a52656383d9", "node_type": "1", "metadata": {}, "hash": "5920892e8a26bea585c2fcdc36dba2f8506bd64a631314f8c118a1a15e12a774", "class_name": "RelatedNodeInfo"}}, "text": "Increasingly, these areas overlap.\nBJSS Opinion\nThree Key Leadership Components\nA good Product Team requires three elements of leadership, often provided by three or more individuals:\n1. Delivery (project and service) management\n2. Product domain expertise\n3. Solution architecture.\nEach has a role to play in working upward with the wider organisation and stakeholders, and downward into the team delivering change and running the service.\n Effective Leadership 121\n\n   d e r\nn a g\nh o l\ne m\na k e\ne n\nS t\nt\n e\nn\nt\nD\ne\nm\ne\nl\ni\nv\nn\na\ng\ne\nr\ny\n Figure 5-1: 360 Degree Product Leadership\nProduct Owner Delivery Manager Solution Architect\nM\na\nThe common responsibilities of each of the key leadership roles are explored in Table 5-1. Whilst the three leadership roles work together to change and support the product, the responsibilities we outline do imply some structure. Ultimately, as the plan and budget holder, the Delivery Manager is accountable for the delivery of changes and the service for the product.\nM\na\n122 Effective Leadership\n\nThis does not necessarily mean there is a strict reporting line from the Solution Architect and the Product Manager into the Delivery Manager. Sometimes, this relationship can be a complex dynamic; for example, the Product Manager is provided by the organisation, and the Delivery Manager and Solution Architect are from a third-party supplier.\nTable 5-1: Responsibilities of Key Roles\n    Delivery Manager\n   Product Manager\n   Solution Architect\n    Outward Responsibilities\n \u25cb Manage allocated people and budget\n\u25cb Reporting including service KPIs and delivery metrics\n\u25cb Escalate risk and issues to the organisation\n\u25cb Ensure delivery against business goals\n  \u25cb Understand and prioritise user\nneeds\n\u25cb Help define the roadmap and contribute to\norganisational strategy\n\u25cb Communicate with the customer\n  \u25cb Actively manage technical risk\n\u25cb Product alignment with enterprise architecture\n\u25cb Contribute to the technology community\n    Inward Responsibilities\n \u25cb Remove delivery blockers from\nthe team\n\u25cb Manage and motivate the team\n\u25cb Own the plan\n  \u25cb Ensure a common understanding of user needs\n\u25cb Make priority calls on delivery\n\u25cb Support test and assurance activities\n  \u25cb Coach and support teams in understanding the overall solution architecture\n\u25cb Promote good practice and\nawareness of enterprise architecture\n\u25cb Review and contribute to\ndetailed design work\n   Effective Leadership 123\n\nThe most important point is that all three areas must work together to deliver a product focused on user needs that adds value to the consumer as well as to the organisation.\n\u2018Necessary and Sufficient\u2019 Governance\nGovernance often has a bad reputation amongst Delivery Teams. It conjures up thoughts of bureaucracy, red tape, and reasons not to do things. We have already established that the modern organisation needs to change at a faster pace and continually evolve its products to meet user needs. To do so, the role of governance must be to guide and support with judicious management of risk.\nInfrequent, onerous approval gates are replaced by lightweight, regular guidance. This requires a mindset change for sponsors and executives. Teams must be trusted to deliver and provided with regular support to do their jobs. Executives have a responsibility to the organisation\nto manage risk and ensure that people and resources are deployed effectively. Discharging this responsibility requires engagement and strong leadership.\nLikewise, Delivery Teams are obliged to Executives to deliver on time and within budget. They also must be consistently able to articulate progress to Executives when required.\nTeams have a part to play in building this trusted relationship through demonstrating value-add to the organisation, and by being open and transparent about challenges that exist. The judgement required here is a key skill of the Leadership Team. Too often, change initiatives spiral out of control due to a loss of confidence by stakeholders. This can become a bigger problem than any underlying delivery issue. Teams need to demonstrate they are in control whilst not hiding problems.\n 124 Effective Leadership\n\n Defining the Business Challenge\nA well-defined business challenge is critical to project success. Strategy should be the foundation of any Discovery phase \u2013 providing the direction and boundaries for future decision making. When an organisation is clear on the problem to solve and objectives to meet, an investigation to surface internal and external insight can begin. It is this insight, particularly that of the audience, that enables the selection of promising ideas that reduce the risk of releasing unwanted products.\nTools like a Value Proposition Canvas ask teams to consider product benefits, features, and experience through the lens of audience needs, wants, and fears. The aim is to surface a differentiating idea that will satisfy customers\u2019 needs.", "start_char_idx": 124029, "end_char_idx": 128938, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f760d215-16b3-4b6d-8fc9-8a52656383d9": {"__data__": {"id_": "f760d215-16b3-4b6d-8fc9-8a52656383d9", "embedding": null, "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21", "node_type": "4", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "7b8ab6f4cd22076034037208ddad5c4e39dec1170ddfde79e3ef7c946fa0a322", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "02dc3922-3bc9-486b-86bd-20e0326d5982", "node_type": "1", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "838c9d8c8000801e79f40bfb1f82286ecb8a4f1a4b0bb403a638f4d4543f80f1", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "bd37b2ff-6801-4d85-9e08-f0a6c31d7353", "node_type": "1", "metadata": {}, "hash": "962b5b5a8dfe9ee3122cf76ef0df8c447db0e7b3109386fc4090d4937086caf2", "class_name": "RelatedNodeInfo"}}, "text": "Too often, change initiatives spiral out of control due to a loss of confidence by stakeholders. This can become a bigger problem than any underlying delivery issue. Teams need to demonstrate they are in control whilst not hiding problems.\n 124 Effective Leadership\n\n Defining the Business Challenge\nA well-defined business challenge is critical to project success. Strategy should be the foundation of any Discovery phase \u2013 providing the direction and boundaries for future decision making. When an organisation is clear on the problem to solve and objectives to meet, an investigation to surface internal and external insight can begin. It is this insight, particularly that of the audience, that enables the selection of promising ideas that reduce the risk of releasing unwanted products.\nTools like a Value Proposition Canvas ask teams to consider product benefits, features, and experience through the lens of audience needs, wants, and fears. The aim is to surface a differentiating idea that will satisfy customers\u2019 needs.\nFigure 5-2: Value Proposition Canvas\nGain Creators\nProducts & Services\nPain Relievers\nGains\nPains\nCustomer Jobs\n     Effective Leadership\n125\n\nDeveloping a subsequent Business Value canvas can help to consolidate disparate business, audience, and market insight to identify the attributes needed to support a successful business or service. This approach asks you to consider:\n\u25cb Who are the potential partners in your network, and what resources or activities are available to you?\n\u25cb What activities and resources are needed to support the value proposition?\n\u25cb What are the characteristics of your value proposition, and what form will it take?\n\u25cb Who is your audience, what factors differentiate them, and what do they need from the experience?\n\u25cb Which channels will you use to bring the product or service to market, and how will you use them to reach your audience segment?\n\u25cb How will you charge for the product/service and what costs do you need to cover to remain viable?\nEstimating Work\nOne of our aims for this book is to help organisations build predictability into their delivery process. The techniques we describe can help with this, and a key point is to break change down into smaller pieces and release often. Another essential factor is the process by which work is estimated and sized, particularly when this is being undertaken to advise funding for a Minimum Viable Product (MVP).\nTraditional project planning relies on decomposing the perceived work and then estimating based on the effort (in person-days) required\nto complete it. The drawback with such work breakdown structures\nis that they require significant upfront Discovery work and assume\n 126 Effective Leadership\n\nthat functionality is relatively fixed. Both of these factors do not lend themselves to Agility.\nAlternative Agile methods of estimation take a more holistic approach, sizing pieces of work based on relative size, risk, and complexity to get an overall view of the effort required. A common method is to use story points to mark the relative estimate of valuable items of work (sometimes captured as user stories). Typically, the numbers used\nare something like a Fibonacci sequence (1, 2, 3, 5, 8, 13, 21, 34) to demonstrate increasing uncertainty in larger, more complex stories.\nThe strength of story points as an abstract concept can also become a significant weakness during Delivery. We have seen many projects go awry due to the intangible nature of the metrics being used. For small-scale change and the work of a small team, simple use of story points and a velocity (the rate at which story points are currently being delivered) may work. The drawbacks of story points on larger programmes and MVP delivery can be significant and do not aid predictability, notably:\n1. Many business sponsors do not understand the abstract concept of story points and want (need) to work in clear effort and monetary terms\n2. Story points can lead to a lack of transparency over progress, particularly when they are diluted through re-estimation. Delivery of story points gives the illusion of progress even though the backlog is not reducing.\nWe would urge some caution when using story points, particularly in conjunction with third party suppliers and contracts. Delivery of story points does not always equate to progress towards the end goal and is certainly not a measure of supplier productivity.\nOn the other hand, when used well, story points and relative estimation can prove to be a far more reliable forecast for delivery than traditional estimation and planning techniques.\n Effective Leadership 127\n\nThe Enterprise Agile Approach\nTaking a Risk-First Approach\nWe are strong advocates of active risk management and a risk-first approach to delivery. Risk takes many forms. Some risks are under the control of the Product Team, some they can influence, and others are external to the organisation that they are unable to affect.\nWhen considering implementing change to a product, it is essential to take time to consider risk, its source, and what can be done to influence or manage it.", "start_char_idx": 127908, "end_char_idx": 133022, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bd37b2ff-6801-4d85-9e08-f0a6c31d7353": {"__data__": {"id_": "bd37b2ff-6801-4d85-9e08-f0a6c31d7353", "embedding": null, "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21", "node_type": "4", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "7b8ab6f4cd22076034037208ddad5c4e39dec1170ddfde79e3ef7c946fa0a322", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f760d215-16b3-4b6d-8fc9-8a52656383d9", "node_type": "1", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "05e6be3f9d462ffe5854f0f7ea92ce9f55fc8dad0abbedad372dbe9684a3e1ea", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ff205f69-68ce-4c13-9043-996917195628", "node_type": "1", "metadata": {}, "hash": "6148e43346fbd57dc8a26865bcfd235079d4876ff6e5bb08a697b7824cf86e08", "class_name": "RelatedNodeInfo"}}, "text": "Delivery of story points gives the illusion of progress even though the backlog is not reducing.\nWe would urge some caution when using story points, particularly in conjunction with third party suppliers and contracts. Delivery of story points does not always equate to progress towards the end goal and is certainly not a measure of supplier productivity.\nOn the other hand, when used well, story points and relative estimation can prove to be a far more reliable forecast for delivery than traditional estimation and planning techniques.\n Effective Leadership 127\n\nThe Enterprise Agile Approach\nTaking a Risk-First Approach\nWe are strong advocates of active risk management and a risk-first approach to delivery. Risk takes many forms. Some risks are under the control of the Product Team, some they can influence, and others are external to the organisation that they are unable to affect.\nWhen considering implementing change to a product, it is essential to take time to consider risk, its source, and what can be done to influence or manage it. Taking a risk-first approach means tackling unknowns early, providing the opportunity to fail fast, or adjust plans while there is still time to do so.\nIn practical terms, the risk-first approach provides confidence in the solution being delivered. This is affirmed through robust and ongoing consultation with the audience(s), and the active participation of the entire team in applying their skill and judgment to recognise potential risks, and considering innovative approaches to address them. It is in this area where the Delivery Manager and Analyst are expected to make a significant contribution. We believe that managers should be actively driving towards no surprises in delivering change, not simply reporting on it. The manager is expected to fly ahead of the team to look for potential obstacles.\n 128 Effective Leadership\n\nThe Enterprise Agile approach includes the following elements to help realise the risk-first principle:\nThe Product Lifecycle\nUse of Feasibility and Discovery phases ahead of Delivery to manage risk to delivery, and ensure the solution meets audience needs.\nThe Delivery Pipeline\nFully automated software build and deployment using repeatable processes rather than manual, error-prone alternatives.\nQuality Built-In\nWell thought through test approaches and important considerations such as security, privacy, and accessibility to ensure a high-quality product is delivered and assured.\nArchitecture Centric\nProving architecture early in the product lifecycle through the delivery of valuable features, and ensuring that architecture evolves in a controlled manner.\nSprint Planning\nMaking sure the high-risk areas of technical or functional delivery are addressed in the early Sprints of the release.\n Effective Leadership 129\n\nImplementing Good Governance\nIt has been our experience that clients expect something specific delivered against a plan, for a particular date and a specified budget \u2013 all agreed in advance. To achieve this over an extended period in an Agile engagement requires appropriate governance.\nMost clients have existing frameworks with which we must conform. At first sight, these often appear to be heavyweight processes with significant documentation overhead. However, they usually include the essential gates designed to inform senior management decision making and minimise corporate risk. It\u2019s perfectly possible to make an Agile delivery approach work in this type of environment, and a \u2018Necessary and Sufficient\u2019 documentation set can provide the level of documentation and information required to support such decisions.\nA good governance process should fulfil three key aims:\n\u25cb Inform \u2013 Provide suitable performance indicators\n\u25cb Escalate \u2013 Offer a route up in the organisation to raise critical issues\n\u25cb Assure \u2013 Keep the product aligned to organisation goals.\nThis process will involve regular meetings to discuss progress, status, key risks, and issues. We believe that these should be focused and aligned to the Sprint and Release cadence. This ensures they support the delivery of Sprint plans, as well as report on the end of Sprint deliverables and the achievement of Release commitments. This is discussed in more depth in Chapter 7, where we consider the value of Sprint backlogs, earned value, and a commitment to deliver.\nWe think that appropriate project governance is a vital element in the success of all projects, especially Agile ones, and that it can be achieved without a burdensome level of overhead.\n 130 Effective Leadership\n\n Bridging to the Organisation\nThe key governance review meeting between the Product Team and organisation executives is the Programme/Project Board or, perhaps more appropriate in an Agile organisation, the Product Governance Board. This provides the Product Team with the opportunity to request additional support from the sponsor and to raise issues. The board performs the function of steering product development to maintain strategic alignment and levels of service received by the end-users. Conflicting priorities may be escalated to this group for guidance.", "start_char_idx": 131972, "end_char_idx": 137102, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ff205f69-68ce-4c13-9043-996917195628": {"__data__": {"id_": "ff205f69-68ce-4c13-9043-996917195628", "embedding": null, "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21", "node_type": "4", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "7b8ab6f4cd22076034037208ddad5c4e39dec1170ddfde79e3ef7c946fa0a322", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "bd37b2ff-6801-4d85-9e08-f0a6c31d7353", "node_type": "1", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "9fcab2fee9def5967c9d9fa0a800eb74a1fe6b7c0451856e0c765ba2066ced00", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d3965129-ed1d-4d96-9ffc-f7ec369e3894", "node_type": "1", "metadata": {}, "hash": "cdd520d9629f21e62929bf9b0a970cbec84a851079891eabc3f134ec00d53a9d", "class_name": "RelatedNodeInfo"}}, "text": "This ensures they support the delivery of Sprint plans, as well as report on the end of Sprint deliverables and the achievement of Release commitments. This is discussed in more depth in Chapter 7, where we consider the value of Sprint backlogs, earned value, and a commitment to deliver.\nWe think that appropriate project governance is a vital element in the success of all projects, especially Agile ones, and that it can be achieved without a burdensome level of overhead.\n 130 Effective Leadership\n\n Bridging to the Organisation\nThe key governance review meeting between the Product Team and organisation executives is the Programme/Project Board or, perhaps more appropriate in an Agile organisation, the Product Governance Board. This provides the Product Team with the opportunity to request additional support from the sponsor and to raise issues. The board performs the function of steering product development to maintain strategic alignment and levels of service received by the end-users. Conflicting priorities may be escalated to this group for guidance.\nFigure 5-3: Flow Between Governance Board and Product Team\nInform\nRegular reporting\nAssure\nReview as required\nEscalate\nIssues by exception\n Governance Board\nReview progress\nGuidance with key risks\nand issues\nAssist with issue resolution\nApprove/reject changes beyond team authority\nMake priority calls when requested\n Product Leadership\nEnsure regular communication and reporting\nEscalate key risks and issues\n    Effective Leadership\n131\n\nDiligence Within the Product Team\nGood governance is also important within the Product Team itself, particularly as it grows. As far as possible, the Product Owner should\nbe trusted by the organisation to make decisions about the product independently. That said, there are occasions where decisions that are impacted by strategy, or that may impact the product within the wider organisation or portfolio, may require some additional oversight and ceremony. One area we believe that some ceremony is required is design decision making. Using a Design Authority to record key design decisions is a powerful tool to help plot and record the course the product takes over time.\nThere are two facets to the Design Authority: functional design decisions and technical design decisions. We recommend both are discussed at the same forum. Taking decisions in isolation of a discussion about delivery impact should be avoided. This group should be diverse and include those managing the delivery of change, not just the service design, technical, and analyst communities.\nThe frequency of the product design authority meetings may vary. The more intense the phase of delivery and volume of change, the more frequent the meetings are likely to be. This keeps change flowing and minimises the number of decisions at any one time. Always bear in mind that any delay resulting from a team waiting for an authority\u2019s decision will impede the team\u2019s, as well as the wider organisation\u2019s, ability to be responsive and Agile.\n 132 Effective Leadership\n\n The workings of the Design Authority are likely to be tied to the Sprint delivery pattern. This ensures that areas of design related to work for the following Sprint can be guided as necessary as requirements are further elaborated. The Design Authority will operate within organisational constraints, such as enterprise architecture.\nFigure 5-4: Product Design Authority\nOrganisation\nDesign Authority\nTechnical Design Patterns\nAlignment to Functional Architecture\nEscalate necessary deviation from Enterprise Architecture\nKey Design Decision Log\n       Effective Leadership\n133\n\nThe Ongoing Importance of Planning\nAgility does not mean foregoing a plan. Managing change requires planning, but the real measure of success is demonstrable progress towards the required outcomes. No team should slavishly follow a plan without reference to defined goals. The level of planning depends on the scale of the change and the level of Agility across the organisation.\nRoadmaps typically exist at the organisation and product level. A roadmap is a statement of intent, and suggests a phasing and rough timing for initiatives. A plan is more detailed, but still subject to change. The Sprint backlog describes a commitment by a team to deliver a specific goal. Whilst there may still be some flexibility in how the goal is delivered, the planned backlog items and tasks required to deliver them should be understood.\nProducts that are relatively standalone and mature can evolve\nthrough continuous product innovation and require little planning. The replacement of a legacy system with a \u2018big bang\u2019 cutover and many dependencies on third parties requires much more work. Planning is usually most important during the inception of a product and getting to MVP and launch.\nWe recommend that plans are layered with successive levels of refinement. For the majority of small initiatives, a single-level Sprint plan is often sufficient. For large-scale changes, there are commonly three layers of planning that roll up into each other.\nHigh-Level Plan\nPlanning at a high level will capture the major milestones and interactions with other products and services across the organisation and any external dependencies.", "start_char_idx": 136034, "end_char_idx": 141281, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d3965129-ed1d-4d96-9ffc-f7ec369e3894": {"__data__": {"id_": "d3965129-ed1d-4d96-9ffc-f7ec369e3894", "embedding": null, "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21", "node_type": "4", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "7b8ab6f4cd22076034037208ddad5c4e39dec1170ddfde79e3ef7c946fa0a322", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ff205f69-68ce-4c13-9043-996917195628", "node_type": "1", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "d7944ae60f31a2bbde89dc06855c90d7fb929769c8458a6bf6b4913934decd7b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8361a814-bbc9-4c77-b98d-853aa9a89481", "node_type": "1", "metadata": {}, "hash": "ddb775eba5deaee40187274f3b9f32e4abb77144f95824f5d3691881dab67253", "class_name": "RelatedNodeInfo"}}, "text": "The Sprint backlog describes a commitment by a team to deliver a specific goal. Whilst there may still be some flexibility in how the goal is delivered, the planned backlog items and tasks required to deliver them should be understood.\nProducts that are relatively standalone and mature can evolve\nthrough continuous product innovation and require little planning. The replacement of a legacy system with a \u2018big bang\u2019 cutover and many dependencies on third parties requires much more work. Planning is usually most important during the inception of a product and getting to MVP and launch.\nWe recommend that plans are layered with successive levels of refinement. For the majority of small initiatives, a single-level Sprint plan is often sufficient. For large-scale changes, there are commonly three layers of planning that roll up into each other.\nHigh-Level Plan\nPlanning at a high level will capture the major milestones and interactions with other products and services across the organisation and any external dependencies.\n 134 Effective Leadership\n\nThis high-level plan is generally outside the remit of the Product Team and manages portfolio-level dependencies. This plan is key for larger-scale change programmes and is often expressed as a flight plan to bring together multiple, related workstreams and products.\nMid-Level Plan\nThe mid-tier of planning focuses on the work of the entire Product Team, their interactions with each other and the bringing together of business and technical change.\nThis artefact is the key guide for the Product Team and is owned by the Delivery Manager with input from all the team leaders. It is this plan that the governance process tracks against.\nLow-Level Plan\nA low-level plan looks at the day-to-day work of individual teams delivering change and supporting the product. This layer is the most fluid and often exists within the delivery pipeline tooling. This equates to the individual Sprint Plan used to deliver change and release valuable increments of the product.\n Effective Leadership 135\n\nPlanning Across Lifecycle Phases\nThe role and level of planning evolves across the lifecycle.\nFeasibility\nAt the Feasibility stage, the key activities are understanding the objectives of the initiative. It is critical to define the value that the initiative will provide for the customer (internal or external) as well as the benefit the initiative will deliver for the organisation.\nFeasibility can often be brief, perhaps even only a few days and involving a handful of people. Planning activities at this stage involve ensuring that key stakeholders are engaged, the candidate delivery options are validated and understood, and a suitable proposal, including an initial draft plan for delivery, is prepared.\nMuch of the effort in Feasibility should focus on building a robust plan for Discovery that allows for that phase to conclude successfully.\nDiscovery\nSeveral essential objectives must be achieved during Discovery - an intensive phase designed to reduce risk and increase predictability during delivery.\nWhere Discovery is more than a couple of weeks duration, a Discovery phase plan should begin the operation of a Sprint pattern. This allows for Agile principles of a regular heartbeat to facilitate course corrections and demonstrable progress.\nIn contrast to many traditional initiatives, the Discovery phase may result in the initiative being cancelled if it reveals that the customer\n 136 Effective Leadership\n\ndemand cannot be validated or the solution cannot be provided whilst still delivering the benefits defined for the organisation in the Feasibility stage.\nDelivery\nThe Delivery plan is a Sprint-based plan that, whilst allowing for refinement and change, is aimed at providing some degree of predictability \u2013 particularly up to the point of MVP. An initial Sprint plan for the MVP is built during Discovery.\nGenerating a Sprint Plan\nIt is useful to have a view of a few Sprints ahead to link Agile product delivery with other fixed, real-world dependencies. One scenario where a Sprint plan is most useful for a longer duration is in the delivery of a Minimum Viable Product. This is generally because the initial product delivery has some challenging real-world constraints and deadlines, and the organisation is seeking more predictability.\nCreating a Sprint plan requires that suitable structured analysis has been undertaken to create a set of estimates against the required scope. Developing the plan is then a matter of allocating work to Sprints based on a set of priorities and the estimated capacity of the Delivery Team.\n Effective Leadership 137\n\nEstimating for MVP\nThe bulk of the effort to create an initial Sprint plan for the Minimum Viable Product is identifying the features required and estimating the work involved. The process of generating the scope for the Minimum Viable Product and structuring requirements is covered in more detail in Chapter 6.\nIf the research and analysis work has produced a backlog of epic features (any large, complex, or risky piece of work that cannot be delivered within a Sprint) to deliver, a good way to generate the estimates for the plan is to take a top-down approach and \u2018shirt size\u2019 the requirements. The Discovery phase of the product lifecycle should yield a functional scope against which to estimate. There are three distinct stages of creating the estimate.", "start_char_idx": 140252, "end_char_idx": 145644, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8361a814-bbc9-4c77-b98d-853aa9a89481": {"__data__": {"id_": "8361a814-bbc9-4c77-b98d-853aa9a89481", "embedding": null, "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21", "node_type": "4", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "7b8ab6f4cd22076034037208ddad5c4e39dec1170ddfde79e3ef7c946fa0a322", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d3965129-ed1d-4d96-9ffc-f7ec369e3894", "node_type": "1", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "05f4e6ef1320de509d3435903a9f1087c1b0b0a879bd385e06dec91490e18ffc", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "bec26e56-1a18-4d49-98f7-b4f64a5c55f6", "node_type": "1", "metadata": {}, "hash": "01dd80d008e89bae3b10fa471b5711a31615f1276bda17ca44d8067ee0ed189c", "class_name": "RelatedNodeInfo"}}, "text": "Developing the plan is then a matter of allocating work to Sprints based on a set of priorities and the estimated capacity of the Delivery Team.\n Effective Leadership 137\n\nEstimating for MVP\nThe bulk of the effort to create an initial Sprint plan for the Minimum Viable Product is identifying the features required and estimating the work involved. The process of generating the scope for the Minimum Viable Product and structuring requirements is covered in more detail in Chapter 6.\nIf the research and analysis work has produced a backlog of epic features (any large, complex, or risky piece of work that cannot be delivered within a Sprint) to deliver, a good way to generate the estimates for the plan is to take a top-down approach and \u2018shirt size\u2019 the requirements. The Discovery phase of the product lifecycle should yield a functional scope against which to estimate. There are three distinct stages of creating the estimate.\nBuild the Model\nThe build of the model is a case of listing out all of the feature epics and applying a shirt size to them. We normally use five shirt sizes: XS,\nS, M, L, XL. It is often useful at this stage to adopt a blind estimating technique where members of the team do not compare results until the exercise is completed, so as not to bias each other.\nAfter this stage, we have identified the relative complexity of the epics and flushed out any unknowns. It is also possible to see the potential variance based on different estimators\u2019 understanding of the problem. The conversations that this process generates can be a useful way of ensuring there is a common understanding of the requirements across the team.\n 138 Effective Leadership\n\nCalibrate the Model\nIt can then be useful to assign numbers to the model. To do this, we will take a representative sample, perhaps up to 20% of the epics, and decompose them into stories. These stories are then sized in ideal days. It is essential at this stage to take a representative set of epics across the product and of different shirt sizes.\nFrom this stage of the process, we can determine the average effort required for the delivery of each size and get an overall effort for\nthe MVP in ideal days. Factoring in an efficient ratio and capacity for defects allows a total required capacity to be attained and a Sprint plan to be built.\nTest the Model\nThere is no substitute for doing actual work to determine the accuracy of the estimation model. For a large product build, certain elements of the solution will likely be prototyped during Discovery. These pieces of work could be used to recalibrate the model.\nGenerally, we recommend that the same teams that conducted Discovery should carry on into Delivery to ensure that the learnings are not lost. If this is not possible, it will be necessary to adjust the \u2018actuals\u2019 from the Discovery phase if they are applied to the overall model. Certainly, delivery metrics from the first few Sprints should be fed back. It is also worth bearing in mind that the productivity of new teams, whilst initially low, will increase during the early stages of delivery.\n Effective Leadership 139\n\nManaging Changes to the Plan\nThe purpose of greater Agility in the organisation is to allow for flexibility and responsiveness to adapt to evolving user needs. In this environment, change is inevitable and should be encouraged.\nThere does, however, need to be some direction and stability as provided by the roadmaps and plans created for individual products. Whilst Product Teams should be empowered to do the things that users need and release value for the organisation, change should not\nbe unconstrained.\nWhere a baseline scope has been created for a Product Increment\nor Minimum Viable Product, it may, in exceptional circumstances, be necessary to use Change Control to govern this. The use of a Change Control process ensures that any revised scope remains true to the organisation\u2019s goals and that any outside dependencies can be adjusted. It also allows for expectations to be managed if particularly large features come in or out of scope, adjusting delivery dates or the need for (interim) manual processes.\nMinor changes as a result of regular story elaboration and items moving between Sprints would not normally require Change Control. Major scope changes at the epic level require visibility, and this may include formal decision making.\nActive Raid Management for Improved Predictability\nEven if you can embrace continuous product innovation and exploit Agile techniques across the organisation, you will still face changes presented by the outside world. Active RAID (Risks, Assumptions, Issues, and Dependencies) management is still as important as ever to avoid unpleasant surprises.\n 140 Effective Leadership\n\nWe often find that these terms are misused, so it\u2019s worth a quick recap of the definitions.", "start_char_idx": 144710, "end_char_idx": 149559, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bec26e56-1a18-4d49-98f7-b4f64a5c55f6": {"__data__": {"id_": "bec26e56-1a18-4d49-98f7-b4f64a5c55f6", "embedding": null, "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21", "node_type": "4", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "7b8ab6f4cd22076034037208ddad5c4e39dec1170ddfde79e3ef7c946fa0a322", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8361a814-bbc9-4c77-b98d-853aa9a89481", "node_type": "1", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "77ba0287302170935de279c1de286bdf76b2cf97431312607b1f56a7be658eb7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "141b43d9-f2a2-4f81-9228-6fc1fea94e69", "node_type": "1", "metadata": {}, "hash": "8843a3d070120f6851b75d4a0e09dfb546cb5357df5922ddc1ff77b664d59888", "class_name": "RelatedNodeInfo"}}, "text": "The use of a Change Control process ensures that any revised scope remains true to the organisation\u2019s goals and that any outside dependencies can be adjusted. It also allows for expectations to be managed if particularly large features come in or out of scope, adjusting delivery dates or the need for (interim) manual processes.\nMinor changes as a result of regular story elaboration and items moving between Sprints would not normally require Change Control. Major scope changes at the epic level require visibility, and this may include formal decision making.\nActive Raid Management for Improved Predictability\nEven if you can embrace continuous product innovation and exploit Agile techniques across the organisation, you will still face changes presented by the outside world. Active RAID (Risks, Assumptions, Issues, and Dependencies) management is still as important as ever to avoid unpleasant surprises.\n 140 Effective Leadership\n\nWe often find that these terms are misused, so it\u2019s worth a quick recap of the definitions.\nTable 5-2: RAID Definitions\n Term\n   Definition\n   Example\n   Risk\n  An identified threat to delivery\n  The supplier may not be able to provide suitably skilled staff at the\nright time\n   Assumption\n A documented expectation based on the facts available at the time. A change to\nthe assumption could jeopardise delivery\n There will be no regulatory or compliance changes during the delivery project\n Issue\n  An actual problem that impedes delivery\n  There is a lack of Kubernetes skills in the team, and the contract market is negatively impacting delivery\n Dependency\n   Required input from elsewhere within or outside the organisation. Should have a due date\n   The procurement agreement with the Cloud service provider will be signed by\n1st Jan 2022\n  Materialised risks, false assumptions, and missed dependencies\nall result in issues. Teams also identify blockers through their daily Stand-up meetings. Blockers that cannot be dealt with through team interaction also need to be raised and recorded as issues.\n Effective Leadership 141\n\nReporting\nA key element of a Product Team leadership role is providing timely, accurate reporting to enable fact-based decision making and interventions. When too little or too much information is provided, time-poor stakeholders cannot rapidly understand the current position, and become frustrated. The Leadership Team must clearly articulate the current position, supported by several relevant KPIs and metrics.\nTable 5-3: Suggested Reporting Contents\n Definition\n  Example\n   Summary\n   Narrative to briefly describe current status\n   RAG status\n Red/Amber/Green to reflect current product status often split into sub-categories, for example:\n\u25cb Value\n\u25cb Progress \u25cb Quality\n\u25cb Service \u25cb Team\n\u25cb Suppliers\n Outcomes\nplanned/delivered\n  Outline of the outcomes planned for the reporting period and the outcomes delivered\n Key RAID changes\n   Any significant movement in RAID\n  Continued overleaf\n 142 Effective Leadership\n\nTable 5-3 continued: Suggested Reporting Contents\n Definition\n   Example\n   Metrics\n  Example key metrics supporting the current position:\nProgress\n\u25cb Sprint Burn-down\n\u25cb Release Burn-up\nQuality\n\u25cb Defect find/fix rate\n\u25cb System availability\nService\n\u25cb Volume of incidents\n\u25cb Performance against SLAs\n  Concerns arise when information is reported that does not represent the complete picture. This can quickly become a distraction and result in demands for further information. Before long, the Product Team is spending a disproportionate amount of time servicing questions rather than delivering. In the absence of the right information, stakeholders make judgements based on perceptions. If this point is reached, it is time to stop, take stock, and agree on a recovery plan to remedy the key issues and return to fact-based conversations.\nMetrics and data collection for reporting should be built into the delivery tooling and, as far as possible, be automated. Minimal effort is required from the team to record the tasks being worked on if the tools are set up correctly from the outset.\n Effective Leadership 143\n\nIt should be clear that delivery metrics are best used to understand the rate of progress and product quality to aid planning and continuous improvement, rather than a stick with which to beat team members. Reporting should echo the message coming out of the Sprint ceremonies, such as estimation and planning meetings and\nShow and Tells.\nA good report may include the key elements described in Table 5-3. Keep the Information Flowing\nWhilst regular reporting is required to keep stakeholders informed, this should not be the sole source of information. Delivery, service, and quality metrics should always be visible to the team and stakeholders.\nThere should be no surprises for anyone in terms of the status of delivery and progress towards agreed goals. The use of whiteboards and, preferably, screens in the team environment is to be encouraged.", "start_char_idx": 148527, "end_char_idx": 153487, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "141b43d9-f2a2-4f81-9228-6fc1fea94e69": {"__data__": {"id_": "141b43d9-f2a2-4f81-9228-6fc1fea94e69", "embedding": null, "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21", "node_type": "4", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "7b8ab6f4cd22076034037208ddad5c4e39dec1170ddfde79e3ef7c946fa0a322", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "bec26e56-1a18-4d49-98f7-b4f64a5c55f6", "node_type": "1", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "8698c672b35dbd5daad2b4c12ce965b60a03ef855b3845856115b8b49e875129", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "dd2abaec-9780-44c8-8e5e-42b94595e26d", "node_type": "1", "metadata": {}, "hash": "0aabd3599649a292df3120faca37a5bd9e1e739dd7018b303257219b1d6fcf6b", "class_name": "RelatedNodeInfo"}}, "text": "Minimal effort is required from the team to record the tasks being worked on if the tools are set up correctly from the outset.\n Effective Leadership 143\n\nIt should be clear that delivery metrics are best used to understand the rate of progress and product quality to aid planning and continuous improvement, rather than a stick with which to beat team members. Reporting should echo the message coming out of the Sprint ceremonies, such as estimation and planning meetings and\nShow and Tells.\nA good report may include the key elements described in Table 5-3. Keep the Information Flowing\nWhilst regular reporting is required to keep stakeholders informed, this should not be the sole source of information. Delivery, service, and quality metrics should always be visible to the team and stakeholders.\nThere should be no surprises for anyone in terms of the status of delivery and progress towards agreed goals. The use of whiteboards and, preferably, screens in the team environment is to be encouraged. It is straightforward to get most modern tooling to display a dashboard to highlight progress, quality, and service metrics.\nThe current delivery position should always be very visible to teams and stakeholders. Everyone is signed up to working towards a set of common goals, and progress towards these should be of interest to everyone.\n 144 Effective Leadership\n\n Key Points\n1. A strong leadership function should cover three components: Delivery Management, Product Ownership and Solution Architecture.\n2. \u2018Necessary and Sufficient\u2019 governance should be put in place with clearly defined paths for Information, Escalation, and Assurance.\n3. Estimation for Minimum Viable Product involves building, calibrating, and testing a model based on the Discovery phase feature backlog.\n4. An initial Sprint plan for delivering a Minimum Viable Product is required\nand this is built during the Discovery Phase, but subject to change based on feedback from the first few Sprints.\n5. Active Risk, Issue, Assumption, and Dependency (RAID) management is still required in Agile delivery, particularly in the bridge to the non-Agile world.\n Effective Leadership 145\n\n 146\n\n Chapter 06\nUnderstanding Human-Centred Design\n\nThe last decade has seen a radical shift in the way organisations solve problems and design products or services. Human-centred design is a mindset and a method. It is a practice of understanding human behaviours and identifying insights that inform the design and delivery of better\nuser experiences.\nA mature User Experience (UX) approach seeks to meet both internal and external audiences\u2019 expectations by deliberately designing their experience to create the greatest value for both the user and the organisation.\nHuman-centred design extends to planning and organising internal teams, systems, infrastructure, and communication to deepen the connection between the organisation and the user.\nThere are a multitude of terms and models used to describe all elements of Human-centred design. While this can be confusing, the most important point to remember is that the user need should be paramount at the outset of strategic product\nand service proposition development, and throughout the delivery process.\nConcepts Understanding User Needs\nInaccurate assumptions, bias, departmental silos, and many other challenges reinforce the importance of a Human-centred design approach for successful delivery. When user needs are identified,\n 148 Understanding Human-Centred Design\n\nthey can set the shared strategic vision for all contributing teams and stakeholders.\nEmpathy is one of the first steps in Human-centred design. Methods and tools that help Agile Teams build empathy with users embed a better understanding of user needs within the team and, subsequently, with the wider stakeholder group. This first step generates the crucial insight required to create solutions that are fit for purpose.\nUser research is a way to embed empathy within the team. The insight generated reduces the risk of development, providing the team with the confidence and understanding to build the right product or service at pace. There are many different research techniques, from qualitative in-depth observational field studies, guerrilla testing and face-to-face interviews to quantitative analysis of user data.\nPrimary research, i.e., research that you conduct yourself, can\nbe supplemented with other sources. This is often referred to as triangulation. Using more than one method to collect insight on the same topic can assure the validity of research. For example, call centre records or digital analytics provide good insight. Many online reports and resources are also available, for example, Google Trends and Google Correlate. \u2018Review\u2019 sources like app and retail stores can also be useful.\nEmpathising with users through research is often followed by \u2018affinity mapping\u2019, which means grouping the insight into commonalities and patterns which enable categorisation. Personas are an example of research-based fictional characters that represent groups of users. Personas provide a visual tool to help embed a common language and user focus across a team.", "start_char_idx": 152482, "end_char_idx": 157651, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "dd2abaec-9780-44c8-8e5e-42b94595e26d": {"__data__": {"id_": "dd2abaec-9780-44c8-8e5e-42b94595e26d", "embedding": null, "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21", "node_type": "4", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "7b8ab6f4cd22076034037208ddad5c4e39dec1170ddfde79e3ef7c946fa0a322", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "141b43d9-f2a2-4f81-9228-6fc1fea94e69", "node_type": "1", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "86819b26ca7062da9fdd286ebb3b438b266c058c8dcb3f6dd028273a6ee57e91", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "efe66f06-d804-4777-8575-7a4115123488", "node_type": "1", "metadata": {}, "hash": "96d316489cf0e4cff9af4c2d680f3f419d1dd3f3b3ad4377a9582fbd24793137", "class_name": "RelatedNodeInfo"}}, "text": "There are many different research techniques, from qualitative in-depth observational field studies, guerrilla testing and face-to-face interviews to quantitative analysis of user data.\nPrimary research, i.e., research that you conduct yourself, can\nbe supplemented with other sources. This is often referred to as triangulation. Using more than one method to collect insight on the same topic can assure the validity of research. For example, call centre records or digital analytics provide good insight. Many online reports and resources are also available, for example, Google Trends and Google Correlate. \u2018Review\u2019 sources like app and retail stores can also be useful.\nEmpathising with users through research is often followed by \u2018affinity mapping\u2019, which means grouping the insight into commonalities and patterns which enable categorisation. Personas are an example of research-based fictional characters that represent groups of users. Personas provide a visual tool to help embed a common language and user focus across a team. High-priority persona types and corresponding user needs, often written as \u2018stories\u2019, will inform design, and strategic and tactical prioritisation of \u2018features\u2019.\n Understanding Human-Centred Design 149\n\n Figure 6-1: Research Triangulation\n  Qualitative Insight\nTriangulate Research Methods\n  Quantitative Metrics\nExpert Analysis\nEvaluating the User Journey\nEmpathising with user groups is key to designing great experiences. A user journey map is a visualisation of the process a user goes through to accomplish a goal. It identifies tangible and emotional stages along the process, as well as gaps and inefficiencies. It visually represents how and why users make decisions. A journey map identifies user needs, pain points, and journey barriers, as well as \u2018loops\u2019 or other nuances.\n 150 Understanding Human-Centred Design\n\nCreating a journey map is a collaborative activity that aligns stakeholders around a problem to be solved. Creating the user journey map is essential to engage users of the product or service and proxy internal stakeholders. Engage stakeholders from across the organisation, and identify those likely to know where the opportunities to develop and improve are.\nIdentifying the right altitude for the journey map will depend on the problem to solve. Getting the altitude right is important. Too focused and you will miss opportunities or fail to understand context, whilst a high-level view may prevent you from identifying the gaps and inefficiencies that require digital intervention and solution design.\nChanging Human Behaviours\nDesigning an experience that motivates positive action determines whether a solution is successful or not, and requires an understanding of human behaviours. Principles from behavioural economics - \u2018the study of psychology into the analysis of the decision making\u2019 are often used in Human-centred design to encourage or deter behaviours. A typical example is the habit-forming social network notification icon which frequently persuades you to return.\nThis field of thinking underlines that human decision making is often emotional and not rational (even when we fail to see it ourselves). Recent digital technology has attracted attention to this knowledge through \u2018dark patterns\u2019, stimulating counter-movements like \u2018circular\u2019 and \u2018ethical\u2019 design.\nShaping a Human-Centred Organisation\nOnce seen as a nice-to-have, Human-centred design has now proven its commercial value \u2013 Wharton University concluded that the return on investment of good user experience ranges from $2 to $100 for\n Understanding Human-Centred Design 151\n\nevery $1 invested. This can be a powerful persuader for sceptical or resistant stakeholders.\nOrganisations that become more human-centred advance through four stages of maturity:\n1. No design - Design plays little to no role in the organisation; the user perspective is barely considered, and if it is, it relates to isolated initiatives\n2. Design as styling - Design is only relevant in terms of form or aesthetic considerations. External suppliers usually drive any specific user experience considerations\n3. Design as process - Design is a process in the development of products and services; the organisation implements specific and holistic processes to improve user experience\n4. Design as strategy - Design drives innovation and the continual improvement process. The organisation views and acts on user insight strategically. Design is an integral component throughout the value chain.\nThe drive to create better experiences for all users - this includes colleagues as well as consumers - should be a continuous goal for everyone within an organisation. A human-centred mindset should not be relegated to marketing or digital departments, or considered to be visual improvements alone. The greatest benefit is realised when a human-centred mindset is adopted throughout an organisation.\n 152 Understanding Human-Centred Design\n\nBJSS Opinion\nEmbrace a Human-Centred Design Approach\nHuman-centred design is often synonymous with an interface or interpreted as interaction, navigation, and interface design. This view places the ownership of a \u2018good user experience\u2019 solely with a User Experience Designer.", "start_char_idx": 156615, "end_char_idx": 161849, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "efe66f06-d804-4777-8575-7a4115123488": {"__data__": {"id_": "efe66f06-d804-4777-8575-7a4115123488", "embedding": null, "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21", "node_type": "4", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "7b8ab6f4cd22076034037208ddad5c4e39dec1170ddfde79e3ef7c946fa0a322", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "dd2abaec-9780-44c8-8e5e-42b94595e26d", "node_type": "1", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "4247e0146486697baedbafc5df01a172a89a168f3db5c540901ebde1e64f500b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "38eaa9be-cc39-4337-b5ba-975abb2e7979", "node_type": "1", "metadata": {}, "hash": "8e5b6406ba7b4357f29a447269145d52bf1de11b79c410de06e8fe4406ed4d2b", "class_name": "RelatedNodeInfo"}}, "text": "Design as strategy - Design drives innovation and the continual improvement process. The organisation views and acts on user insight strategically. Design is an integral component throughout the value chain.\nThe drive to create better experiences for all users - this includes colleagues as well as consumers - should be a continuous goal for everyone within an organisation. A human-centred mindset should not be relegated to marketing or digital departments, or considered to be visual improvements alone. The greatest benefit is realised when a human-centred mindset is adopted throughout an organisation.\n 152 Understanding Human-Centred Design\n\nBJSS Opinion\nEmbrace a Human-Centred Design Approach\nHuman-centred design is often synonymous with an interface or interpreted as interaction, navigation, and interface design. This view places the ownership of a \u2018good user experience\u2019 solely with a User Experience Designer. Human-centred design is all-encompassing, including the above and ranging through (but not limited to) organisational strategy, systems integration, process modelling, content design, accessibility, and performance. A complete understanding shows that no single person is responsible for the user experience \u2013 instead, it\u2019s a collaborative team effort across all departments and partnerships. This includes involving those who support the product in delivering change \u2013 a key reason we advocate adopting a DevOps culture and associated practices.\nIt is not sufficient to introduce Human-centred design towards the end of a project, or expect visual enhancements to improve function. A more organisationally-mature approach introduces exploratory and strategic user research to validate, quantify, and set the direction of an initial idea or purpose from the outset. This establishes a clear vision - enabling the Product Owner and the Agile Team to make decisions confidently and deliver a solution based on user insight.\n Understanding Human-Centred Design 153\n\n Figure 6-2: Adapted from the Research Funnel, Emma Boulton\n  Exploratory\nBig picture, defining the problems e.g., ecosystem analysis, market survey\nStrategic\nThe problem is known, defining strategy e.g., stakeholder workshops, customer segmentation\nTactical\nAd-hoc research e.g., user interviews, focus groups\nOperational\nDay-to-day reporting e.g., web analysis, C-SAT\nAgile Teams should continue to involve users using tactical user research to test and iterate products and services during Sprints.\nThe most effective processes build regular user testing into Sprint planning - optimising the solution through development and into\nlive environments. Frequent testing and optimisation can encourage stakeholders to embrace a release early and often approach generating value more quickly.\n    154 Understanding Human-Centred Design\n\nGenerate Value Through Service Design\nService design is the design of services from the perspective of their users (both the consumers of the service and the deliverers of the service). Service design can help develop an entirely new service or improve an existing service.\nA service helps people do something - like being treated for cancer, buying a house, or doing your annual tax return. Service design looks\nat the whole start-to-end process, including waits, channel changes, escalations, and anything that can go wrong in delivering the service.\nIt also designs from front to back - from what users need to do, through the supporting technology and processes, down to the underlying infrastructure, integrations, and legal constraints required to make it\nall work.\nSuccessful services will create value for both the user and the organisation. This is often achieved by identifying the opportunities at the intersection of human desirability, technical feasibility, and commercial viability.\n Understanding Human-Centred Design 155\n\n Figure 6-3: Human-Centred Design\nHuman-Centered Design ensures we start here\nPeople\nDesirability\nWhere successful innovation happens\n    Technology\nFeasibility\nBusiness\nViability\nWhen an organisation embraces service design, multidisciplinary teams are created, bringing together Designers and other professionals, such as marketing, sales, technical systems, product, and legal specialists.\n 156 Understanding Human-Centred Design\n\nThe multidisciplinary team collaborates to analyse, empathise, ideate, and design each interaction between customers and the organisation.\nWe recommend including service design as a critical component of any project involving users, and adhering to the following principles:\n\u25cb Human-centred \u2013 The experience of all the people affected by the service is considered\n\u25cb Collaborative \u2013 Stakeholders from various backgrounds and functions and representative users are actively engaged\n\u25cb Sequential \u2013 The service is visualised and orchestrated as a sequence of interrelated actions\n\u25cb Iterative \u2013 An exploratory, adaptive, and experimental approach is taken, iterating toward implementation\n\u25cb Real \u2013 Needs are researched with users; ideas are prototyped and tested with users\n\u25cb Holistic \u2013 Services are designed to sustainably address the needs of all stakeholders throughout the experience and across the business.", "start_char_idx": 160924, "end_char_idx": 166128, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "38eaa9be-cc39-4337-b5ba-975abb2e7979": {"__data__": {"id_": "38eaa9be-cc39-4337-b5ba-975abb2e7979", "embedding": null, "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21", "node_type": "4", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "7b8ab6f4cd22076034037208ddad5c4e39dec1170ddfde79e3ef7c946fa0a322", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "efe66f06-d804-4777-8575-7a4115123488", "node_type": "1", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "f72f2625a9eb776f1154e9aa9bf21baaf929db1c19cf55a0d229264576cd789b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8a3a5e47-3453-4b06-b303-7e27f4d26e24", "node_type": "1", "metadata": {}, "hash": "31556be12e4dc50db7ed834c0bd69f56384921cbe51bf536ed5d88975e5be7e2", "class_name": "RelatedNodeInfo"}}, "text": "156 Understanding Human-Centred Design\n\nThe multidisciplinary team collaborates to analyse, empathise, ideate, and design each interaction between customers and the organisation.\nWe recommend including service design as a critical component of any project involving users, and adhering to the following principles:\n\u25cb Human-centred \u2013 The experience of all the people affected by the service is considered\n\u25cb Collaborative \u2013 Stakeholders from various backgrounds and functions and representative users are actively engaged\n\u25cb Sequential \u2013 The service is visualised and orchestrated as a sequence of interrelated actions\n\u25cb Iterative \u2013 An exploratory, adaptive, and experimental approach is taken, iterating toward implementation\n\u25cb Real \u2013 Needs are researched with users; ideas are prototyped and tested with users\n\u25cb Holistic \u2013 Services are designed to sustainably address the needs of all stakeholders throughout the experience and across the business.\nIn most cases, users want a quick and easy-to-use product or service that is right first time. Organisations are likely to achieve this by taking a holistic view to identify and improve gaps and inefficiencies in the product or service. A service design blueprint is a key tool used to help organisations achieve this goal.\nIntroduce a Service Design Blueprint\nA service blueprint is a visual operational tool that presents the components of a service in enough detail for stakeholders to analyse, implement, and improve it.\n 157 Understanding Human-Centred Design\n\n Creating the blueprint is a valuable collaborative task that brings together multidisciplinary stakeholders to share insight. The multidisciplinary team produces the blueprint together. A service design blueprint includes user actions, internal team actions, touchpoints, processes, workarounds, and technology interactions. The line of interaction through the middle divides the front stage (what consumers see) and the backstage (what\u2019s happening behind the scenes). A service blueprint may also recognise other relevant in-progress programmes or opportunities that have already been identified.\nFigure 6-4: Service Design Blueprint\nCustomer Journey Map\nPrimary focus is the customer/user\nPrimary focus is the organisation\nService Blueprint\nPhase 3\nSpecific User + Scenario + Goals\n Phase 1\nPhase 2\n      Customer Actions\nCustomer Thoughts & Emotions\nEvidence\nCustomer Actions\nFrontstage\nBackstage\nSupport Processes\n           158\nUnderstanding Human-Centred Design\n\nAn \u2018as is\u2019 blueprint is usually created first to understand the existing state of a service. This will identify the gaps and inefficiencies that should be improved to create more value. It will also identify areas that are performing well that can be celebrated and benchmarked. Creating a \u2018future-state\u2019 blueprint can then follow.\nA service blueprint focuses stakeholders on the real problems to solve. The blueprint will prompt and enable prioritisation activities with key stakeholders, informing a shared roadmap to realise the change required.\nSet Strategy with Evidence-Based Design\nEvidence-based design is the deliberate intention to base strategic and tactical decisions on the best available research evidence to improve outcomes for users. Within a rapidly changing environment, user expectations and behaviours are evolving at pace, making evidence-based design important for organisations to stay relevant and reduce the cost and risk of change.\nThere can be a view within organisations that there is not enough time or budget to gather evidence within the timeframes available. Yet, there are many ways to achieve evidence-based design with minimal budget and time. Guerrilla research, in particular, is a quick, low-cost way of understanding user behaviours and experiences. It is usually done in public spaces and does not require a rigorous recruitment process. Evidence can also be achieved quickly by running user tests with just five users. This provides valuable insight to inform the focused iteration of a product or service. Further tests can then be helpful in subsequent Agile Sprints.\nIt is essential through assurance and governance that insight gained through research is shared with stakeholders to inform commercial and technical strategy. Everyone within an organisation should be\n Understanding Human-Centred Design 159\n\nencouraged to understand the real needs and expectations of both external and internal users. This will lead to a greater level of human-centred organisational maturity.", "start_char_idx": 165181, "end_char_idx": 169688, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8a3a5e47-3453-4b06-b303-7e27f4d26e24": {"__data__": {"id_": "8a3a5e47-3453-4b06-b303-7e27f4d26e24", "embedding": null, "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21", "node_type": "4", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "7b8ab6f4cd22076034037208ddad5c4e39dec1170ddfde79e3ef7c946fa0a322", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "38eaa9be-cc39-4337-b5ba-975abb2e7979", "node_type": "1", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "acf531a3ffaf0d04885ea85052b2be3b30c68d7faf20d16ed45af4123f150183", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2a64de94-2a9f-4b24-9722-51af2f3f6435", "node_type": "1", "metadata": {}, "hash": "e6cc858b85d95e7cf0f487068efee42f4d80b2d2f5de896fe5bfafff616ed2bf", "class_name": "RelatedNodeInfo"}}, "text": "There can be a view within organisations that there is not enough time or budget to gather evidence within the timeframes available. Yet, there are many ways to achieve evidence-based design with minimal budget and time. Guerrilla research, in particular, is a quick, low-cost way of understanding user behaviours and experiences. It is usually done in public spaces and does not require a rigorous recruitment process. Evidence can also be achieved quickly by running user tests with just five users. This provides valuable insight to inform the focused iteration of a product or service. Further tests can then be helpful in subsequent Agile Sprints.\nIt is essential through assurance and governance that insight gained through research is shared with stakeholders to inform commercial and technical strategy. Everyone within an organisation should be\n Understanding Human-Centred Design 159\n\nencouraged to understand the real needs and expectations of both external and internal users. This will lead to a greater level of human-centred organisational maturity.\nStructuring the evidence clearly, for example, using visual tools such as blueprints, journey maps, personas, and roadmaps, will support teams across the organisation to collaborate towards a strategic vision by:\n\u25cb Delivering a framework by which human, technical, and commercial change can be aligned and implemented effectively\n\u25cb Enabling the organisation to prioritise based on the features that deliver the most value\n\u25cb Allowing inter-dependencies between features to be identified, informing allocation of work to Delivery Teams\n\u25cb Providing a basis for estimating the size and scope of changes and capacity planning in the Delivery Teams\n\u25cb Allowing a link back to technical and functional architecture to inform the risk associated with the change\n\u25cb Providing traceability and a mechanism to track the progress of the change through delivery within the context of the problem domain\n\u25cb Adding rigour to the analysis process making it more effective\n\u25cb Providing assurance that the right questions have been asked and the appropriate sources consulted\n\u25cb Documenting in a lightweight manner the decisions that have been taken and the route to arriving at a particular functional solution.\nTime and budget allocated to evidence the real user need will inform an authentic focus on building the right thing, which will increase value for users and the organisation, and the likelihood of innovation.\n 160 Understanding Human-Centred Design\n\nRemove Barriers to Human-Centred Design\nHuman-centred design performs best when it is a shared mindset across an entire organisation. This will often require a culture shift.\nEmbedding enterprise-wide Human-centred design concepts can be challenging, and the process takes time. Traditionally, commercial and business interests have taken a higher priority. This approach can lead to costly mistakes that can be avoided by aligning human, commercial, and technical requirements concurrently. Significant benefits and innovation will be realised when these once siloed groups collaborate to identify opportunities to create value.\nWhile organisational culture is developing, there can be a conflict between user needs and the technical feasibility and commercial viability of addressing those needs. Taking the opportunity to reframe any potential conflict into a positive drive for collaboration and transparency around strategy and prioritisation is a step in the right direction.\nFocusing on outcomes is a great way to elevate the language and conversation towards the value provided by Human-centred design - \u2018who\u2019 and \u2018why\u2019, and the velocity provided by Agile delivery - the \u2018what\u2019 and \u2018how\u2019.\nDeveloping enterprise-wide Human-centred design maturity requires focus on these integrated factors:\n\u25cb Strategy - Strong leadership and commitment at executive level, a healthy budget, roadmap planning, and resource prioritisation\n\u25cb Culture - Active organisational-wide communication and engagement about the benefits, building wide working knowledge, cultivating UX careers and practitioners\u2019 growth\n\u25cb Process - Embedding the systematic use of UX research and design methods into all areas of product development and service design\n Understanding Human-Centred Design 161\n\n\u25cb Outcomes - Intentionally defining and measuring the results produced by user-centred design initiatives. Sharing insights and successes widely across an organisation.\nMany organisations promote themselves as \u2018user first\u2019 without having\na direct dialogue with users. It is essential to educate leaders and decision-makers about the financial and cultural benefits that authentic evidence-based Human-centred design brings.\nHuman-Centred Design Evolution\nHuman-centred design continues to be an essential ingredient of organisational strategy. With continuing advances in technology and human behaviour, leaders and decision-makers have never been more important to building a deep empathy for the people they want to engage. It also helps organisations to become more innovative, flexible, and faster in delivery.\nThe basic expectation an organisation must meet is a functional, usable, reliable solution. Organisations that gain a deeper understanding of users can then develop differentiators around emotion to attract and retain engagement. Human-centred design can elevate an offering above the competition.", "start_char_idx": 168624, "end_char_idx": 174012, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2a64de94-2a9f-4b24-9722-51af2f3f6435": {"__data__": {"id_": "2a64de94-2a9f-4b24-9722-51af2f3f6435", "embedding": null, "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21", "node_type": "4", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "7b8ab6f4cd22076034037208ddad5c4e39dec1170ddfde79e3ef7c946fa0a322", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8a3a5e47-3453-4b06-b303-7e27f4d26e24", "node_type": "1", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "a4b89369b8f4658d5582a841e37af4655777ee483bf4a2f0a2ed9096748acc98", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "061177d0-a846-4e8d-a4c0-e17acc301fa0", "node_type": "1", "metadata": {}, "hash": "92bcf385f8042096ec318def2982d3cefcc635a8fe7b1af654190faa3f778542", "class_name": "RelatedNodeInfo"}}, "text": "Sharing insights and successes widely across an organisation.\nMany organisations promote themselves as \u2018user first\u2019 without having\na direct dialogue with users. It is essential to educate leaders and decision-makers about the financial and cultural benefits that authentic evidence-based Human-centred design brings.\nHuman-Centred Design Evolution\nHuman-centred design continues to be an essential ingredient of organisational strategy. With continuing advances in technology and human behaviour, leaders and decision-makers have never been more important to building a deep empathy for the people they want to engage. It also helps organisations to become more innovative, flexible, and faster in delivery.\nThe basic expectation an organisation must meet is a functional, usable, reliable solution. Organisations that gain a deeper understanding of users can then develop differentiators around emotion to attract and retain engagement. Human-centred design can elevate an offering above the competition.\nEvolving examples of elements that require a Human-centred design mindset and approach are AI, Voice and Virtual/Augmented Reality, all of which are in their infancy and have huge potential to continue to disrupt how organisations and society operates. Users will drive best practices in conversational design, context-driven content, audio cues, and\nvirtual gesturing.\nTo remain relevant, leaders and decision-makers must tap into\nthe mindset of users to find the key to innovation. We encourage organisations to create an ongoing dialogue with internal and external\n 162 Understanding Human-Centred Design\n\nusers, and experiment with technology to secure their relevance in the future.\nAn important area of development in Human-centred design is sustainability. It has long been recognised that design plays a crucial role in ethics. It is now recognised that design also plays a key role in supporting the world to harness a commitment to sustainability, helping organisations to create behavioural change to improve the wellbeing of all people and the environment.\nThe principles of Human-centred design correlate strongly with the behavioural economics concept discussed earlier.\nThe Enterprise Agile Approach\nTo compete in a constantly evolving environment, organisations need\nto operate with focus, flexibility, and speed to bring high quality, differentiated products and services to market. The risk of a laser focus on velocity is that the overarching need to \u2018get something delivered\u2019\ncan lead to experiences that don\u2019t meet real customer needs and fail to deliver value. By integrating Human-centred design and Agile methods within multidisciplinary teams, it is possible to release efficiently with the confidence that the user will have a seamless experience with the new or evolved product or service.\n\u2018Design is not just what it looks and feels like. Design is how it works.\u2019\nSteve Jobs, Entrepreneur and Inventor, 1955-2011\n Understanding Human-Centred Design 163\n\nThe Who & Why of Delivery\nEnterprise Agile focuses on the \u2018what\u2019 and the \u2018how\u2019 of delivery, and aims to increase delivery velocity by breaking up the planning and scope into smaller units. Human-centred design looks at the \u2018who\u2019 and the \u2018why\u2019 of a problem. New ideas are generated through a series of user-focused exercises that culminate in identifying a solution. Human-centred design aims to create value for the user and the organisation by focusing on users\u2019 needs and asking questions about the specific problem to solve.\nEnterprise Agile and Human-centred design are complementary mindsets and methods that ensure user stories have strong acceptance criteria. The \u2018so that\u2019 (the \u2018why\u2019) part of the story is as well understood by Agile Teams as the \u2018how\u2019.\nSuccessful Agile Teams will include Human-centred design disciplines. Human-centred Designers (including user experience, user interface, content design) will challenge the team to identify what they know rather than what they think they know. Questions might include:\n\u25cb Did you begin Discovery by interacting with your users and understanding their problem?\n\u25cb If yes, how many users did you interview? Is this number enough, or should you speak with more users?\n\u25cb Is your problem well defined into an actionable problem statement?\n\u25cb Is it possible to further break down your problem into sub-problems?\n\u25cb When was the last time you revisited your problem statement?\nThis attention to detail can mean backlog refinement takes longer, but the benefits include better stories, greater user understanding, and more value delivered faster. Human-centred design can be challenging to\n 164 Understanding Human-Centred Design\n\nintegrate seamlessly into established delivery cultures, but the benefits shouldn\u2019t be underestimated. Human-centred design will influence epics, features, and stories. It will inform prioritisation and feedback at a strategic and tactical level.\nThe Right Problem to Solve\nHuman-centred design is a mindset and method relevant during all phases of the Agile delivery cycle, including Feasibility, Discovery, and Delivery.", "start_char_idx": 173007, "end_char_idx": 178098, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "061177d0-a846-4e8d-a4c0-e17acc301fa0": {"__data__": {"id_": "061177d0-a846-4e8d-a4c0-e17acc301fa0", "embedding": null, "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21", "node_type": "4", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "7b8ab6f4cd22076034037208ddad5c4e39dec1170ddfde79e3ef7c946fa0a322", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2a64de94-2a9f-4b24-9722-51af2f3f6435", "node_type": "1", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "310fab20f99326232b1c314673e270e3f7077df167e513528dd5c5f5ed2c8be0", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4ecad45f-8da3-4338-bb37-717c76c05f7a", "node_type": "1", "metadata": {}, "hash": "b6d9b4780c75bf77b14ca00aa2518bfad33106477ed96e78ecc288d4d484a45e", "class_name": "RelatedNodeInfo"}}, "text": "\u25cb If yes, how many users did you interview? Is this number enough, or should you speak with more users?\n\u25cb Is your problem well defined into an actionable problem statement?\n\u25cb Is it possible to further break down your problem into sub-problems?\n\u25cb When was the last time you revisited your problem statement?\nThis attention to detail can mean backlog refinement takes longer, but the benefits include better stories, greater user understanding, and more value delivered faster. Human-centred design can be challenging to\n 164 Understanding Human-Centred Design\n\nintegrate seamlessly into established delivery cultures, but the benefits shouldn\u2019t be underestimated. Human-centred design will influence epics, features, and stories. It will inform prioritisation and feedback at a strategic and tactical level.\nThe Right Problem to Solve\nHuman-centred design is a mindset and method relevant during all phases of the Agile delivery cycle, including Feasibility, Discovery, and Delivery. It promotes a continual focus on:\n\u25cb Understanding the problem from the users\u2019 point of view\n\u25cb Designing the right solution, with significant influence from technical feasibility\n\u25cb Ensuring the solution is commercially viable and sustainable.\nTraditionally, there has been a focus on implementing a solution that meets technical or organisational requirements instead of the user need. This can result in products and services with unusable or ignored features that frustrate users.\nHuman-centred design uses divergent and convergent techniques to understand a problem from the users\u2019 perspective, design a solution, and deliver that solution to the market. The double diamond model has been used to guide this process since the British Design Council popularised it in 2005. There are now many models that support teams with the Human-centred design method and mindset.\n Understanding Human-Centred Design 165\n\n Figure 6-5: Double Diamond, adapted from the Design Council\nTriggers\nUnderstand audience needs\nDefine the right Define the right\nBuild the right experience\nDeliver\nIterate to meet needs\nproblem\nsolution\nResearch\nDesign\nIdeate to meet needs\nIdentified opportunities\nStrategy and MVP\nAn iteration of the Design Council\u2019s double diamond model in 2021 recognises that the process is circular and that regular connection and communication outside the Agile Team are essential to maintaining success. It also recognises the importance of sustainability.\nThe first diamond focuses on exploring and framing the problem space, identifying the right problem to solve through divergent and convergent thinking. The second diamond is focused on creating and delivering\nthe right solution in the right way. While real user problems are being identified and solutions developed during the process, the steps may jump forwards and backwards. Reverting is often a result of further user insight uncovered, making refinement or skipping forward necessary due to relevant insight being already available and interpreted.\n166 Understanding Human-Centred Design\n       Diverge Audience Insight\nDiverge Ideate\nDiverge Agile Development\n\nHuman-Centred Design Artefacts\nArtefacts should be transparent, accessible by all teams and evolve\nas new insight is identified. The Agile Manifesto states a preference\nfor working software over comprehensive documentation. The Human-centred design mindset leans towards a preference for visual documentation. Four Agile principles aid in producing only artefacts that record or disseminate information:\n1. Document what the user needs\n2. Produce the artefacts that support teams during the delivery of the change\n3. Document what work was done to support the change\n4. Create perpetual \u2018working\u2019 versions that evolve with change.\nHuman-centred design and Agile are collaborative methods. The Agile Team and stakeholders will use the visual artefacts and tools produced during research and collaborative workshops to set the vision, identify problems, and prioritise and test solutions. There are many artefacts and tools that can be produced. Here are a few of our favourites:\nPersonas/Archetypes\nPersonas and archetypes are research-based fictional characters representing user groups and act as visual tools for easier comprehension. High-priority persona types and corresponding user needs, often written as a narrative, will inform design and can be used to support strategic and tactical prioritisation.\n Understanding Human-Centred Design 167\n\nJourney Mapping and Service Blueprinting (Current State)\n\u2018As is\u2019 or current state user journey maps and service blueprints visualise the users\u2019 physical and emotional interaction with an organisation across touchpoints. Identifying the current state enables the clear identification of gaps and inefficiencies in the current offering. Further information on journey mapping and service blueprinting is provided above.\nWireframe\nA wireframe is a static, low-fidelity visual representation of different layouts that form a product. Wireframes are used to communicate structure, content, and functionality, helping Delivery Design Teams create a shared understanding of a future vision.", "start_char_idx": 177116, "end_char_idx": 182261, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4ecad45f-8da3-4338-bb37-717c76c05f7a": {"__data__": {"id_": "4ecad45f-8da3-4338-bb37-717c76c05f7a", "embedding": null, "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21", "node_type": "4", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "7b8ab6f4cd22076034037208ddad5c4e39dec1170ddfde79e3ef7c946fa0a322", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "061177d0-a846-4e8d-a4c0-e17acc301fa0", "node_type": "1", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "e5b5a029be4d9c4def7cf6e29e9d20e677a9493c8789298be890b841cc56cdac", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "fbb530a1-b76e-461c-b22d-278419929366", "node_type": "1", "metadata": {}, "hash": "80bba736459ab7964cfe65ddf6ac3e8d342afd963f5a9a4eb89da3b67c0b4d8f", "class_name": "RelatedNodeInfo"}}, "text": "High-priority persona types and corresponding user needs, often written as a narrative, will inform design and can be used to support strategic and tactical prioritisation.\n Understanding Human-Centred Design 167\n\nJourney Mapping and Service Blueprinting (Current State)\n\u2018As is\u2019 or current state user journey maps and service blueprints visualise the users\u2019 physical and emotional interaction with an organisation across touchpoints. Identifying the current state enables the clear identification of gaps and inefficiencies in the current offering. Further information on journey mapping and service blueprinting is provided above.\nWireframe\nA wireframe is a static, low-fidelity visual representation of different layouts that form a product. Wireframes are used to communicate structure, content, and functionality, helping Delivery Design Teams create a shared understanding of a future vision. Wireframes are often used as a precursor to prototypes.\nPrototype\nThere are many kinds of prototypes to suit all timeframes and budgets. There are low-fidelity paper prototypes which are typically hand-drawn sketches of the intended solution.\nMid-fidelity prototypes are visually complete representations of solutions but usually not functional. High-fidelity prototypes are visually complete and interactive models which users can explore.\nIntegrating Human-Centred Design\nBoth Human-centred design and Agile are fluid methods providing guidance rather than instruction. It is important to remember that \u2018one size does not fit all\u2019 in terms of organisational transformation, user need, or products and services to deliver. With this in mind, it is helpful\n 168 Understanding Human-Centred Design\n\nto take a Lean approach, and use the best elements of both methods to deliver the right solution properly within the specific landscape. In general, we recommend that organisations or departments integrate Human-centred design within Enterprise Agile. This can be achieved by following this process:\n\u25cb Engagement - Start small, integrating one or two teams. Focus\non the quick wins, the high-value, low-risk opportunities to gain experience using Human-centred design and Agile together. As the capability matures, expand to more challenging initiatives\n\u25cb Adoption - Create more cross-functional/multidisciplinary teams\nto design and develop solutions. The teams should promote frequent collaboration across disciplines and frequent collaboration with users\n\u25cb Sustainability - Collaboration and co-creation are essential to achieve successful and sustainable integration. Teams in supporting functions, such as legal and finance, will also need to adapt to\nnew collaborative ways of working. If an established Technical Development Team integrates with Human-centred design,\nprovide training in the value of empathy, definition, and ideation to achieve the right balance of design and development. Embed the understanding that Human-centred design is relevant during all phases of the delivery cycle\n\u25cb Success - Full integration will result in a clear understanding across all Agile Teams of the \u2018who\u2019 and the \u2018why\u2019 of what they are delivering as well as the \u2018what\u2019 and the \u2018how\u2019.\nJust like Agile, Human-centred design is a continuous effort. The mindset to promote is to continually gather user insight to identify changing requirements and evolve products incrementally. Users and their insight are integral to the product and service development process, and critical to the successful convergence of Human-centred design and Agile methodologies.\n Understanding Human-Centred Design 169\n\n Key Points\n1. Human-centred design is a mindset and a method. When it is disconnected from product design and engineering, or applied retrospectively, its impact is severely compromised.\n2. Human-centred design without the user\nis a surprisingly common mistake. If you genuinely want to understand the problem, there is no avoiding talking directly to users.\n3. Well-structured visual information beats duplicated and daunting volumes of data. Human-centred design artefacts that are minimal, memorable, and shareable will significantly impact teams and stakeholders.\n4. Too often, organisations fail to apply what they learn. Don\u2019t disregard user insight due to uninvestigated technical barriers, resource constraints, or personal opinion. The users should set the vision; without this approach, the final result will be compromised.\n5. Design experiences that are grounded\nin psychology and with regular testing. Prototypes have the added benefit of helping stakeholders to imagine the end goal.\n 170 Understanding Human-Centred Design\n\n Chapter 07\nCrafting the Product Increment\n\nNew increments of functionality are periodically released to users by the Product Team. This increment may consist of technological enhancements or new features. Irrespective of delivery method, the new features help evolve the product in ways that improve the experience for the user, address an unmet need, and add value for the customer and to the organisation.\nHistorically, releasing increments of change carried significant overhead. This typically builds up in an organisation over time. Change carries a perceived or actual risk, and processes are introduced to counter this.", "start_char_idx": 181364, "end_char_idx": 186618, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fbb530a1-b76e-461c-b22d-278419929366": {"__data__": {"id_": "fbb530a1-b76e-461c-b22d-278419929366", "embedding": null, "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21", "node_type": "4", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "7b8ab6f4cd22076034037208ddad5c4e39dec1170ddfde79e3ef7c946fa0a322", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4ecad45f-8da3-4338-bb37-717c76c05f7a", "node_type": "1", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "0d1e2faaa5fcb735ec5fa5942677b8fab5c691bbc318a661db5c281953cba70a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "cc4c8936-1eff-414d-a833-44b6157396ea", "node_type": "1", "metadata": {}, "hash": "a664d1e3800b94dbb15023a6cdbb1eedaa44a3e900d45694dab09720167d15cb", "class_name": "RelatedNodeInfo"}}, "text": "Don\u2019t disregard user insight due to uninvestigated technical barriers, resource constraints, or personal opinion. The users should set the vision; without this approach, the final result will be compromised.\n5. Design experiences that are grounded\nin psychology and with regular testing. Prototypes have the added benefit of helping stakeholders to imagine the end goal.\n 170 Understanding Human-Centred Design\n\n Chapter 07\nCrafting the Product Increment\n\nNew increments of functionality are periodically released to users by the Product Team. This increment may consist of technological enhancements or new features. Irrespective of delivery method, the new features help evolve the product in ways that improve the experience for the user, address an unmet need, and add value for the customer and to the organisation.\nHistorically, releasing increments of change carried significant overhead. This typically builds up in an organisation over time. Change carries a perceived or actual risk, and processes are introduced to counter this. This \u2018release tax\u2019 means releases occur less frequently, become bigger and are inherently riskier. As a result, the problem is perpetuated. Continuous Delivery and DevOps techniques help organisations break free from this trap.\nConcepts\nThe Product Increment\nThe unit of change is the Product Increment. This is the delta that gets released to users following implementation by the Product Team. A Product Increment may be small and consist of a single simple change or be much larger and contain many changes.\nWhen making a change to a product, it is important to consider the full stack of elements required and to release this as a cohesive unit. Implementing the change should involve releasing the technology and supporting processes simultaneously.\n 172 Crafting the Product Increment\n\n Figure 7-1: Full Stack Product Increments\n Organisation Change\n Service Wrap\n Application\n Technology\n Data\n Organisation Change\n Service Wrap\n Application\n Technology\n Data\n Organisation Change\n Service Wrap\n Application\n Technology\n Data\n A cohesive Product Team will work to ensure that an increment of change to the product is inclusive of all components required to provide value for users and the organisation.\nThis full stack of change incorporates data, technology (application\nand infrastructure), Service Wrap, and organisation change. This can\nbe a challenge when the Agile technology delivery meets the non-Agile world of people change, recruitment, training, etc. This is where the real breakthrough in organisational Agility can occur.\n Crafting the Product Increment 173\n\nSuccess here is easier to obtain for digital products and systems of engagement than for systems of record. Well-structured analysis around user needs and a compelling user experience will minimise the need\nfor areas such as user training. The layers of the full stack are explored further below.\nOrganisation Change Layer\nDeals with the business impact created through updates to the technology components of the product and/or changes to manual, non-technology-driven product features such as fulfilment and logistics.\nWhere a new user feature is realised in both technology and organisational change, these activities should be aligned in the Product Increment.\nService Wrap Layer\nDefines the supporting people, processes, and technology to \u2018run\u2019 the technology product in line with user expectations and agreed service levels.\nChanges to the underlying technology infrastructure and application should result in corresponding and fully aligned changes to the supporting processes.\nApplication Layer\nThe software required to realise the features of the product that\nare delivered through technology. Changes here are taken from the prioritised backlog of features identified through structured analysis.\n 174 Crafting the Product Increment\n\nInfrastructure Layer\nThe underlying platform on which the application software resides. Rapid Agile change is easier to obtain here when using software-defined infrastructure in some form of Cloud solution.\nThe underlying configuration management database (CMDB) should evolve incrementally in sync with the application software.\nData Layer\nData is a frequently overlooked component of change. This must be considered. Changes to the data model, reference, data, test data, and production data must be factored into the change.\nFailure to test a change with production data is a common cause of difficulties in getting a technology change to function properly.\nAlternative Modes of Operation\nThere are two common ways of delivering a Product Increment. Firstly, each change can be considered in isolation and released as required. Secondly, several Features, perhaps related under a theme, can be delivered together using a Sprint pattern.\nThe mode used typically depends on the volume of change, size of the team, or, more significantly, the maturity of the product. Where Feature change is low in a mature product and changes are typically defect related, these are more likely to be fixed and released without a\nSprint pattern.\n Crafting the Product Increment 175\n\nDuring the development of a Minimum Viable Product, or making significant or several feature changes, a Sprint pattern is more useful.", "start_char_idx": 185579, "end_char_idx": 190845, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cc4c8936-1eff-414d-a833-44b6157396ea": {"__data__": {"id_": "cc4c8936-1eff-414d-a833-44b6157396ea", "embedding": null, "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21", "node_type": "4", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "7b8ab6f4cd22076034037208ddad5c4e39dec1170ddfde79e3ef7c946fa0a322", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "fbb530a1-b76e-461c-b22d-278419929366", "node_type": "1", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "5684d3e2ffc81d5f05b1c0ba4f83b308f1a452caa24f12b21af3810df76432ec", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "69ac8749-aad5-488c-9dc1-1c532b9fbacf", "node_type": "1", "metadata": {}, "hash": "b8ab1c6f25090be150313b109dbbaa0d615142f246ef5ce33abfe9f799f97c3f", "class_name": "RelatedNodeInfo"}}, "text": "Changes to the data model, reference, data, test data, and production data must be factored into the change.\nFailure to test a change with production data is a common cause of difficulties in getting a technology change to function properly.\nAlternative Modes of Operation\nThere are two common ways of delivering a Product Increment. Firstly, each change can be considered in isolation and released as required. Secondly, several Features, perhaps related under a theme, can be delivered together using a Sprint pattern.\nThe mode used typically depends on the volume of change, size of the team, or, more significantly, the maturity of the product. Where Feature change is low in a mature product and changes are typically defect related, these are more likely to be fixed and released without a\nSprint pattern.\n Crafting the Product Increment 175\n\nDuring the development of a Minimum Viable Product, or making significant or several feature changes, a Sprint pattern is more useful.\nFor the bulk of the work we do, we find a Sprint pattern and the associated events very useful and, in the case of any significant new product development, essential.\nTable 7-1: Pattern Alternatives\n Mode\n   Characteristic\n   Usage\n   Sprint Container\n \u25cb Work for each\nSprint is planned and estimated upfront\n\u25cb Activities around each Sprint to wrap up and feedback on team performance\n\u25cb Typically aligned to the Scrum framework\n \u25cb Delivery of several Feature changes or an MVP\n No Container\n   \u25cb Work taken as required into Delivery Teams\n\u25cb Low ceremony based around moving tasks through a small number of discrete phases\n\u25cb Typically aligned to the Kanban method\n   \u25cb Delivery of small, discrete feature changes or defects\n   176 Crafting the Product Increment\n\nBJSS Opinion Always Use the Process\nA key part of the power of Agile is the feedback loop - an ability to fail fast, learn, and make many minor course corrections rather than storing up and having to deal with a big problem. The Sprint events we describe in this chapter embody this thinking. The use of the Sprint enables the adoption of Lean thinking and a learning loop as illustrated in Figure 7-2.\nTo get the benefit of the activities required to plan, monitor, and control a Sprint, they must be undertaken systematically. All too often when we are engaged in project or programme recovery, we see that these basics have slipped in some way, such as:\n\u25cb Retrospectives are cancelled because the team is too busy\n\u25cb Incorrect participation in planning sessions\n\u25cb Show and Tell meetings moved out\n\u25cb Sprints extended.\nGet into the rhythm of Sprint delivery and stick to it!\n Crafting the Product Increment 177\n\n Figure 7-2: Lean Thinking Learning Loop\n Learn\nAdjust, Decide\n    178\nCrafting the Product Increment\nMeasure\nSuccess Rates\nBuild\n& Release Frequently\n\nThe Enterprise Agile Approach\nStarting and Finishing a Story\nWe want to be confident that, in developing a Product Increment, it is complete on delivery and meets quality expectations. To achieve this and run a productive delivery pipeline relies upon understanding what \u2018good\u2019 looks like, both before and after implementing the change.\nCommonly used techniques for achieving this include the use of a Definition of Ready and a Definition of Done. These terms should be defined and communicated in such a way that the whole team recognises them and can call out any deviations they observe.\nFailure to be strong around the implementation of these criteria can easily result in the wrong change being delivered or delivered to a poor level of quality. Never, ever, no matter how tempting, fudge the Definition of Done. Change is not done until it is done! Significant issues will result from watering down the Definition of Done. Transparency over delivery progress will be lost and, in our experience, the team rarely catches up.\nUsing a Definition of Ready ensures that requirements, usually expressed as user stories, are completed to a high standard and provide a strong basis for estimating and tracking against. Teams often use the acronym INVEST to provide an effective and easy to remember Definition of Ready. This definition may be modified where required, provided that all the team sign up to it.\n Crafting the Product Increment 179\n\nTable 7-2: INVEST acronym for Definition of Ready\n Letter\n  Definition\n  Description\n   I\n  Independent\n  Isolated from other stories\n N\n  Negotiable\n  Will be refined during delivery\n V\n  Valuable\n  Adds value to the product and organisation\n E\n  Estimable\n  Can be estimated\n S\n   Small\n   Will fit into a Sprint\n   T\n  Testable\n  Has acceptance criteria\n  Similarly, a Definition of Done is produced in agreement with the team and clearly communicated. Implementing a good Definition of Done can be problematic.", "start_char_idx": 189862, "end_char_idx": 194631, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "69ac8749-aad5-488c-9dc1-1c532b9fbacf": {"__data__": {"id_": "69ac8749-aad5-488c-9dc1-1c532b9fbacf", "embedding": null, "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21", "node_type": "4", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "7b8ab6f4cd22076034037208ddad5c4e39dec1170ddfde79e3ef7c946fa0a322", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "cc4c8936-1eff-414d-a833-44b6157396ea", "node_type": "1", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "c8190eea4cbe16e61ff50755d9f12640c879ce6230556009a54acbccdd58f174", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "fc8593ab-ee05-41fb-9933-7245144c40e9", "node_type": "1", "metadata": {}, "hash": "08dca5884d8cd81c902aa7e70868f1561a3eb6818a428332466f3e514f6a08ab", "class_name": "RelatedNodeInfo"}}, "text": "Teams often use the acronym INVEST to provide an effective and easy to remember Definition of Ready. This definition may be modified where required, provided that all the team sign up to it.\n Crafting the Product Increment 179\n\nTable 7-2: INVEST acronym for Definition of Ready\n Letter\n  Definition\n  Description\n   I\n  Independent\n  Isolated from other stories\n N\n  Negotiable\n  Will be refined during delivery\n V\n  Valuable\n  Adds value to the product and organisation\n E\n  Estimable\n  Can be estimated\n S\n   Small\n   Will fit into a Sprint\n   T\n  Testable\n  Has acceptance criteria\n  Similarly, a Definition of Done is produced in agreement with the team and clearly communicated. Implementing a good Definition of Done can be problematic. This should be an auditable checklist that is sufficiently exhaustive to safeguard delivery and quality without being too unwieldy.\n\u2018Done\u2019 is often an emotive point. Ultimately, a change is not done until it is in the hands of users. This is where some teams find it useful to have multiple layers of Definition of Done that map to the relevant endpoints for particular activities. It is essential to be clear on expectations around the Definition of Done with stakeholders. Nobody likes an unpleasant surprise and to be told something is finished when it isn\u2019t.\nWe find it useful to link the Definition of Done back to the V-model. To avoid complexity and ensure proper Agility, we believe that there can be no more than three levels of Definition of Done. This is mapped to a simplified V-model in Figure 7-3.\n 180 Crafting the Product Increment\n\n  Figure 7-3: Layering of the \u2018Definition of Done\u2019\nSN\n      Investment\nValue\nD2\n      User Need\nAcceptance Criteria\nD1\n    Story\nD0\n Crafting the Product Increment 181\n\nThe Definition of Done at each layer corresponds to satisfactorily meeting the criteria a particular group has of the change.\nD0 is likely to be more technical and include things the team wishes to achieve to ensure product quality and maintainability. An outline of the layered definitions is provided in Table 7-3.\nTable 7-3: Layered \u2018Definition of Done\u2019\n Layer\n   Done\n   Typical Definition\n   D0\n  To the satisfaction of the Product Team\n  The team has completed the delivery of the story, tested it to satisfaction and updated associated documentation\n   D1\n To the satisfaction of the specifying user\n The story has been tested and accepted by the broader organisation, and is deemed to meet the acceptance criteria\n D2\n   Released to the user community\n   The story has been released and is in use across the user community. Value can be generated for the organisation\n   182 Crafting the Product Increment\n\nSprint Delivery Patterns\nThe use of Sprints sets the delivery cadence, with Sprint events taking place at the start, during, and at the end of a Sprint. We are often asked about the optimum Sprint length. The team needs time to deliver stories that are meaningful to the user, but Sprints cannot be too\nlong otherwise the benefits of the process are lost. In our experience, anything longer than four weeks is too long, and anything less than a week is too short. Our default position is for two-week Sprints.\nThe objective of any Sprint is to complete the planned user stories consistent with the Definition of Done. For small-scale changes, this will often mean that the solution is ready to go into production.\nOur experience has shown that, for larger initiatives and in larger organisations, it is often not practical to achieve this in the short term. As a result, for larger-scale change initiatives, there are likely to be further activities to be concluded to wrap up the release and get it into production. In these cases, it should be the ambition of the team to \u2018extend\u2019 their Definition of Done to include more of the activities that enable a Product Increment to be released.\nAs far as possible, the activities to make the stories delivered in a Sprint ready for live should be undertaken in the Sprint to avoid a Waterfall-style endgame. A release will only take place when there is\na meaningful Product Increment that adds value, and this may take more than one Sprint to achieve. It can take many Sprints to get to the point of an initial Minimum Viable Product release. In this situation, we recommend that the path to live is still automated and rehearsed to avoid back-loaded risk.\n Crafting the Product Increment 183\n\n Figure 7-4: Sprint Delivery Pattern\nRelease Sprint\nRelease Sprint\nIn the example in Figure 7-4, we have identified a theoretical Sprint delivery pattern in which a Product Increment is released every three Sprints.", "start_char_idx": 193889, "end_char_idx": 198519, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fc8593ab-ee05-41fb-9933-7245144c40e9": {"__data__": {"id_": "fc8593ab-ee05-41fb-9933-7245144c40e9", "embedding": null, "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21", "node_type": "4", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "7b8ab6f4cd22076034037208ddad5c4e39dec1170ddfde79e3ef7c946fa0a322", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "69ac8749-aad5-488c-9dc1-1c532b9fbacf", "node_type": "1", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "02f43f9d6fa54c30b63de87bb10b448ae8b7d15dee464c622934f45bb3862308", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e71812e5-bfd4-4901-a223-161467c9ace7", "node_type": "1", "metadata": {}, "hash": "af957bc0a2a738706137cdf7b2b01607b57667febaccaab24b71c39a1bb0254f", "class_name": "RelatedNodeInfo"}}, "text": "In these cases, it should be the ambition of the team to \u2018extend\u2019 their Definition of Done to include more of the activities that enable a Product Increment to be released.\nAs far as possible, the activities to make the stories delivered in a Sprint ready for live should be undertaken in the Sprint to avoid a Waterfall-style endgame. A release will only take place when there is\na meaningful Product Increment that adds value, and this may take more than one Sprint to achieve. It can take many Sprints to get to the point of an initial Minimum Viable Product release. In this situation, we recommend that the path to live is still automated and rehearsed to avoid back-loaded risk.\n Crafting the Product Increment 183\n\n Figure 7-4: Sprint Delivery Pattern\nRelease Sprint\nRelease Sprint\nIn the example in Figure 7-4, we have identified a theoretical Sprint delivery pattern in which a Product Increment is released every three Sprints. This pattern identifies the use of two special-purpose Sprints\n- Sprint 0 and the Release Sprint are used to achieve particular aims aside from Feature delivery. Where a release does not occur every Sprint, it may be necessary for a Release Sprint to be used to bring together non-Agile workstreams and activities, such as organisation change, and less Agile technology delivery of back-office systems in a multi-modal technology landscape.\n184 Crafting the Product Increment\n   S0\n  S1\n  S2\n  S3\n  S4\n  S5\n  S6\n  Release\nRelease\n\nUse of Special Sprints\nSprint 0\nThe first Sprint of technology delivery is a special purpose Sprint to prepare the ground for effective delivery in subsequent Sprints. In essence, Sprint 0 bootstraps and primes the delivery pipeline. On large-scale change initiatives, earlier phases of risk reduction, such as Discovery, may have already built the delivery pipeline to produce architectural PoCs. In this case, Sprint 0 will focus on making the delivery pipeline production quality and able to scale for use by the full team.\nIt is useful to build a set of technical stories with acceptance criteria to define the activities of Sprint 0, just as you would for any other feature Sprint. Whilst the specific technical tasks of a Sprint 0 will vary by product and technology stack, we have identified some key goals\nof a Sprint 0 below. In each case, as with any user story, it is worth identifying and recording the customer value that each technical story will bring, be it security, performance, quality, or anything else relevant to the product in question.\n1. Agile lifecycle tooling and workflow established\n2. Code quality dashboard and static analysis tools installed and configured\n3. Unit test framework established\n4. Continuous Integration (software build) tooling installed and configured\n5. Engineer code (desktop) environment established\n6. Basic test platform available\n7. Automated deployment script started\n8. Team onboarding guidance developed (technical and product orientation)\n Crafting the Product Increment 185\n\n9. Delivery metrics, collation and reporting established\n10. Technical governance process in place.\nRelease Sprints\nA Release Sprint is a special vehicle for wrapping up change and getting it into the hands of users. The aim should always be to deliver production-ready software after each Sprint. There are some occasions where additional activities are required, such as final compliance steps like mobile app store verification, integration with non-Agile work streams, or alignment with certain organisational change activities.\nIn these situations, such work can be done in parallel to feature Sprints. Or, where the effort required may be considerable, the team can be given time away from feature delivery to focus on release activity. The use of Release Sprints cannot be mandated by any particular rules; it is a useful tool to consider when delivering complex products and change across the organisation.\nThe Practices of Effective Sprints\nDay one and day ten of a Sprint will not necessarily be the same. There is a pattern to a Sprint that is required to ensure successful high-quality delivery of change. Specific activities are required to plan, execute, control, and wrap up a Sprint.\nA small number of key activities make a Sprint successful. In our view, all are essential to ensure productive, high-quality delivery, manage expectations, and avoid surprises.", "start_char_idx": 197582, "end_char_idx": 201961, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e71812e5-bfd4-4901-a223-161467c9ace7": {"__data__": {"id_": "e71812e5-bfd4-4901-a223-161467c9ace7", "embedding": null, "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21", "node_type": "4", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "7b8ab6f4cd22076034037208ddad5c4e39dec1170ddfde79e3ef7c946fa0a322", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "fc8593ab-ee05-41fb-9933-7245144c40e9", "node_type": "1", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "ec7cdb96ca76b725b5f858e43d7aeb472fc2c9c658aafa914e2706376b44b334", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9e955de3-0d21-4e8d-b11e-044a037226f2", "node_type": "1", "metadata": {}, "hash": "dec1e8196342c7b4b85ecd845e051be112bb54fd769d8ce60cedb1bb438406a7", "class_name": "RelatedNodeInfo"}}, "text": "In these situations, such work can be done in parallel to feature Sprints. Or, where the effort required may be considerable, the team can be given time away from feature delivery to focus on release activity. The use of Release Sprints cannot be mandated by any particular rules; it is a useful tool to consider when delivering complex products and change across the organisation.\nThe Practices of Effective Sprints\nDay one and day ten of a Sprint will not necessarily be the same. There is a pattern to a Sprint that is required to ensure successful high-quality delivery of change. Specific activities are required to plan, execute, control, and wrap up a Sprint.\nA small number of key activities make a Sprint successful. In our view, all are essential to ensure productive, high-quality delivery, manage expectations, and avoid surprises.\n 186 Crafting the Product Increment\n\n  Figure 7-5: Anatomy of a Sprint\nDaily Stand-ups Daily Stand-ups Daily Stand-ups\nCrafting the Product Increment\n187\n   Plan N+2\nPlan N+1\nPlan N\n  SprintN-1\n  SprintN\n  SprintN+1\n      Show and Tell N-1 Retrospective N-1\nShow and Tell N Retrospective N\nShow and Tell N+1 Retrospective N+1\n\nPlanning\nThe purpose of the Sprint planning session is to agree on the work that will be delivered by the team in the upcoming Sprint. This is usually achieved by taking a set of stories that meet the Definition of Ready into the next Sprint. These meetings usually include the whole Delivery Team and the Product Owner. The team works through the prioritised product backlog and receives any clarifications on user needs from the Product Owner and Analysts.\nA key part of the planning process is estimating the stories taken into the Sprint and decomposing them into the relevant tasks. In Chapter\n5, we discussed the estimation process used during Discovery. At that stage, blind estimation techniques can be useful, however, at Sprint planning, we recommend consensus-based estimation. Teams may use a form of Agile planning poker to arrive at estimates. Using this method, the story is discussed, and each member of the team offers their estimate. Sometimes, this is done by showing a card from a set with the Fibonacci sequence numbers on them.\nThe advantage of this estimation technique is that it flushes out unknowns and information that not all team members might have. Not only does it support knowledge transfer across the team, but it is also likely to result in better estimates.\nFor this session to be effective, some work will have to be done in advance by Analysts with the team to ensure that the candidate stories are suitably elaborated to be developed and meet the Definition of Ready. In addition, Analysts and Team Leads will be working ahead by one or two Sprints to manage any dependencies with the leadership functions to ensure the story is independent of others.\nWorking ahead of the Sprint planning process may also throw up some design work and decisions. Where necessary, these should be taken to the design authority before Sprint planning. When filling a Sprint with\n 188 Crafting the Product Increment\n\nstories, in some cases it may be prudent to include capacity for defects and support incidents.\nThe output of the Sprint planning meeting should include:\n1. The Goal of the Sprint - The goal defines why the Sprint is valuable to customers or stakeholders with an interest in the product\n2. The Sprint Backlog - The set of estimated prioritised stories for delivery in the Sprint, as well as a plan for delivering them as part of the next product increment\n3. Quantifiable Spare Capacity (when required) - To handle defects and support incidents coming through that need to be addressed by the Sprint\n4. A Commitment to Deliver - All parties involved offer their support for the delivery of the Sprint backlog; this includes external dependencies that may need to be secured by the Leadership Team.\nDaily Stand-up\nThe daily Stand-up is the heartbeat of the Product Team. We believe it applies equally well to Delivery and Service Teams. Each team will run its own Stand-up. In a Product Team of multiple teams, each Team Lead will get together and run a Team Lead Stand-up.\nThe objectives of the daily Stand-up are to ensure that:\n1. Progress to the Sprint goal is reviewed and the Sprint backlog is adjusted as necessary\n2. Any blockers are identified and quickly addressed or escalated\n3. A plan for the next day of work is agreed upon by the team.\nTo meet these simple objectives, the format is kept clear and focused.\n Crafting the Product Increment 189\n\nThe team can use any structure or techniques they want to conduct the daily Stand-up so long as they emphasise the team\u2019s progress towards the Sprint goal. This encourages focus and supports self-management.", "start_char_idx": 201118, "end_char_idx": 205890, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9e955de3-0d21-4e8d-b11e-044a037226f2": {"__data__": {"id_": "9e955de3-0d21-4e8d-b11e-044a037226f2", "embedding": null, "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21", "node_type": "4", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "7b8ab6f4cd22076034037208ddad5c4e39dec1170ddfde79e3ef7c946fa0a322", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e71812e5-bfd4-4901-a223-161467c9ace7", "node_type": "1", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "9a2cbfc1d4baa3dc819078f6b7835912e47056210d36b858c1936feb5d44d730", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8c74cadf-a185-4b5e-91ad-5aaa82a1e85f", "node_type": "1", "metadata": {}, "hash": "a1153bcb4d547259474178f4d60c5142f6d7c0faf1a06165775df96618ac1364", "class_name": "RelatedNodeInfo"}}, "text": "Daily Stand-up\nThe daily Stand-up is the heartbeat of the Product Team. We believe it applies equally well to Delivery and Service Teams. Each team will run its own Stand-up. In a Product Team of multiple teams, each Team Lead will get together and run a Team Lead Stand-up.\nThe objectives of the daily Stand-up are to ensure that:\n1. Progress to the Sprint goal is reviewed and the Sprint backlog is adjusted as necessary\n2. Any blockers are identified and quickly addressed or escalated\n3. A plan for the next day of work is agreed upon by the team.\nTo meet these simple objectives, the format is kept clear and focused.\n Crafting the Product Increment 189\n\nThe team can use any structure or techniques they want to conduct the daily Stand-up so long as they emphasise the team\u2019s progress towards the Sprint goal. This encourages focus and supports self-management.\nIt is the job of the Team Lead to control the Stand-up and make sure that any debate is taken away and continued outside the meeting. Typically, the Stand-up will not take any longer than 10 minutes, and is usually best conducted first thing in the morning when the team arrive \u2013 after they have made a cup of coffee. They are called Stand-ups for\na reason - these sessions should never be conducted seated in a meeting room!\nShow and Tell\nThe Show and Tell is the end-of-Sprint ceremony for wrapping up the delivery with the key stakeholders. During Sprint planning at the start of the Sprint, all parties will have agreed to what stories are going to be delivered. The Show and Tell demonstrates those stories as either working software or other change artefacts.\nWe believe in establishing clear traceability, so the demonstration\nof work delivered is usually accompanied by a brief presentation or dashboard showing what was committed to during Sprint planning, and what has now been delivered along with a summary of any known issues. A simple example of this is illustrated in Figure 7-6.\n 190 Crafting the Product Increment\n\n Figure 7-6: Simple Traceability Report for Show and Tell\nSprint: 7     Theme: Account Management\n1\n2\n3\n4\n(awaiting test data from Marketing)\n(Does not render correctly on iOS)\n        Show and Tell meetings are usually held at the end of the Sprint. The team should be ready to hold this session by the end of the Sprint.\nThis meeting is also an opportunity for the Product Owner to review the product backlog and adjust it in the light of changes in the environment or in response to new information. The Show and Tell is a working session and the team should avoid limiting it to a presentation.\n Crafting the Product Increment 191\n\nRetrospective\nThe Retrospective meeting is another Agile feedback loop and is an essential part of the process. It is held within the Product Team and is used to mature the process and iron out wrinkles. The retrospective allows the team to identify what went well and what they would like to change. It also allows persistent issues and challenges to be escalated.\nThe format of the retrospective is straightforward:\n1. The team assembles and the Lead sets the context and reminds the team of the format\n2. Everyone records the things they think should or should not continue, either on physical notes or in electronic format\n3. The observations are grouped into related themes\n4. The team agrees which theme is most likely to help them increase their effectiveness\n5. The team agrees on at least one action that it will implement\nas soon as possible (ideally in the next Sprint) to improve its effectiveness. Frequently, these actions are added to the Sprint backlog for the forthcoming Sprint, which is important for creating actionable continuous improvement.\n 192\nCrafting the Product Increment\n\n There are many ways of categorising the feedback, however, we prefer to use three groups, as identified in Figure 7-7.\nFigure 7-7: Retrospective Feedback Categories\n Continue\nPuzzles\nDiscontinue\nWhat went well\nWe want to continue doing these\nPoints of confusion\nWe want help to understand this\nTo learn from\nWe want to stop doing this\n    Crafting the Product Increment\n193\n\nUpdating the Service Wrap\nAs highlighted at the beginning of this chapter, the broader Product Team working together to deliver a complete Product Increment is essential to achieving organisation Agility. The change released is not just a technology update, but also a corresponding update to the supporting processes.\nIn Chapter 9, we explore how the delivery pipeline can now automate many of the traditional service functions. That said, it is still necessary to ensure that Support Teams are familiar with the new functionality and can effectively handle incidents raised by users. This work should be quite lightweight. We expect Support Teams to be working alongside Delivery Teams as part of the broader Product Team.", "start_char_idx": 205023, "end_char_idx": 209860, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8c74cadf-a185-4b5e-91ad-5aaa82a1e85f": {"__data__": {"id_": "8c74cadf-a185-4b5e-91ad-5aaa82a1e85f", "embedding": null, "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21", "node_type": "4", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "7b8ab6f4cd22076034037208ddad5c4e39dec1170ddfde79e3ef7c946fa0a322", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9e955de3-0d21-4e8d-b11e-044a037226f2", "node_type": "1", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "dd75ee35b39707f84d76b9ad5b2b01fbfc7cda3529e495d52baff2bf2c2c541c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "12aeba0e-e585-414b-b3bd-08d8506f7acd", "node_type": "1", "metadata": {}, "hash": "34a7b90aa7b5ad7af70987f2bfbfdace4d4f7fe91ae196e248e62381fe170514", "class_name": "RelatedNodeInfo"}}, "text": "Figure 7-7: Retrospective Feedback Categories\n Continue\nPuzzles\nDiscontinue\nWhat went well\nWe want to continue doing these\nPoints of confusion\nWe want help to understand this\nTo learn from\nWe want to stop doing this\n    Crafting the Product Increment\n193\n\nUpdating the Service Wrap\nAs highlighted at the beginning of this chapter, the broader Product Team working together to deliver a complete Product Increment is essential to achieving organisation Agility. The change released is not just a technology update, but also a corresponding update to the supporting processes.\nIn Chapter 9, we explore how the delivery pipeline can now automate many of the traditional service functions. That said, it is still necessary to ensure that Support Teams are familiar with the new functionality and can effectively handle incidents raised by users. This work should be quite lightweight. We expect Support Teams to be working alongside Delivery Teams as part of the broader Product Team.\nService Teams will have full visibility of change flowing through the delivery pipeline and be included in broader team activities and Sprint ceremonies. The key here is not to treat service as distinct from change, but to include Service Teams in the wider Product Team.\nCombining Organisation and Technology Change\nThe Sprint pattern is not just applicable to delivering technology change, it is also suitable for delivering the full Product Increment. Often, some non-technological change carries real-world constraints, particularly those around operational logistics and personnel that require legal and contractual input - alignment is required.\n 194 Crafting the Product Increment\n\n Figure 7-8: Concurrent Technical and Manual Process Delivery\nTechnology Change\nAligning organisation and technical change starts with a clear strategy and objectives. This is essential and feeds the structured analysis work that provides the links between technology and manual processes.\nThe User Journeys produced to describe the required changes will identify what is achieved using technology (\u2018in-system\u2019) and what is delivered via manual processes (\u2018out-of-system\u2019). The Agile nature of the delivery means that scope will change, and decisions based on\nthe value derived by the organisation will refine the in-system versus out-of-system boundary.\nCrafting the Product Increment 195\nOrganisational Change\n Sprint Backlog\n   SprintN\n   SprintN-1\n\n We recommend that the organisation change activities required to support new product features be delivered as part of the same Sprint pattern to minimise a potentially risky rollout of the change. The definition of manual processes and supporting artefacts should be produced at the same time as the related technological change and is often undertaken by a specialist team of Analysts.\nKey Points\n1. Make sure a deliverable Product Increment includes the changes to all aspects of the product stack - business change, Service Wrap, and technology (application, data, and infrastructure).\n2. Only take stories into Sprint that meet the Definition of Ready and only earn value from stories that meet the Definition of Done.\n3. Use a Sprint 0 at the start of the Delivery phase to initiate the delivery pipeline and get all the necessary tooling and automation in place.\n4. Ensure every Sprint includes sessions for planning and estimating, daily Stand-ups, Show and Tells, and Retrospectives, and that these are never cancelled.\n5. Align organisation change and manual process updates to the same Sprint delivery and release cadence.\n 196\nCrafting the Product Increment\n\n Chapter 08\nEngineering Quality Outcomes\n\nTechnology delivery is a fascinating discipline that combines engineering precision with a creative flair. We believe that the best quality outcomes in terms of technology delivery arise from a structured approach to engineering built around automated, repeatable processes that are flexible enough to evolve as business goals grow or change.\nThe field of software engineering is constantly evolving and innovations such as software-defined infrastructure have brought new opportunities and challenges for delivering Agile change. We have long advocated the need to remove back-loaded risk from technology delivery through continuous integration, automated test and deployment.\n 198 Engineering Quality Outcomes\n\n Concepts\nKey Components of Engineering Delivery\nThe modern engineering landscape as popularised by the term DevOps comprises the three key components illustrated in Figure 8-1.\nFigure 8-1: Engineering Components in DevOps\n Quality Assurance\nDevOps\n  Development\nOperations\n Engineering Quality Outcomes\n199\n\nIt is important to note that the key enabler to DevOps is good quality assurance through test automation (which itself needs a sound test architecture behind it to ensure appropriate coverage and relevance). Many organisations recognise the need to bring Development and Operations together as a way of releasing change to users often and delivering the benefits of Agility across the organisation. Effective QA is the means of managing that risk and making DevOps a reality.\nBJSS Opinion\nStart With Strong Architecture\nGood engineering starts with strong architecture. For a time during the early days of Agile delivery, the term \u2018emergent architecture\u2019 became fashionable.", "start_char_idx": 208880, "end_char_idx": 214212, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "12aeba0e-e585-414b-b3bd-08d8506f7acd": {"__data__": {"id_": "12aeba0e-e585-414b-b3bd-08d8506f7acd", "embedding": null, "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21", "node_type": "4", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "7b8ab6f4cd22076034037208ddad5c4e39dec1170ddfde79e3ef7c946fa0a322", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8c74cadf-a185-4b5e-91ad-5aaa82a1e85f", "node_type": "1", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "84b92a88373139dc545cacd315670f62e9ea91a153405aeef21467b54173af25", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "572fa0a4-1474-42c9-a3ab-231ddcc31c91", "node_type": "1", "metadata": {}, "hash": "f3e927f515dffc3232c7255641217938257d2098795454e7c2ba2708a0b3aa1f", "class_name": "RelatedNodeInfo"}}, "text": "198 Engineering Quality Outcomes\n\n Concepts\nKey Components of Engineering Delivery\nThe modern engineering landscape as popularised by the term DevOps comprises the three key components illustrated in Figure 8-1.\nFigure 8-1: Engineering Components in DevOps\n Quality Assurance\nDevOps\n  Development\nOperations\n Engineering Quality Outcomes\n199\n\nIt is important to note that the key enabler to DevOps is good quality assurance through test automation (which itself needs a sound test architecture behind it to ensure appropriate coverage and relevance). Many organisations recognise the need to bring Development and Operations together as a way of releasing change to users often and delivering the benefits of Agility across the organisation. Effective QA is the means of managing that risk and making DevOps a reality.\nBJSS Opinion\nStart With Strong Architecture\nGood engineering starts with strong architecture. For a time during the early days of Agile delivery, the term \u2018emergent architecture\u2019 became fashionable. Coding without architecture isn\u2019t Agile delivery, it\u2019s hacking \u2013 nothing more than a code and fix approach. Whilst this might work for small-scale pieces of work, it is no way to conduct product development in a professional organisation.\nBeing more Agile doesn\u2019t mean allowing the engineering function to become a developer playground with no rules. The consequences of\nan emergent architecture are a total lack of predictability in delivery. Discovering that you must support 10,000 users after six months of development work, requiring a complete change of the technology stack, isn\u2019t the kind of problem most organisations can swallow.\nIn general terms, when developing a new product, the architecture for the MVP is defined upfront and tested against the core business goals using PoCs and prototypes during Discovery. This provides a level of predictability and reduced delivery risk during the implementation of the initial product version. Solution architecture is largely impacted by the non-functional requirements of the product, so early emphasis on getting these agreed is important.\n 200 Engineering Quality Outcomes\n\n Figure 8-2: Architecture Definition\nFeasibility\nDiscovery\nInitial Solution Architecture Definition\nDelivery\nArchitecture Evolution\nMVP\nNon-Functional Requirements Definition\nIt would be na\u00efve to assume that architecture is defined 100% upfront without subsequent modification. The architecture of the product will continue to change as the product changes, particularly post-launch.\nUpdates to the product architecture occur through controlled evolution and not emergence. Significant architectural changes can cause widespread disruption to the delivery pipeline if not managed correctly. In extreme cases, we have seen this completely halt delivery of functional change.\nThe process of making architectural change is a surgical procedure\nand is largely the same irrespective of where in the architecture the change is - business, application, data or technology. The change will likely comprise a large-scale code change, service integration, potential technology change, and a modification to the delivery pipeline.\nEngineering Quality Outcomes 201\n      Idea\nConcept\nProduct\nRetire\n\nStrong engineering principles executed through good configuration management, source code control and branch and merge policies are essential. The key steps are:\n1. Identification of requirement for architectural change leads to a PoC to confirm the approach\n2. Architectural change is undertaken in a separate code branch to avoid impacting normal functional delivery\n3. The change is merged back into the pipeline when complete or ideally periodically where this is feasible.\nTechnical change is only committed to the delivery pipeline and shippable product when all assurance and tests have been completed. Technical changes should never break the pipeline or impact\nproduct quality.\nGiven the serious problems that technical changes can bring, we recommend always following these rules:\n1. There are written requirements and acceptance criteria in the same way as for functional change\n2. Change is only made when it adds value to the organisation (this may be indirect, e.g., improving the efficiency of the team)\n3. Implementation is undertaken by the Product Team, not by the most experienced person.\nThe last point may seem counter-intuitive, but there will be long term consequences for knowledge and morale if the perceived \u2018hard\u2019 technical work is the preserve of an elite. The Product Team need to be able to know how to continue to change and run the product.\n 202 Engineering Quality Outcomes\n\nMeasure for Success\nTo aid predictable delivery and continuously improve, it is essential to put in place the right measures around delivering change and service. We believe that metrics collection and reporting should largely be automated by the lifecycle tooling. It is also important that there is complete transparency over the metrics from the team all the way up to the sponsor.\nThere is considerable debate amongst the Agile community as to\nhow, and if, teams should be measured. In many ways, excessive measurement is counter to the spirit of Agile development, but in scenarios where large-scale change is being delivered, measurement is essential.", "start_char_idx": 213195, "end_char_idx": 218498, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "572fa0a4-1474-42c9-a3ab-231ddcc31c91": {"__data__": {"id_": "572fa0a4-1474-42c9-a3ab-231ddcc31c91", "embedding": null, "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21", "node_type": "4", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "7b8ab6f4cd22076034037208ddad5c4e39dec1170ddfde79e3ef7c946fa0a322", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "12aeba0e-e585-414b-b3bd-08d8506f7acd", "node_type": "1", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "88178ac9b879c8a9b7d00306fedabb32301b9b702c29ff2d427381d0dec9130e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6a27f949-01b8-458a-88bb-d8c2af30527b", "node_type": "1", "metadata": {}, "hash": "cf33b649885e1d9103d530d3d3e91386dc1c8179a1f4ead22a5f612a25c9a92e", "class_name": "RelatedNodeInfo"}}, "text": "Implementation is undertaken by the Product Team, not by the most experienced person.\nThe last point may seem counter-intuitive, but there will be long term consequences for knowledge and morale if the perceived \u2018hard\u2019 technical work is the preserve of an elite. The Product Team need to be able to know how to continue to change and run the product.\n 202 Engineering Quality Outcomes\n\nMeasure for Success\nTo aid predictable delivery and continuously improve, it is essential to put in place the right measures around delivering change and service. We believe that metrics collection and reporting should largely be automated by the lifecycle tooling. It is also important that there is complete transparency over the metrics from the team all the way up to the sponsor.\nThere is considerable debate amongst the Agile community as to\nhow, and if, teams should be measured. In many ways, excessive measurement is counter to the spirit of Agile development, but in scenarios where large-scale change is being delivered, measurement is essential. It is vital to gain the trust of the team by being transparent about what metrics are being collected and what they are used for.\nEngineering Good Customer Service\nA key component of delivering complete Product Increments is the Service Wrap - the processes and procedures that support the user when experiencing difficulty using the product.\nTraditionally, the service component of product delivery has been separated from the development efforts to change the product. To\nbe effective at rapid low-risk change we believe that \u2018Build\u2019 and \u2018Run\u2019 should be combined. Chapter 9 provides a description of this approach and how Agile and ITIL can co-exist in a single DevOps delivery unit.\n Engineering Quality Outcomes 203\n\nThe Enterprise Agile Approach\nBuilding the Delivery Pipeline\nThe delivery pipeline - the technology and tooling through which new Product Increments flow - is core to delivering technology change. Establishing the basic delivery pipeline at the start of delivery is an essential investment. Without it, the process of delivering change relies on manual processes, poor testing coverage and a collection of error- prone and time-consuming scripts.\nAt the heart of the delivery pipeline is an integrated toolchain. These engineering tools should support all aspects of building and running\nthe product. Getting these products up and running from the start of product delivery is strongly recommended. However, it is possible to add to existing product delivery where this hasn\u2019t been used in the past. On larger scale Product Teams it is sometimes the case that a specialist team (or individual) looks after tooling. This is a judgment call - we suggest that all engineers should have a good working knowledge of the tooling and how it fits together.\n 204 Engineering Quality Outcomes\n\n Figure 8-3: Typical DevOps Tool Chain\n  Define\nCollaborate\nDashboard Planning Messaging Wiki\nDeploy\nDevelop\n  Operate\nAssure\n Figure 8-3 shows an example of the categories of tools in the end-to-end toolchain to support the delivery pipeline.\n Engineering Quality Outcomes 205\n\nOperating and Improving the Delivery Pipeline\nTime should be allowed both pre- and post-product launch to maintain and improve the delivery pipeline. This is also a good time to catalogue tech debt and prioritise it against new functionality or support issues. Doing so preserves the efficiency of the team and reduces the risk of failures. Required changes to the pipeline are most likely to originate from the team themselves during their normal Stand-ups and Retrospectives. These changes should be recorded as defects or\nnew stories and added to the backlog. They are then prioritised and fed into the normal Sprint planning process against reserved maintenance capacity.\nIf the pipeline becomes faulty then delivery should stop. A big mistake we see teams make in this situation is carrying on. If the continuous integration process or automated tests are not working, the team must halt all feature delivery and concentrate on fixing the problem. Without the correct controls in place, there is no knowing what the product quality is. Furthermore, if tests are failing, continuing to change and add new areas of untested functionality to the product will compound the problem. If the build breaks, the pipeline is faulty and normal delivery stops \u2013 no excuses. Ever!\nWe expect instrumentation to be applied in production and to the delivery pipeline. Sudden increases in build times, test execution times, etc. may point to a problem that will soon impact productivity. Such issues should be recorded and dealt with as potential defects in the same way as product defects. Remember, the delivery pipeline is the vehicle for implementing technology change - it needs maintaining and repairing to continue to be successful.\n 206 Engineering Quality Outcomes\n\nBuilding in Product Quality\nProduct quality is \u2018engineered in\u2019 throughout the delivery process. It cannot be easily \u2018tested in\u2019 afterwards. This requires a clear approach\nto testing that ensures potential issues are identified early.", "start_char_idx": 217455, "end_char_idx": 222579, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6a27f949-01b8-458a-88bb-d8c2af30527b": {"__data__": {"id_": "6a27f949-01b8-458a-88bb-d8c2af30527b", "embedding": null, "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21", "node_type": "4", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "7b8ab6f4cd22076034037208ddad5c4e39dec1170ddfde79e3ef7c946fa0a322", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "572fa0a4-1474-42c9-a3ab-231ddcc31c91", "node_type": "1", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "73341a4146e53cb7948860e95077f9eaa33c943656102c67c8db45192a7ef12d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e4b63d4a-8ab2-4473-86f2-579d43fd52ed", "node_type": "1", "metadata": {}, "hash": "38dc3a488da199d7e84e72f27ef6479a8e6fcd8ef300f6f2fe62f7510a8c1504", "class_name": "RelatedNodeInfo"}}, "text": "Furthermore, if tests are failing, continuing to change and add new areas of untested functionality to the product will compound the problem. If the build breaks, the pipeline is faulty and normal delivery stops \u2013 no excuses. Ever!\nWe expect instrumentation to be applied in production and to the delivery pipeline. Sudden increases in build times, test execution times, etc. may point to a problem that will soon impact productivity. Such issues should be recorded and dealt with as potential defects in the same way as product defects. Remember, the delivery pipeline is the vehicle for implementing technology change - it needs maintaining and repairing to continue to be successful.\n 206 Engineering Quality Outcomes\n\nBuilding in Product Quality\nProduct quality is \u2018engineered in\u2019 throughout the delivery process. It cannot be easily \u2018tested in\u2019 afterwards. This requires a clear approach\nto testing that ensures potential issues are identified early. It is only through these (largely automated) test activities that a DevOps approach can succeed.\nPushing frequent change through the delivery pipeline and into the hands of the users requires assurance that things aren\u2019t going to break. Test activities evolve across the product lifecycle as shown in Figure 8-4.\nIt is important to recognise that everyone is engaged in quality and test activities and that this is integral to the work of each team. The focus on testing begins at the outset and helps shape the realisation of the initial idea. Early consideration of test activities is essential to the delivery of\na quality product. The first areas to consider are how the delivery of the product can be assured and the role that testing plays in this. The initial approach will consider the required test activities, levels of automation, framework, roles, environments and data.\n Engineering Quality Outcomes 207\n\n Figure 8-4: Test Evolution Across the Product Lifecycle\nAdvisory Delivery\nFeasibility Discovery Delivery\nMVP\nThe role of testing is to ensure that a high-quality product can be delivered continuously and consistently. This requires attention to four functions:\n1. Test Leadership - Advising and guiding the Product Owner and informing the governance process on approaches to quality and potential issues\n2. Test Architecture - Aligning a suitable set of tools and frameworks to the product, assuring quality without creating a cottage industry to maintain bespoke artefacts\n3. Functional Testing - Adding value through knowledge of the product, users and market to ensure needs are met and a quality user experience\n208\nEngineering Quality Outcomes\n Challenge, Advise, Expand, Shape, Innovate\nStrategies for assuring product quality\nIdentifying test architecture\n Collaborate, Prepare, Assure, Refine, Support\nCreating and executing test approach\nWorking together to learn and improve\n     Idea\nConcept\nProduct\nRetire\n\n4. Technical Testing - Making sure that the product will cope with the rigours of real-world use and meets the required non-functional requirements.\nTesting has a role to play in all aspects of the product stack. Don\u2019t confine your thinking and test strategy to the application software. Data quality, infrastructure and service all impact the experience of the user.\nDeveloping a Strategy for Testing\nUsing a test strategy is a powerful way to capture and focus energy on test activities. Exhaustively testing (manual or automated) all aspects of the product following a change is not feasible. An effective test strategy understands what test coverage is sufficient and directs efforts to test objectives where they are most needed based on risk and effectiveness.\nUltimately, testing aims to ensure the product can be released to users with a reasonable level of predictability and quality. A good test strategy will include the following key elements:\n1. Test Objectives - Shaping the balance of testing methods employed and the focus of the team is derived from clear test objectives. This is likely to reflect the acceptable risk profile and external constraints such as compliance\n2. Contribution to Governance - Product quality is one of the key measures of interest to stakeholders. The output of test activities must be articulated crisply and concisely, such that it can inform any required support or interventions\n Engineering Quality Outcomes 209\n\n3. Information Sharing - The entire Product Team relies on data relating to testing to help focus its efforts, so clarity here is important. Issues arising during testing may point to the need to address skills and capability within the team or resolve design problems\n4. Test Architecture - This may sound a rather grand term, but it is important to consider how test activities interact and overlap. Test architecture will capture the structure of the testing landscape and identify the supporting frameworks and tools required\n5. Test Method - Consideration must be given to how the testing will take place and the execution process, the level of automation and the underpinning data and environments that will be used. This will help the team plan test tasks and interactions across\nthe organisation.", "start_char_idx": 221624, "end_char_idx": 226784, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e4b63d4a-8ab2-4473-86f2-579d43fd52ed": {"__data__": {"id_": "e4b63d4a-8ab2-4473-86f2-579d43fd52ed", "embedding": null, "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21", "node_type": "4", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "7b8ab6f4cd22076034037208ddad5c4e39dec1170ddfde79e3ef7c946fa0a322", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6a27f949-01b8-458a-88bb-d8c2af30527b", "node_type": "1", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "84dc6435899f101833e3e817ee5eb387226c33c5743e4f971eaaeeff2f43f244", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "73435b39-0648-446f-bde5-335afe963385", "node_type": "1", "metadata": {}, "hash": "6953427c07703d6450363df03e2f22d545a98c0b5f76d91fa3a14a608e16d7de", "class_name": "RelatedNodeInfo"}}, "text": "The output of test activities must be articulated crisply and concisely, such that it can inform any required support or interventions\n Engineering Quality Outcomes 209\n\n3. Information Sharing - The entire Product Team relies on data relating to testing to help focus its efforts, so clarity here is important. Issues arising during testing may point to the need to address skills and capability within the team or resolve design problems\n4. Test Architecture - This may sound a rather grand term, but it is important to consider how test activities interact and overlap. Test architecture will capture the structure of the testing landscape and identify the supporting frameworks and tools required\n5. Test Method - Consideration must be given to how the testing will take place and the execution process, the level of automation and the underpinning data and environments that will be used. This will help the team plan test tasks and interactions across\nthe organisation.\n 210\nEngineering Quality Outcomes\n\n Determining Where to Focus Test Effort\nCreating automated tests is a significant investment. Not only does creating the tests require engineering skill and labour, but every product change will require further tests and updates to existing tests. When creating a test strategy and considering where to invest in automation, we find the Agile test automation pyramid in Figure 8-5 useful. This identifies that the bulk of automation effort should be focused on unit tests ahead of service (API) tests and UI automation.\nFigure 8-5: Agile Test Automation Pyramid\n UI\n(0-10%)\nService\n(20-40%)\nUnit\n(40-60%)\n Engineering Quality Outcomes 211\n\n This approach offers several clear advantages. Firstly, it builds quality into the product from within. Traditional test approaches might have a team of people or large automation packs created by testers focused on the interface and not the implementation. Secondly, relying on big UI automation packs is inefficient - they quickly become brittle and are costly to maintain.\nThirdly, the bias towards unit and service tests pushes the bulk of test automation back into the development space, forcing developers to own product quality which has a general overall positive effect. It also broadens the responsibility to Business Analysts, who must ensure edge conditions are well understood and covered.\nIt is common to see the pyramid model extended to cover additional test phases and also suggest the level of effort to be expended on manual testing. An example of an enhanced test pyramid is shown in Figure 8-6.\nFigure 8-6: Expanded Agile Test Pyramid\nManual\nUI Automation\nAPI Automation\nSystem Test Automation Integration Test Automation Unit Test Automation\n        212 Engineering Quality Outcomes\n\n  A Structured Approach to Testing\nIn Chapter 6 we discussed the importance of a structured approach\nto Analysis. For obvious reasons, validating that layered requirements have been met necessitates a layered approach to testing. This yields consideration for the established V-model. The concept of the V-model was originally coupled to more traditional Waterfall projects. However, the principle can still apply to an Agile delivery with the \u2018V\u2019 repeated every Sprint (or set of Sprints forming a release). We refer to this as the W-model.\nFigure 8-7: W-Model\nSN SN+1\n          Feature\nSystem Test\nFeature\nSystem Test\n      Story\nStory Test\nStory\nStory Test\n      Task\nUnit Test\nTask\nUnit Test\n Engineering Quality Outcomes\n213\n\nIn devising the approach to testing, the team must consider the balance of requirements-based testing and risk-based testing. Both have a\npart to play in ensuring product quality. All stories will be written with acceptance criteria that need to be tested against; this should be a joint activity by Developers and Business Analysts to ensure the right coverage and that both business and technical criteria are included. Further testing beyond that and into obscure edge cases should be driven by risk.\nIt is useful (not just from a testing perspective) to know what the most frequent and most valuable transactions in the product are. This information can be used to help prioritise testing efforts.\nTest Phases and the Sprint Pattern\nWe expect that meeting the acceptance criteria defined for each user story is part of the Definition of Done. This correctly implies that story acceptance testing will take place during the same Sprint as the story is developed. Where the change is relatively small, it should be possible to conclude all necessary testing during a Sprint. The automated delivery pipeline assures this and uses packs of automated tests to allow software to be deployed at the touch of a button.\n 214 Engineering Quality Outcomes\n\n There are of course valid exceptions to this process. Many of the systems we work with require further manual testing or integration with non-Agile workstreams and legacy systems. In such scenarios, these test phases may occur in parallel to ongoing feature development or during a special purpose Release Sprint.", "start_char_idx": 225810, "end_char_idx": 230862, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "73435b39-0648-446f-bde5-335afe963385": {"__data__": {"id_": "73435b39-0648-446f-bde5-335afe963385", "embedding": null, "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21", "node_type": "4", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "7b8ab6f4cd22076034037208ddad5c4e39dec1170ddfde79e3ef7c946fa0a322", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e4b63d4a-8ab2-4473-86f2-579d43fd52ed", "node_type": "1", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "0d285d8957326a8085631f00f9c4bca74a0a0973829461792119adc2e7b3cfd3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f61086ce-490b-4e0f-96d6-f3a722d9c953", "node_type": "1", "metadata": {}, "hash": "48104e636a6d9ebe6f49f0a662966d745263f9f436316ced6fa46765d8057fc9", "class_name": "RelatedNodeInfo"}}, "text": "This information can be used to help prioritise testing efforts.\nTest Phases and the Sprint Pattern\nWe expect that meeting the acceptance criteria defined for each user story is part of the Definition of Done. This correctly implies that story acceptance testing will take place during the same Sprint as the story is developed. Where the change is relatively small, it should be possible to conclude all necessary testing during a Sprint. The automated delivery pipeline assures this and uses packs of automated tests to allow software to be deployed at the touch of a button.\n 214 Engineering Quality Outcomes\n\n There are of course valid exceptions to this process. Many of the systems we work with require further manual testing or integration with non-Agile workstreams and legacy systems. In such scenarios, these test phases may occur in parallel to ongoing feature development or during a special purpose Release Sprint. Figure 8-8 illustrates the test phases we recommend and how this is achieved across the delivery pattern.\nFigure 8-8: Recommended Test Phases\nBusiness Proving\nTechnical Test\nUnit Test\nBusiness Proving\nTechnical Test\nUnit Test\nUAT/OAT\nTechnical Test Integration Test Unit Test\n            Story Acceptance Test\nStory Acceptance Test\n      SprintN-1\n  SprintN\n  Release Sprint\n Engineering Quality Outcomes\n215\n\nDealing with Defects\nNo matter how extensive testing efforts are, defects and support incidents will arise. This should be a matter of routine and a large \u2018bow wave\u2019 of defects must not be allowed to accumulate near a release by watering down the Definition of Done or deferring testing. This is why we recommend as much testing occurs in-Sprint as possible and the full Product Increment is produced such that application, infrastructure and data change are aligned and fully working together.\nDefects and support work will be added to the product backlog and brought into Sprint through the Sprint planning process and delivered alongside new stories. It is unlikely that all defects to be fixed in a Sprint are discussed at the planning meeting. A more common approach is to allow for some team capacity to address defects in priority order.\nTo ensure that defects are properly understood and assigned the correct severity rating, teams should run a regular defect triage meeting with the Product Owner. This session not only ensures that defects are categorised and dealt with correctly but also allows for the removal of duplicates and the identification of trends in particular types of defects.\nDeveloping for the Cloud\nSince the first edition of this book in 2008, the infrastructure world has changed considerably. We\u2019ve seen a significant change from physical infrastructure, to private virtual infrastructure, to Cloud-based virtual infrastructure and now to global Cloud platforms. In the early days of Public Cloud, we used these Cloud services to mimic traditional on-premise architectures. This reduced the start-up time of a project.\nIt is possible to use infrastructure automation tools to spin up a delivery pipeline and test environments in Sprint 0. It is possible to use the same scripts to build the production environments, minimising configuration drift and helping to reduce the time from development to release.\n 216 Engineering Quality Outcomes\n\nContainers and container platforms have moved from developer platforms to reliable production platforms. Containers are an ideal platform for microservices architectures and have brought new ways of thinking and a new vocabulary to the development and release of software. For example, the concept of \u2018pets\u2019 versus \u2018cattle\u2019 (where servers are either beloved, named \u2018pets\u2019 nursed back to health\nif they go down, or one of many numbered \u2018cattle\u2019 in a herd that\nare replaced if they go down) takes advantage of comprehensive automation to simplify fault handling and is one of the cornerstones of self-healing architectures.\nAnother advantage of containers is that it brings the configuration closer to the developer and puts the configuration code into the developer\u2019s domain. This is the same code repository as the application code and allows the images they create to be part of the continuous delivery pipeline. This ensures that the infrastructure can be proven earlier.\nNow that the main Public Cloud vendors offer serverless computing, solutions no longer require virtual infrastructure or container platforms - although they are still available if required. As the name suggests, with serverless computing there is no server to manage. Code is deployed\nto the service and executed in response to events (such as RESTful API requests, messages arriving into a queue, or time-based schedules.) A complete system can be built using serverless computing or it can be combined with containers, virtual infrastructure or on-premise systems for a hybrid solution.\nWith each of the above options, the cycle time from define to operate (see \u2018Building the Delivery Pipeline\u2019) can be reduced significantly using Cloud technologies. For \u2018born in the Cloud\u2019 companies, this is their \u2018normal\u2019, and their ability to innovate, test their ideas, and keep moving forward far exceeds that of companies with legacy infrastructure and architectures.", "start_char_idx": 229935, "end_char_idx": 235180, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f61086ce-490b-4e0f-96d6-f3a722d9c953": {"__data__": {"id_": "f61086ce-490b-4e0f-96d6-f3a722d9c953", "embedding": null, "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21", "node_type": "4", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "7b8ab6f4cd22076034037208ddad5c4e39dec1170ddfde79e3ef7c946fa0a322", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "73435b39-0648-446f-bde5-335afe963385", "node_type": "1", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "0f90c926aa3f11ed6b89ff6dd0abd6905e2578adb683c6310c173d882d200ab4", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e3f1f680-8ee0-425b-8a84-026f5932110f", "node_type": "1", "metadata": {}, "hash": "0719606d695795ff0700bc7227028d77aed824caf65e02fc46cb81a3b3bf0cc6", "class_name": "RelatedNodeInfo"}}, "text": "This ensures that the infrastructure can be proven earlier.\nNow that the main Public Cloud vendors offer serverless computing, solutions no longer require virtual infrastructure or container platforms - although they are still available if required. As the name suggests, with serverless computing there is no server to manage. Code is deployed\nto the service and executed in response to events (such as RESTful API requests, messages arriving into a queue, or time-based schedules.) A complete system can be built using serverless computing or it can be combined with containers, virtual infrastructure or on-premise systems for a hybrid solution.\nWith each of the above options, the cycle time from define to operate (see \u2018Building the Delivery Pipeline\u2019) can be reduced significantly using Cloud technologies. For \u2018born in the Cloud\u2019 companies, this is their \u2018normal\u2019, and their ability to innovate, test their ideas, and keep moving forward far exceeds that of companies with legacy infrastructure and architectures. Companies with legacy systems and infrastructure looking to adopt Enterprise Agility must evaluate how Cloud technologies can\nbe integrated into their current systems, architectures and processes to support them on their journey.\n Engineering Quality Outcomes 217\n\n  Delivery and Service Metrics\nIf you want to improve something - measure it. We are strong advocates of implementing metrics to understand the performance of the product and the delivery pipeline. There are typically three categories of metrics that arise from DevOps around a product; these are summarised\nin Figure 8-9.\nThe collection and distribution of metrics should be largely automated. We expect this to be part of the end-to-end toolchain. Getting data should not be a chore, but it does require a little support across the team. In particular, those responsible for delivering change will need to record the actual time spent on tasks and estimated time to completion. This enables the rate of delivery and estimation accuracy to be recorded and used as part of the feedback loop to adjust the forward plan and advise the Sprint planning process.\nFigure 8-9: Categories of Product Metrics\n Change\nService\nQuality\nEarned value Rate of delivery\nPerformance against SLAs Capacity utilisation\nDefect levels Platform availability\n   218\nEngineering Quality Outcomes\n\nThe ultimate measure for the organisation is earned value and measuring the benefit gained for the effort expended on delivering new features.\nService metrics inform decisions about staffing levels in Support Teams and highlight the quality of service being delivered to users. They also quantify how the platform has been scaling to user needs and the potential cost implications of that scaling.\nMeasuring product quality is important to ensure that customer expectations continue to be met and product quality remains high. This can be measured by examining defect levels and the stability/availability of the product.\nWe suggest that a metrics dashboard, transparent and visible to all team members, is produced dynamically from the pipeline tooling.\nMeasuring Change\nA crucial element of achieving predictability is measuring progress towards the next release and any impediments to this. Many Agile methodologies have devised different ways of achieving this. Measuring velocity (the rate at which work is done) and Burn-down (or Burn-up) charts are common. The challenge is avoiding getting bound up in lots of metrics while having sufficient information to make decisions and interventions as required. It is also important the metrics tell a story, have an appropriate narrative and are not just raw data. Reporting to a senior executive that the team has a velocity of 27 isn\u2019t helpful.\nWithin a Sprint, we believe in recording progress using a Burn-down chart. This is because the content of a Sprint should be a fixed scope\n\u2013 the stories taken into Sprint during the planning session. An example Burn-down chart is provided in Figure 8-10. The Burn-down chart should be updated daily as a result of the Stand-up and a revised estimate to complete on tasks by engineers.\n Engineering Quality Outcomes 219\n\n Figure 8-10: Example Sprint Burn-down Chart\n1 2 3 4 5 6 7 8 9 10 Day\nThe Burn-down is calculated by plotting the estimate to complete for\nall the tasks in the Sprint. For tasks in progress, this is updated daily\nby engineers in the Delivery Team. For tasks not yet started, this is the estimate from the Sprint planning session. This actual Burn-down is compared to an ideal trend line that shows all tasks completing by the end of the Sprint. Note that the estimate for complete for a story should only reach zero when it meets the Definition of Done.\nA release may occur after one or more Sprints. For a release, we recommend using a Burn-up chart because the scope of a release can change over time as stories move in or out of the release through the Sprint planning process. As can be seen in Figure 8-11, the Burn-up release chart clearly identifies a baseline scope for the release.", "start_char_idx": 234160, "end_char_idx": 239226, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e3f1f680-8ee0-425b-8a84-026f5932110f": {"__data__": {"id_": "e3f1f680-8ee0-425b-8a84-026f5932110f", "embedding": null, "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21", "node_type": "4", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "7b8ab6f4cd22076034037208ddad5c4e39dec1170ddfde79e3ef7c946fa0a322", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f61086ce-490b-4e0f-96d6-f3a722d9c953", "node_type": "1", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "a46195bc14319bc5ba570677c36577192fe7cd6b492cdece7b15cc5744553357", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "549bb890-08ac-42fc-83b5-af2c70ee38f2", "node_type": "1", "metadata": {}, "hash": "09e6c71e3760643e6903dee5c4bd9b473a6119341563fa151ce847ad50c15864", "class_name": "RelatedNodeInfo"}}, "text": "For tasks in progress, this is updated daily\nby engineers in the Delivery Team. For tasks not yet started, this is the estimate from the Sprint planning session. This actual Burn-down is compared to an ideal trend line that shows all tasks completing by the end of the Sprint. Note that the estimate for complete for a story should only reach zero when it meets the Definition of Done.\nA release may occur after one or more Sprints. For a release, we recommend using a Burn-up chart because the scope of a release can change over time as stories move in or out of the release through the Sprint planning process. As can be seen in Figure 8-11, the Burn-up release chart clearly identifies a baseline scope for the release. In the case of an MVP, this will be the scope agreed during Discovery.\n220 Engineering Quality Outcomes\nActual\nPlan\n  Estimate to Complete\n\n  The Burn-up should reflect actual work completed to the Definition\nof Done. It might be useful to plot the Burn-up for each layer in the Definition of Done to be sure that a gap is not opening up between work completed by the team and being accepted by the user community.\nFigure 8-11: Example Release Burn-up Chart\nActual\nSprintN SprintN+1 SprintN+2 SprintN+3\nThe concept of earned value is important here. Tracking effort, work done, velocity and so on is useful as an indicator and to aid planning, but most executive sponsors are interested in understanding progress towards goals. If the initiative needs to build 10 widgets to derive value for the organisation, then the only thing that matters is how many widgets are completed. In addition to monitoring completed stories against the baseline, we also suggest plotting the actual and planned resource capacity.\nActual Scope Capacity Baseline Scope\nReforecast\nEngineering Quality Outcomes 221\n Earned Value\n\nInevitably, if progress deviates from the expectation, questions will rightly be asked. Often, the root cause is simply a lack of bandwidth within the team due to unexpected urgent or critical faults that the Development Team needs to address, as well as factors like unforeseen holidays and sickness. It is best to make this easily visible, so that further analysis into potential issues is only required when the most probable cause of a bandwidth issue is ruled out.\nMeasuring Service\nService metrics inform stakeholders about the performance of the product in live use and the level of support being provided. Much of our thinking on service metrics is informed by ITIL processes, combined with the application of a \u2018Necessary and Sufficient\u2019 filter. As a minimum, service metrics must cover:\n1. Usage of the product by the various user communities.\nOften this is a non-functional requirement anyway and is certainly important in gaining insight into the interactions of users with the product to inform future enhancements\n2. Incidents arising from the usage of the system and how the resolution of these performs against any agreed service levels. Incidents will typically be assigned severity levels and the investigation of these may lead to a defect being passed back to the Delivery Teams\n3. Capacity that is utilised to deliver the service.\nThis is important for forward planning and financial management and to some extent goes hand in hand with the usage metrics in point 1. These metrics are particularly important when not using elastic Cloud computing platforms.\nAs with delivery metrics relating to change, we would expect these metrics to be largely automated and derived from the tooling in the delivery pipeline and used by the Service Teams.\n 222 Engineering Quality Outcomes\n\nMeasuring Quality\nAn important set of metrics are those referring to quality. During the execution of change and service, it is important to track the defects found and their path to resolution. We also believe that measuring system availability and unplanned outages is a good indicator of production quality. Many theories and convoluted metrics exist in the area of product quality. We prefer to keep things straightforward and put in place only the \u2018Necessary and Sufficient\u2019 metrics.\nThe number of defects alone does not tell a story or convey any meaningful information. Our recommended key defect metrics are the find and fix rates. These should be plotted over time to provide historical trends. The key question to address is \u2018Are more defects being found and is resolution keeping pace with Discovery?\u2019 Ensuring that a significant gap does not open up between the find and fix rate is key to ensuring a \u2018No surprises endgame\u2019 for the release of a Product Increment.", "start_char_idx": 238504, "end_char_idx": 243107, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "549bb890-08ac-42fc-83b5-af2c70ee38f2": {"__data__": {"id_": "549bb890-08ac-42fc-83b5-af2c70ee38f2", "embedding": null, "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21", "node_type": "4", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "7b8ab6f4cd22076034037208ddad5c4e39dec1170ddfde79e3ef7c946fa0a322", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e3f1f680-8ee0-425b-8a84-026f5932110f", "node_type": "1", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "e38e696f05887f764cde847abede9a703e56c4641baaabdfb100bb534da7fea0", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1ea32183-e198-4ca4-bfd2-f9065b6aeeb0", "node_type": "1", "metadata": {}, "hash": "afc1b4d72d4d632e8ffabcad7b15fea803d9a866aa686b84ffc18a8c39f6697d", "class_name": "RelatedNodeInfo"}}, "text": "During the execution of change and service, it is important to track the defects found and their path to resolution. We also believe that measuring system availability and unplanned outages is a good indicator of production quality. Many theories and convoluted metrics exist in the area of product quality. We prefer to keep things straightforward and put in place only the \u2018Necessary and Sufficient\u2019 metrics.\nThe number of defects alone does not tell a story or convey any meaningful information. Our recommended key defect metrics are the find and fix rates. These should be plotted over time to provide historical trends. The key question to address is \u2018Are more defects being found and is resolution keeping pace with Discovery?\u2019 Ensuring that a significant gap does not open up between the find and fix rate is key to ensuring a \u2018No surprises endgame\u2019 for the release of a Product Increment.\n Engineering Quality Outcomes 223\n\n Figure 8-12: Example Defect Charts\nTrend\n250 200 150 100 50\nNew\nResolved\nClosed\n224\nEngineering Quality Outcomes\nwk 1\nwk 2\nwk 3\nwk 4\nwk 5\nwk 6\nwk 7\nwk 8\nwk 9\nwk 10\nCurrent\nTotal\n325\n264\n37 24\n   Defects\n\nThe sample defect charts in Figure 8-12 illustrate the types of information we expect to see generated automatically from Agile lifecycle tooling and presented transparently for all stakeholders. Data on system availability should similarly be readily producible from the run time tooling in production.\nAssuring Technical Quality\nTechnical Leads will typically develop and implement a Technical Quality Plan (TQP) to underpin the quality of the engineering efforts. The purpose of this TQP is to ensure that all technical output meets the required quality standard. Its scope will include application software, infrastructure (software-defined and hardware), test assets and the full engineering stack.\nThe TQP should be considered a living artefact that evolves with the product. It is also important to recognise that the document or wiki that represents the TQP is not an end in itself, but a means to an end \u2013 high-quality technical output. The key areas covered by the TQP are:\n1. Delivery Pipeline Quality - The section refers to the use of the delivery pipeline and how to manage the quality of setup and maintenance, including build, continuous integration, packaging and deployment\n2. Code Quality - All aspects of managing the quality of code should be addressed. This will extend to peer code review, static analysis, coding standards, managing technical debt and documentation\n3. Product Quality - This complements the test approach and determines from a technical perspective what \u2018Good\u2019 looks like and how to make effective use of the test tools and frameworks available. Typically, this will cover unit test and automated end-to-end tests\n Engineering Quality Outcomes 225\n\n4. Technical Risk Management - This defines a process for identifying and managing technical risks associated with delivering and running the product. This will dovetail into the standard RAID log for overall product delivery\n5. Knowledge Management - An approach is required for capturing, maintaining and sharing technical information relating to the product. This will include code comments, wikis and\ntraditional documentation.\nDo Everything Continuously\nDo everything continuously to ensure quality is engineered-in and\nthe risk of delivery failure is low. If you have to do it more than once, automate it and run it regularly. As a minimum, focus on ensuring the following are automated and run continuously:\n1. Build\n2. Integration\n3. Functional Tests\n4. Non-functional (Technical) Tests\n5. Data Migration\n6. Deployments\n7. Environment Provisioning\n8. Health monitoring and repair.\n 226\nEngineering Quality Outcomes\n\n Key Points\n1. Good engineering starts with strong architecture. Drive out NFRs during Discovery and prove out that architecture early through continuous technical testing.\n2. Build and maintain an automated delivery pipeline for the production of high-quality software. If the pipeline fails at any point, stop all delivery and fix the problem.\n3. Implement a well thought through Test Strategy that identifies the right balance of automation and manual testing, test phases and tooling.\n4. Create and use a Technical Quality Plan to manage the code quality process such as code reviews, static analysis, technical debt and associated tooling.\n5. Put appropriate tests around software-defined infrastructure and ensure that all software assets are subject to the same source\ncode control.\n Engineering Quality Outcomes 227\n\n 228\n\n Chapter 09\nService Agility\n\nService management comprises the activities, processes, and procedures that an organisation adopts to align IT services with the needs of the business.\nWe outlined the concept of a Service Wrap in Chapter 8.", "start_char_idx": 242210, "end_char_idx": 247029, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1ea32183-e198-4ca4-bfd2-f9065b6aeeb0": {"__data__": {"id_": "1ea32183-e198-4ca4-bfd2-f9065b6aeeb0", "embedding": null, "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21", "node_type": "4", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "7b8ab6f4cd22076034037208ddad5c4e39dec1170ddfde79e3ef7c946fa0a322", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "549bb890-08ac-42fc-83b5-af2c70ee38f2", "node_type": "1", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "8c168d766a2940ef850ec61181205693ed57b0148819f23622386e960a406480", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a72a7af7-aa04-42fa-a791-29dda87f55d2", "node_type": "1", "metadata": {}, "hash": "7921d52d46c6c98f659f7eb2faac7b0476fb5e8f6541fc9527f104e11fc9cbc2", "class_name": "RelatedNodeInfo"}}, "text": "Drive out NFRs during Discovery and prove out that architecture early through continuous technical testing.\n2. Build and maintain an automated delivery pipeline for the production of high-quality software. If the pipeline fails at any point, stop all delivery and fix the problem.\n3. Implement a well thought through Test Strategy that identifies the right balance of automation and manual testing, test phases and tooling.\n4. Create and use a Technical Quality Plan to manage the code quality process such as code reviews, static analysis, technical debt and associated tooling.\n5. Put appropriate tests around software-defined infrastructure and ensure that all software assets are subject to the same source\ncode control.\n Engineering Quality Outcomes 227\n\n 228\n\n Chapter 09\nService Agility\n\nService management comprises the activities, processes, and procedures that an organisation adopts to align IT services with the needs of the business.\nWe outlined the concept of a Service Wrap in Chapter 8. In this chapter, we explore service management concepts in more detail and how organisations can develop and refine a Service Wrap appropriate to their situation. We show how traditional structured approaches can be combined with Agile delivery to provide the level of support required in an Agile delivery pipeline.\nConcepts Service Maturity\nMost organisations of any scale operate some type of service function to provide support for products or services. These functions operate at different levels of maturity. A simple service Maturity Model is shown in Figure 9-1.\nEach maturity level carries a different risk profile and scope to support an Agile approach.\n 230 Service Agility\n\n Figure 9-1: Service Maturity Model\n Original team fixes BAU issues\nDisruptive to ongoing project (drop everything!)\nLittle or no formality / process discipline\nInefficient use of resources to resolve minor failures\n Brittle or legacy software - no change\nSkills gap /\n\u2018Not Invented Here\u2019\nSignificant impact on BAU support teams in the event of issues\nLittle understanding of associated business risk\nNo prioritisation of issues - \u2018who shouts loudest\u2019 approach\n Business understands the impact and urgency\nGuidelines for failure of components\nCapacity planning\nProactive patching and maintenance\nAgreed Service Levels between customer and service\nContinual improvement\n    No Service\nAd-hoc Service\nManaged Service\n   Service Agility\n231\n\nNo Service\nThe notion of a product having no service is illusory \u2013 if an organisation is using software to conduct elements of its business then a service\nis being provided. Whilst this scenario may seem unlikely in a modern delivery environment, in our experience it is surprisingly common, particularly in the less mainstream areas of a portfolio. It is not uncommon for key production systems to be well defined and managed, whilst other services, perhaps dependencies of that key system, are largely ignored. As a result, \u2018no service\u2019 services may be responsible for significant business risk.\nA legacy system may be in constant use and have experienced no issues for long periods. Nevertheless, a failure would have significant consequences. A common scenario we see is a small number of people managing high-value transactions using extremely complex spreadsheet solutions. In many cases, these solutions, now operating as key services within the business, have been created by Subject Matter Expert (SME) staff who have long since moved on. A faulty formula, a regulatory or business change, unforeseen circumstances in the data or technical changes to an unseen dependency can have a significant impact (real or reported).\nAd-hoc Services\nIn an ad-hoc services approach, the delivery organisation recognises that a service is being provided, but the ways of working are poorly defined.\nA common scenario is that of a project never quite closing down - an otherwise well-managed and well-defined delivery project with poorly defined or non-existent terms of reference for the production system. This often means that the original Engineering Team that built the solution (the people best placed to support it) remains responsible for resolving any issues, even after the project has disbanded.\n 232 Service Agility\n\nThis approach works well in mitigating risk, particularly in the early stages of a new service, but it must be a conscious strategy, managed carefully.\nIt\u2019s often the case that the Engineers able to support the new service are planned into their next delivery. Diverting them to address second and third line support issues, which usually attract higher priority than project delivery, is disruptive. This unplanned competition for resources creates barriers between teams, friction between colleagues and demotivates the people involved.\nDespite these issues, small Engineering Teams with a clear delineation of responsibility and an \u2018eyes open\u2019 approach to planning and estimation can operate this model quite successfully. It is often effective where there is a single point of responsibility able to address any intra-team tensions. For example, a single Delivery Manager responsible for Service A and Project B can set direction between the two without recourse to committee decision making.", "start_char_idx": 246027, "end_char_idx": 251274, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a72a7af7-aa04-42fa-a791-29dda87f55d2": {"__data__": {"id_": "a72a7af7-aa04-42fa-a791-29dda87f55d2", "embedding": null, "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21", "node_type": "4", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "7b8ab6f4cd22076034037208ddad5c4e39dec1170ddfde79e3ef7c946fa0a322", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1ea32183-e198-4ca4-bfd2-f9065b6aeeb0", "node_type": "1", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "a38b7a691e352f18ab90df9fa91155607cfd4a512212b42e4f5b9c83bdfdd276", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2853573c-a62c-494f-9f74-34800c0fe1b5", "node_type": "1", "metadata": {}, "hash": "a52111998f04e3f0fc76c50ee735e14e5708d28dd8283a671f86e7a04aa6b878", "class_name": "RelatedNodeInfo"}}, "text": "232 Service Agility\n\nThis approach works well in mitigating risk, particularly in the early stages of a new service, but it must be a conscious strategy, managed carefully.\nIt\u2019s often the case that the Engineers able to support the new service are planned into their next delivery. Diverting them to address second and third line support issues, which usually attract higher priority than project delivery, is disruptive. This unplanned competition for resources creates barriers between teams, friction between colleagues and demotivates the people involved.\nDespite these issues, small Engineering Teams with a clear delineation of responsibility and an \u2018eyes open\u2019 approach to planning and estimation can operate this model quite successfully. It is often effective where there is a single point of responsibility able to address any intra-team tensions. For example, a single Delivery Manager responsible for Service A and Project B can set direction between the two without recourse to committee decision making.\nOperating a service like this at scale is more difficult. Services of this type tend to over-emphasise the team\u2019s project domain knowledge, which naturally erodes over time as the team evolves due to attrition or reorganisation. This approach can breed single points of failure, allowing key person dependencies within the project to extend to the service regime with the attendant risks that this brings.\n Service Agility 233\n\n Managed Service\nMature service organisations typically employ a service management framework of some kind. Many standards and frameworks exist, including the Information Technology Infrastructure Library (ITIL), the international standard ISO/IEC 20000, the IT governance framework Control Objectives for Information and Related Technologies (COBIT) and elements of The Open Group Architecture Framework (TOGAF).\nThe most widely used service management framework is ITIL, first developed in the 1980s by the CCTA. The concepts are split into several core areas, as summarised in Figure 9-2.\nFigure 9-2: Service Management Concepts in ITIL\nContinuous Improvement\n       Strategy\nDesign\nTransition\nOperation\n 234\nService Agility\n\nIT service management best practices are the activities, processes and procedures that an organisation adopts to align IT services with the needs of the business. The key elements are:\nService Strategy\nService strategy includes, but isn\u2019t limited to, Service Portfolio Management, Financial Management for IT Services, Demand Management, and Business Relationship Management.\nService Design\nIn this context, service design considers Service Catalogue Management, Service Level Management, Availability Management, Capacity Management, IT Service Continuity Management, Security Management, and Supplier Management.\nUsing these broad concepts as dimensions, comprehensive service processes can be designed (including supporting procedures), dependencies can be understood, and a service design can be developed and communicated.\nThis aspect of service design differs from the service design discussed in the Human-Centred Design chapter, which focuses on the design of services from a user perspective.\nService Transition\nService transition covers not only the transition of new services into a production setting but also ongoing changes to the live service, including release and deployment good practice. It includes Transition Planning and Support, Change, Service Asset and Configuration Management,\n Service Agility 235\n\nRelease and Deployment Management, Service Validation and Testing, Change Evaluation, and Knowledge Management.\nService Operation\nService operation covers the areas familiar to most organisations because these processes and functions are the ones they work with every day. These include Service Desk, Technical Management Application Management, and IT Operations Management. Service operation also covers the processes that deal with Event, Access, Request Fulfilment, Incident and Problem Management.\nContinual Service Improvement\nThe final, overarching core area is Continual Service Improvement. This is an important aspect of any service management approach and ITIL\u2019s version covers, amongst other things, a seven-step improvement process to enable a service to change with the evolving needs of\nthe business.\nLike any framework, ITIL has strengths and weaknesses, but it is important to understand the basics. Many books have been written on the various versions of ITIL, and we don\u2019t propose to duplicate them here. However, the concepts are key to any structured approach to service management.\n 236 Service Agility\n\n Figure 9-3: ITIL\u2019s Continual Service Improvement Approach\n  Implement\nPresent & Use\nContinual Improvement\nGather Data\nProcess Data\nIdentify Strategy\nDefine Measures\n     Analyse\n Service Agility\n237\n\nBJSS Opinion\nA structured service management approach is sometimes seen by those who don\u2019t understand it as a hindrance in Agile environments. Often,\nit is perceived to be an unforgiving, unbending process. This is usually because the details of the service design are not fit for purpose. Many organisations implement what they believe to be best practice but do not take into account the needs of the organisation or the speed of change to which it aspires.", "start_char_idx": 250257, "end_char_idx": 255544, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2853573c-a62c-494f-9f74-34800c0fe1b5": {"__data__": {"id_": "2853573c-a62c-494f-9f74-34800c0fe1b5", "embedding": null, "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21", "node_type": "4", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "7b8ab6f4cd22076034037208ddad5c4e39dec1170ddfde79e3ef7c946fa0a322", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a72a7af7-aa04-42fa-a791-29dda87f55d2", "node_type": "1", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "75378691f36b72af7e6057406487caf67d7e43dd10aeaf6753dda1ce63a09907", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "fc958e75-9c50-4220-80fe-286a2c341ec3", "node_type": "1", "metadata": {}, "hash": "148684d6771d40440087b3544aff91b5db29f4d29eb556ff2768a52db0b1dec8", "class_name": "RelatedNodeInfo"}}, "text": "Many books have been written on the various versions of ITIL, and we don\u2019t propose to duplicate them here. However, the concepts are key to any structured approach to service management.\n 236 Service Agility\n\n Figure 9-3: ITIL\u2019s Continual Service Improvement Approach\n  Implement\nPresent & Use\nContinual Improvement\nGather Data\nProcess Data\nIdentify Strategy\nDefine Measures\n     Analyse\n Service Agility\n237\n\nBJSS Opinion\nA structured service management approach is sometimes seen by those who don\u2019t understand it as a hindrance in Agile environments. Often,\nit is perceived to be an unforgiving, unbending process. This is usually because the details of the service design are not fit for purpose. Many organisations implement what they believe to be best practice but do not take into account the needs of the organisation or the speed of change to which it aspires. Note that the design may well have been fit for purpose at the stage it was put in place, but evolving business needs have not been reflected or considered over time.\nService management should be at the heart of an Agile delivery from the outset. It is unlikely that the service representative will shape the product, but they can advise on potential service options that influence decision making before requirements are finalised.\nService design will be heavily influenced by the organisation\u2019s appetite for automation. If automation and quality are built-in as part of the development of the product and infrastructure, service processes can be more lightweight, and speed of delivery enhanced.\nAs with any other Agile process, once service processes are agreed upon and implemented, they should be refined and reviewed continually. What is relevant in an early life support stage may be irrelevant when the product has proved itself to be stable and resilient. For example, as confidence in the automation grows, along with service maturity, what would once be counted as a change requiring Change Advisory Board approval will become a standard change and be pre-approved.\n 238 Service Agility\n\nA common misconception is that all best practice service management processes should be in place at go-live. In practice, this depends on the type of project and any external factors. In some circumstances\nit may be appropriate to design a Minimum Viable Service (MVS) that includes only:\n\u25cb Incident Management\n\u25cb Change Management\n\u25cb Release Management\n\u25cb Event Management.\nOther processes can be implemented while the product is live and designed and enhanced in parallel to the product development.\nMeeting the Challenge\nDelivering an effective service is not straightforward. Challenges include:\n\u25cb Complex, evolving IT estates with multiple component parts\n\u25cb Ageing technical infrastructure and legacy applications\n\u25cb Legacy or niche technologies making it difficult (expensive!) to retain skilled staff\n\u25cb No agreed to service levels (Operational Level Agreements) with an internal team or between teams\n\u25cb No journey/plan to modernisation - service designed to \u2018keep the lights on\u2019\n\u25cb IT services failing to meet the need of the organisation.\n Service Agility 239\n\nIn our experience, these obstacles can exist even in organisations with a mature approach to service delivery and a clear understanding of their end goal.\nImprovements can always be made, regardless of where an organisation fits on the maturity scale. An Agile approach will help with an incremental migration to a more mature approach.\nEngineering Good Customer Service\nITIL processes typically dominate the service space and, although ITIL is still relevant, modern engineering techniques built on software-defined infrastructure and Cloud computing should be used to automate many of these processes.\nService Design\nService Catalogue Management\nLikely, the product can automatically register its services to maintain a catalogue.\nService Level Management\nThe Agile and DevOps approaches described throughout this book includes this process. Consideration should be given to service levels when using public Cloud platforms, as they may not offer guaranteed \u201cclassic\u201d service levels such as availability and performance. When\nit comes to Agile and Cloud development, the service level should be considered as part of the initial design, and techniques such as automated horizontal and vertical scaling should be explored.\n 240 Service Agility\n\nCapacity Management\nWhilst it is useful to understand underlying platform constraints and costs, we would expect the delivered product to automatically scale network, compute, and storage as required using Cloud technologies. The shift towards Cloud technologies may reduce the significance of capacity management, but the greater emphasis should be given to budget management and commercial offerings of the Cloud suppliers.\nAvailability Management\nUsing serverless computing, scalable microservices, automated provisioning, monitoring, and self-healing should allow for a product\nto be almost always available. The near-limitless availability of Cloud services also provides the ability to test this availability using manual or automated test techniques. The use of automated techniques largely reduces the need for manual approaches.\nService Continuity Management\nDisaster recovery and service continuity is designed during Discovery, and should be fully automated within the product delivery.", "start_char_idx": 254675, "end_char_idx": 260051, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fc958e75-9c50-4220-80fe-286a2c341ec3": {"__data__": {"id_": "fc958e75-9c50-4220-80fe-286a2c341ec3", "embedding": null, "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21", "node_type": "4", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "7b8ab6f4cd22076034037208ddad5c4e39dec1170ddfde79e3ef7c946fa0a322", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2853573c-a62c-494f-9f74-34800c0fe1b5", "node_type": "1", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "59cabc4b3f9b626e9f0fd262a8eefd363b04790322b8f75d44714043acc1800a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "08095a1c-786c-4e5c-b688-28164b24f11e", "node_type": "1", "metadata": {}, "hash": "d1bedbae193cd1713b663e91334e1b883fcc0ae22f7979f7ab60a6ae167bfa66", "class_name": "RelatedNodeInfo"}}, "text": "240 Service Agility\n\nCapacity Management\nWhilst it is useful to understand underlying platform constraints and costs, we would expect the delivered product to automatically scale network, compute, and storage as required using Cloud technologies. The shift towards Cloud technologies may reduce the significance of capacity management, but the greater emphasis should be given to budget management and commercial offerings of the Cloud suppliers.\nAvailability Management\nUsing serverless computing, scalable microservices, automated provisioning, monitoring, and self-healing should allow for a product\nto be almost always available. The near-limitless availability of Cloud services also provides the ability to test this availability using manual or automated test techniques. The use of automated techniques largely reduces the need for manual approaches.\nService Continuity Management\nDisaster recovery and service continuity is designed during Discovery, and should be fully automated within the product delivery.\nInformation Security Management\nA secure coding lifecycle should be adopted to ensure compliance with information security standards. When using Cloud services, the possibility of using hosted security management tools should also be explored.\nSupplier Management\nSafeguarding the commercial interests of the organisation and ensuring that suppliers are aligned to project goals is the responsibility of the Product Team.\n Service Agility 241\n\nService Transition\nKnowledge Management\nProduct information should be maintained by the team as part of the ongoing service of the product.\nChange Management\nThe rollout of change is completely automated, as is the generation of information allowing complete traceability of the contents of the change. In most organisations, a Developer check-in will not automatically deploy to live, and a final manual Go/No-go decision is made by the Change Advisory Board. As the organisation matures in its ability to deploy changes more frequently, the governance around change management should also evolve.\nAsset and Configuration Management\nWhen using a software-defined infrastructure, the content management database (CMDB) can be automatically generated by inventory scanning tools. With immutable infrastructure and Cloud platform services,\nthe maintenance of a traditional CMDB can become a considerable overhead, and Leaner approaches to Asset and Configuration management should be explored as part of the delivery phase.\nWhere possible, all configuration, infrastructure, documentation, and application code, should be stored centrally in the source code control repository.\nRelease and Deployment\nIt is expected that the release and deployment process is fully automated by the delivery pipeline. This removes one of the biggest headaches of implementing change, where often manual, error-prone steps are used to install software products.\n 242 Service Agility\n\nTransition Planning\nIn a large change, such as the implementation of a new product, some manual transition planning work is still required.\nService Validation and Testing\nA suite of automated tests should be used to ensure that the product operates effectively and that automated health checks and healing services operate correctly. Some work will be required to check the results of this process and align any remaining manual tests.\nProcess Evaluation\nThe process evaluation category is still potentially useful. We would expect the service to mature through the Agile change process outlined in this book. This will be supplemented by audits of the remaining manual processes.\nService Operations\nIncident Management\nIncident management and dealing with end-users will still require human intervention. The investment in an approach to meeting\nuser needs and user-centred design will mean that user queries are reduced. In addition, the focus on automated testing and self-healing infrastructure should mean that reported failures decline as product reliability increases.\n Service Agility 243\n\nProblem Management\nProblem management will still require work from the Support Teams. These are the challenges that go beyond the automated repair mechanisms of the product.\nAccess Management\nThis security-enforcing function likely remains manual.\nEvent Management\nThe end-to-end toolchain will include operational tools to monitor the health of the product. Events such as low free storage or node failures can be automatically fixed by a self-healing platform and automatically reported to the incident management tool.\nRequest Fulfilment\nBy using software-defined infrastructure in the Cloud, Engineers can provision the required infrastructure. Little manual work is required, but someone needs to keep an eye on the finances!\nContinual Service Improvement\nService Measurement\nIt is recommended that service metrics are automatically generated by the platform.\nService Reporting\nWhile service reporting can largely be automated, human interpretation of the reports is required to determine any intervention required.\n 244 Service Agility\n\nService Improvement\nThe service improvement step is still usefully a manual process but should be tied into the Sprint ceremonies.\nThe Enterprise Agile Approach\nImplementing a Service Wrap is key to realising the benefits of good service management practice. The Enterprise Agile approach to delivering the Service Wrap is straightforward \u2013 treat it as a product to be delivered like any other.\nService Agility at 10,000 feet\nThe Enterprise Agile approach to service management embraces a DevOps philosophy. Continuous Delivery and cross-functional ways of working are key to delivering Agility in the Service Wrap. This way of working breaks the traditional \u2018Build\u2019 and \u2018Run\u2019 ways of thinking.", "start_char_idx": 259033, "end_char_idx": 264795, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "08095a1c-786c-4e5c-b688-28164b24f11e": {"__data__": {"id_": "08095a1c-786c-4e5c-b688-28164b24f11e", "embedding": null, "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21", "node_type": "4", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "7b8ab6f4cd22076034037208ddad5c4e39dec1170ddfde79e3ef7c946fa0a322", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "fc958e75-9c50-4220-80fe-286a2c341ec3", "node_type": "1", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "3a318b09fb89b0c55ba4b9110a045cef0b40eeae89b93336c497e1967406f5b1", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "748b6b8b-2edb-4d2c-a8a8-b7bc69b2073f", "node_type": "1", "metadata": {}, "hash": "db8578ac3e95c9f79b0798595803297026503bf7e2abb3770b500970739f57a5", "class_name": "RelatedNodeInfo"}}, "text": "Little manual work is required, but someone needs to keep an eye on the finances!\nContinual Service Improvement\nService Measurement\nIt is recommended that service metrics are automatically generated by the platform.\nService Reporting\nWhile service reporting can largely be automated, human interpretation of the reports is required to determine any intervention required.\n 244 Service Agility\n\nService Improvement\nThe service improvement step is still usefully a manual process but should be tied into the Sprint ceremonies.\nThe Enterprise Agile Approach\nImplementing a Service Wrap is key to realising the benefits of good service management practice. The Enterprise Agile approach to delivering the Service Wrap is straightforward \u2013 treat it as a product to be delivered like any other.\nService Agility at 10,000 feet\nThe Enterprise Agile approach to service management embraces a DevOps philosophy. Continuous Delivery and cross-functional ways of working are key to delivering Agility in the Service Wrap. This way of working breaks the traditional \u2018Build\u2019 and \u2018Run\u2019 ways of thinking.\nFigure 9-4 shows the traditional approach to service management, based on a \u2018complete\u2019 product being handed over to an Operations organisation to run the service. Future changes are bundled up into a notional \u2018Release 2\u2019 or series of releases.\n Service Agility 245\n\n Figure 9-4: Traditional Service Model\nFeasibility\nDiscovery\n  Delivery\n  Release 1\nRelease 2\nService\nOperate\nRetire\n   Build\n  246\nService Agility\n\n But how does this approach work with a Minimum Viable Product\n(MVP)? What if the MVP has limited scope and could be earning value for the organisation very quickly, despite substantially more functionality remaining in the product backlog? The project is not finished, but the Product must be run.\nFigure 9-5 illustrates the Enterprise Agile service model.\nFigure 9-5: Enterprise Agile Service Model\nFeasibility\nDiscovery\n  Delivery\n   MVP\nMVS\nProduct increments\nService\nDevOps\nRetire\n    Service Agility\n247\n\nAs soon as the MVP is launched into production, a service is being provided or value cannot be earned. This has several implications for the delivery. Service must be considered upfront, with a \u2018Necessary and Sufficient\u2019 Service Wrap in place. The key point here is \u2018Necessary and Sufficient\u2019 \u2013 just as a Minimum Viable Product implements a subset\nof the product backlog, a Minimum Viable Service (MVS) approach can implement an appropriate subset of the Service Wrap.\nThinking about the core concepts, expected usage, and ways of working for the MVP helps inform the MVS. In particular, do not underestimate the challenge of managing a team to provide a production-quality Managed Service in parallel with the delivery of the next wave of features from the product backlog.\nEmbracing automation as part of the delivery of the MVP, and considering this as part of the strategy and design of the Service Wrap from Discovery onwards, provides the right platform for Agility in the service. The concept of \u2018Release 2\u2019 becomes irrelevant when changes to the product \u2013 and associated service \u2013 can be delivered on a Sprint-by-Sprint basis.\nWe believe that, wherever possible, the teams that build an MVP should provide the MVS. Using a DevOps way of working completely removes the \u2018us and them\u2019 of traditional Build and Run Teams.\nAnatomy of a Service Wrap\nThe Enterprise Agile Service Wrap is a structured approach to good industry practice, drawing on ITIL, with Agility at its core.\nThe Service Wrap provides the people, skills, processes, and tooling required to allow the MVP and subsequent Product Increments to earn business value.\n 248 Service Agility\n\n A Service Wrap typically comprises several key capabilities: Platform, Application Support and Maintenance, and New Business Services. The mix will vary for each Service Wrap depending on the unique needs of the underlying Product.\nA basic Service Wrap is illustrated in Figure 9-6.\nFigure 9-6: Enterprise Agile Service Wrap\nService Management Wrapper\n     Platform\nApplication Support & Maintenance\nNew Business Services\n   Continual Improvement\nTooling\nSkills\n  Service Agility 249\n\nThe Service Wrap is based on the following key elements:\n\u25cb Service Management Wrapper - The fundamental processes that manage the service using an appropriate supporting toolchain, initially implementing the MVS and growing as required. The Managed Service Wrapper is based on a set of appropriate processes implemented by qualified Service Delivery Managers, Service Support and Process Analysts, and specialist teams\n\u25cb Platform - The Service Wrap must manage the underlying infrastructure of the Product. This may be physical \u2018tin\u2019 on premises or in data centres, or Cloud-based infrastructure. Platform Engineering specialists will be required to deliver the Service Wrap.", "start_char_idx": 263707, "end_char_idx": 268539, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "748b6b8b-2edb-4d2c-a8a8-b7bc69b2073f": {"__data__": {"id_": "748b6b8b-2edb-4d2c-a8a8-b7bc69b2073f", "embedding": null, "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21", "node_type": "4", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "7b8ab6f4cd22076034037208ddad5c4e39dec1170ddfde79e3ef7c946fa0a322", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "08095a1c-786c-4e5c-b688-28164b24f11e", "node_type": "1", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "789107b1c2aaec6ff850211a84cd4914d6482ae6c3de36d1165d755ede3bf77b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4072bf9b-e8eb-4a62-81eb-e6ef8a3c8809", "node_type": "1", "metadata": {}, "hash": "5a60969e994058e7d64c322fadf7feac8bb9f01284873e16de18c12fb7feebe0", "class_name": "RelatedNodeInfo"}}, "text": "The mix will vary for each Service Wrap depending on the unique needs of the underlying Product.\nA basic Service Wrap is illustrated in Figure 9-6.\nFigure 9-6: Enterprise Agile Service Wrap\nService Management Wrapper\n     Platform\nApplication Support & Maintenance\nNew Business Services\n   Continual Improvement\nTooling\nSkills\n  Service Agility 249\n\nThe Service Wrap is based on the following key elements:\n\u25cb Service Management Wrapper - The fundamental processes that manage the service using an appropriate supporting toolchain, initially implementing the MVS and growing as required. The Managed Service Wrapper is based on a set of appropriate processes implemented by qualified Service Delivery Managers, Service Support and Process Analysts, and specialist teams\n\u25cb Platform - The Service Wrap must manage the underlying infrastructure of the Product. This may be physical \u2018tin\u2019 on premises or in data centres, or Cloud-based infrastructure. Platform Engineering specialists will be required to deliver the Service Wrap. Platform-as-a-Service (PaaS), Software-as-a-Service (SaaS) and Infrastructure-as-a-Service (IaaS) components may all be relevant depending on the Product\n\u25cb Application Support and Maintenance - By definition, an IT service is delivered by an existing application stack. Often the technology is dated, and technologists will lose interest when supporting\nit, leading to staff retention issues. This application will require support, together with any required changes and new product implementations. The Service Wrap should ensure that the Product can deliver value to the business. Incidents will arise, issues will be identified, and improvements will be required, all of which\nmay impact the value earned. Incident and problem management processes are required, supported by resources to resolve any application issues that arise. It\u2019s worth considering the backlog of technical debt alongside user-driven support and maintenance items. Constant tactical solutions and \u2018quick fixes\u2019 may introduce technical debt and erode quality if not managed carefully\n 250\nService Agility\n\n\u25cb New Business Services - The Service Wrap isn\u2019t just about\nkeeping the infrastructure and application lights on. Product delivery doesn\u2019t stop with the MVP. Each Product Increment will transform the service in some way, and this must be supported by an appropriate change management approach. Some change will modify existing services, whilst others will introduce Service Wraps of their own. This area is often where new technology is introduced, providing challenges for staff.\nEach aspect of the Service Wrap has Continuous Improvement at its core. Regular Service Wrap retrospectives will help identify gaps and areas for improvement, creating new backlog items to enhance and improve the MVS.\nThere is much more to the Service Wrap than process and tooling alone. As with any Agile transformation, there is a Culture and Values dimension. Having the right people, with the right skills and the right mindset, is fundamental.\n Service Agility 251\n\n Establishing the Service Wrap\nThe Enterprise Agile method provides a repeatable pattern for delivery that can be specialised to help navigate the creation and implementation of the Service Wrap by treating it as a Product like any other.\nThe specialised pattern is defined in Figure 9-7.\nFigure 9-7: MVS Delivery Pattern\n   Maturity Assessment\nService Design\nRapid Take-on\nFeasibility Discovery Delivery\nEach step should deliver value to the business:\nMaturity Assessment\nTake stock of your organisation\u2019s maturity to run the service. Undertake a \u2018state of the nation\u2019 review to understand what is currently in place, what works, what doesn\u2019t, and where the pain points are.\n    252 Service Agility\n\nService Design\nFormulate a process backlog for the target service to address the gaps identified by the maturity assessment. Prioritise the backlog into an MVS view, identify any quick wins and establish a plan for delivering the MVS. Identify and address key Delivery risks and prioritise to achieve the \u2018No surprises endgame.\u2019\nRapid Take-On\nImplement the plan to deliver the MVS, including any knowledge transfer required and establishing any tooling. Refine the process backlog as you progress and capture lessons learned during the Delivery.\nThis is not an academic or box-ticking exercise. Each Service Wrap\nwill have characteristics unique to the organisation. Identify the target Service Wrap, understand the appropriate MVS for the product and organisation, and then apply the pattern to implement it. Consider the Service Wrap from the outset of product delivery, and work toward the MVS in readiness for launching the MVP.\nDon\u2019t try to \u2018boil the ocean\u2019. Assess what is currently in place, understand the key areas of risk, and build a plan to address them with the MVS. Continue to review the service\u2019s product backlog and build Continuous Improvement into the way of working right from the start.\n Service Agility 253\n\n Key Points\n1.", "start_char_idx": 267514, "end_char_idx": 272518, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4072bf9b-e8eb-4a62-81eb-e6ef8a3c8809": {"__data__": {"id_": "4072bf9b-e8eb-4a62-81eb-e6ef8a3c8809", "embedding": null, "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21", "node_type": "4", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "7b8ab6f4cd22076034037208ddad5c4e39dec1170ddfde79e3ef7c946fa0a322", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "748b6b8b-2edb-4d2c-a8a8-b7bc69b2073f", "node_type": "1", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "c35041ab90be67f92d8ae0ca3ac46b80ed111ed11cf7d050a806acc4f16b4845", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d21e97a4-53e2-44b1-8a36-d125f521d76a", "node_type": "1", "metadata": {}, "hash": "2f5dddac7d8f7f4433301aa1375635180b160af29c3d1fcd11d294f137417dcf", "class_name": "RelatedNodeInfo"}}, "text": "Refine the process backlog as you progress and capture lessons learned during the Delivery.\nThis is not an academic or box-ticking exercise. Each Service Wrap\nwill have characteristics unique to the organisation. Identify the target Service Wrap, understand the appropriate MVS for the product and organisation, and then apply the pattern to implement it. Consider the Service Wrap from the outset of product delivery, and work toward the MVS in readiness for launching the MVP.\nDon\u2019t try to \u2018boil the ocean\u2019. Assess what is currently in place, understand the key areas of risk, and build a plan to address them with the MVS. Continue to review the service\u2019s product backlog and build Continuous Improvement into the way of working right from the start.\n Service Agility 253\n\n Key Points\n1. The Service Wrap should not be a blocker to product development or speed of delivery but can be used as a control mechanism.\n2. The Service Wrap should account for\nthe ambitions of the organisation. If the perception is that it is a blocker, it should be re-evaluated and updated.\n3. Don\u2019t try and boil the ocean. Assess what you have, identify the key risks and issues, and develop a plan to address them. Review frequently.\n4. Continual Service Improvement should be embraced and embedded into the organisation\u2019s ways of working.\n5. An effective Service Wrap isn\u2019t just about process. Ensure the right tools and skilled team members are in place to support it.\n 254 Service Agility\n\n Chapter 10\nThe Journey to Agility\n\nFollowing the first release of this book, we were often asked to talk to organisations about what Agile is, and what benefits it brings. More recently, we have been approached for advice on how to adopt it, or how to recover a failing adoption.\nThe key to success with Agile is understanding that it is not an end in itself, but rather it is a journey and a way of being. This may sound a little hippyish, but it is a key point - achieving greater organisational Agility can only come by adjusting thinking and embedding this into the culture.\nIn this chapter, we explore some of the lessons learned from working with organisations on their journey \u2013 what works, and what does not. It should be recognised that this is a long-term commitment and that benefits will not be realised overnight.\nWe strongly believe in a heavy dose of pragmatism around Agility - try things, fail fast and do not slavishly follow new ways of working that are not right for your organisation.\nConcepts\nThe Rise of the Commercial Agile Framework\nRecent years have seen the emergence of several Agile frameworks, all describing an approach that supports the adoption of Agile at scale:\n\u25cb \u25cb\nLarge-Scale Scrum (LeSS) \u2013 Scaling of the familiar Scrum approach to Agile, developed in 2005\nThe Scaled Agile Framework (SAFe) \u2013 Developed in 2011\n 256\nThe Journeyto Agility\n\n\u25cb Disciplined Agile Delivery (DAD) \u2013 From the 2012 book\n\u25cb The \u2018Spotify Model\u2019 \u2013 A description of Spotify\u2019s operating model from October 2012 that is frequently misinterpreted as a template for an Agile organisation\n\u25cb Nexus \u2013 Created in 2015 by Ken Schwaber, one of the co-creators of Scrum\n\u25cb Scrum at Scale \u2013 Developed by Jeff Sutherland (co-creator of Scrum) in collaboration with Alex Brown.\nThese frameworks have been influenced by experiences of delivering Agile within large organisations. They share common influences (Lean, Product Thinking, Scrum) and include some good practices and ideas.\nLarge scale organisations, envious of the pace of change that smaller start-up rivals achieve, often see the adoption of a commercial\nlarge scale Agile framework as a shortcut to increased Agility. These frameworks offer the comforting option to \u2018buy in\u2019 accreditation,\na shared language for a big corporate, and what appears to be a process-driven approach to implementation and delivery. In this chapter, we explore the risks associated with the notion that one can implement \u2018Agile in a box\u2019.\nChange Management\nAnyone who has been involved in a significant business change initiative will recognise the difficulties in making process and cultural changes.\nEmbracing Agile within an organisation is no different:\n\u25cb People are naturally resistant to having change imposed upon them\n- Initiatives introduced without buy-in from the people who are engaged in the change are far less likely to be successful\n The Journeyto Agility 257\n\n\u25cb The effects of change can\u2019t be predicted - What works in one organisation is a poor indicator of what will work in another, which will be an entirely different collection of individuals, processes and environments.\nDelivering change on the scale of Agile adoption requires a groundswell of support spanning the organisation at all levels, from the senior leadership outwards.", "start_char_idx": 271728, "end_char_idx": 276492, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d21e97a4-53e2-44b1-8a36-d125f521d76a": {"__data__": {"id_": "d21e97a4-53e2-44b1-8a36-d125f521d76a", "embedding": null, "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21", "node_type": "4", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "7b8ab6f4cd22076034037208ddad5c4e39dec1170ddfde79e3ef7c946fa0a322", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4072bf9b-e8eb-4a62-81eb-e6ef8a3c8809", "node_type": "1", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "b424502c461a50bd175be51be8d561c2a672d2ff2db91db251c8c09c18d5f1e9", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "88845729-021c-4536-a5e2-e4b218d383f1", "node_type": "1", "metadata": {}, "hash": "bc50c05ce058a4b62c73f35335ff3957e2bb695d76b9420b81061c8b31ba51a9", "class_name": "RelatedNodeInfo"}}, "text": "In this chapter, we explore the risks associated with the notion that one can implement \u2018Agile in a box\u2019.\nChange Management\nAnyone who has been involved in a significant business change initiative will recognise the difficulties in making process and cultural changes.\nEmbracing Agile within an organisation is no different:\n\u25cb People are naturally resistant to having change imposed upon them\n- Initiatives introduced without buy-in from the people who are engaged in the change are far less likely to be successful\n The Journeyto Agility 257\n\n\u25cb The effects of change can\u2019t be predicted - What works in one organisation is a poor indicator of what will work in another, which will be an entirely different collection of individuals, processes and environments.\nDelivering change on the scale of Agile adoption requires a groundswell of support spanning the organisation at all levels, from the senior leadership outwards.\nBJSS Opinion Holistic Adoption\nTo be successful, Agile adoption must be holistic. It cannot be considered only as a feature of the system development lifecycle (SDLC) in the IT department. While a partial transition can add value, making Agile delivery work well impacts all aspects of the organisation.\nWhere this holistic approach is not taken, we have seen many anti-patterns, including \u2018Developer-only\u2019 Agile, where Waterfall requirements are \u2018delivered\u2019 using development Sprints, or Sprint-based release candidates only being released on a twice-yearly basis, reducing the benefits delivered in a holistic adoption.\nOne Size Does Not Fit All\nAgile is not an end in itself, and not a desirable state of being in its\nown right. Agile practices, as we\u2019ve seen, are helpful in accelerating innovation, reducing risk and improving delivery success. However, these outcomes can be achieved with a variety of very different practices, which all sit under the umbrella of Agile values and the principles described in the Agile Manifesto.\n 258 The Journeyto Agility\n\nIn practice, we have seen that aspiring to adopt a particular, fixed form of Agile is significantly more likely to fail when the characteristics of the organisation are not taken into account. Organisations should guard against engaging professional Agile coaches who attempt to impose a particular Agile variant that is not appropriate for the situation.\nLarge scale adoptions of commercial, off-the-shelf frameworks (LeSS, SAFE, DAD etc.) often fall foul of this approach. They attempt to proceduralise Agile practices into a universally applicable approach that doesn\u2019t recognise the cultural and structural complexities of\nreal organisations.\nAgile Transformational Models\nWe have seen several patterns in organisations attempting to foster Agile working practices:\n\u2018Big Bang\u2019\nThe whole organisation makes a single, coordinated \u2018step change\u2019 to Agile \u2013 typically using a commercial framework as a base. As a result, the organisation will often be forced to be prescriptive in the application of Agile, effectively swapping one process-driven framework for another, and failing to embrace real Agility.\nThe Incubation Model\nAn extreme approach, in which a new, independent department is spun up, typically in a new creative environment, unconstrained by many of the \u2018old rules\u2019. This approach engenders resentment and conflict from the \u2018old world\u2019, followed quickly by significant attrition.\n The Journeyto Agility 259\n\nChanging Key Positions\nIn this model, senior personnel are replaced, typically by external hires or consultants who bring in new ways of working. Cultural resistance from the \u2018old guard\u2019 is the predictable consequence.\nWe advocate a more adaptive, incremental approach to Agile transition:\n\u25cb Start small, deliver early and embrace a tight feedback loop\n\u25cb Track progress and publicise success\n\u25cb Fail fast and adapt less successful efforts\n\u25cb Identify and specifically target any organisational blockers\n\u25cb Encourage and guide rather than control and define.\nWe explore these ideas further later in this chapter.\n 260 The Journeyto Agility\n\nExample Barriers to Agility Table 10-1: Barriers to Agility\n Barrier\n   Approach\n   Benefit\n   Insufficient insight and information into user needs\n  Fast feedback from frequent release cycles and community input from social media\n  Increased flexibility to meet customer needs\n   Lack of understanding of Agile methods and principles across the organisation\n Foster a learning organisation that encourages education and supports new working practices:\nRead this book!\n Improved culture of delivery and customer focus.", "start_char_idx": 275571, "end_char_idx": 280135, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "88845729-021c-4536-a5e2-e4b218d383f1": {"__data__": {"id_": "88845729-021c-4536-a5e2-e4b218d383f1", "embedding": null, "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21", "node_type": "4", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "7b8ab6f4cd22076034037208ddad5c4e39dec1170ddfde79e3ef7c946fa0a322", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d21e97a4-53e2-44b1-8a36-d125f521d76a", "node_type": "1", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "4b3c8fc378280859a461d5e7f621f322a92975e9d1fe900b996724ab2e7f148b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "799817cb-2f20-4e81-9aa5-e0127c2a9958", "node_type": "1", "metadata": {}, "hash": "cb85cbef2417494545a12d32d8d94615bd2635ebdce94ae520a4790b2ad2ba5f", "class_name": "RelatedNodeInfo"}}, "text": "Cultural resistance from the \u2018old guard\u2019 is the predictable consequence.\nWe advocate a more adaptive, incremental approach to Agile transition:\n\u25cb Start small, deliver early and embrace a tight feedback loop\n\u25cb Track progress and publicise success\n\u25cb Fail fast and adapt less successful efforts\n\u25cb Identify and specifically target any organisational blockers\n\u25cb Encourage and guide rather than control and define.\nWe explore these ideas further later in this chapter.\n 260 The Journeyto Agility\n\nExample Barriers to Agility Table 10-1: Barriers to Agility\n Barrier\n   Approach\n   Benefit\n   Insufficient insight and information into user needs\n  Fast feedback from frequent release cycles and community input from social media\n  Increased flexibility to meet customer needs\n   Lack of understanding of Agile methods and principles across the organisation\n Foster a learning organisation that encourages education and supports new working practices:\nRead this book!\n Improved culture of delivery and customer focus. Teams bound by common goals, enhanced employee engagement\n Resistance to change and attachment to existing organisational boundaries\n  Greater autonomy and empowerment for Agile Teams and individuals\n  Opportunity for greater visibility of the value of employee contribution\n Existing supplier contracts and incentives not aligned to\nbroader goals\n  Agile contracting based on outcomes and organisational goals\n  Suppliers can contribute more directly to the value delivered\n Imperative to maximise existing investments in physical technology\n  Flexible on-demand infrastructure provisioning using Cloud technology\n  More flexible commercial models and reduced capital investment\n Procurement and compliance processes limiting flexibility to introducing technology\n   Open Source technologies that can be downloaded and used immediately\n   Lower procurement and technology costs and teams are able to start delivering sooner\n   The Journeyto Agility 261\n\nTable 10-1 continued: Barriers to Agility\n Barrier\n   Approach\n   Benefit\n   Risk-averse culture\nand high overhead for technology releases and business change\n Smaller, more frequent releases of changes that are inherently less risky\n Greater flexibility to respond to evolving market needs\n Funding and governance geared to big decisions vs several smaller ones\n   Value-based decisions made more often for smaller amounts by empowered teams\n   Ability to \u2018fail fast\u2019 and learn with minimal investment\n  A Culture of Innovation and Continuous Improvement\nTeams will only embark on the transition to a more Agile mindset if the culture and values of the organisation support it.\nRather than coming from the top of the organisation, innovation frequently occurs in teams empowered to improve the way they work with the space to innovate and the freedom to make occasional mistakes.\nThis also means being Agile with organisational structures. Often, a team starting to adopt Agile processes highlights the problem that supporting or dependent teams are not Agile, hindering the delivery process.\nFinally, it is important to recognise that the working environment plays a key part in working culture. Teams need space to collaborate, create and step out of their normal ways of working.\n 262 The Journeyto Agility\n\nThis doesn\u2019t mean you need table football and bean bags, but you should consider changing the focus from \u2018sit down\u2019 meeting rooms to Stand-up areas, providing whiteboards and collaborative team spaces.\nUse Appropriate Funding and Commercial Models\nFunding cycles can have a major impact on the ability of the organisation to deliver value.\nAn Agile IT and business function steered by a Waterfall governance cycle becomes an iterative rather than truly Agile organisation. The delivery organisation iterates towards an unchanging goal, and the true benefits of Agile are lost.\nTo gain the benefits of true Agility, organisations must adopt smaller, Leaner funding cycles, with initiative objectives set more as outcomes rather than presupposing fixed deliverables, months or even years ahead of time.\nFunding and procurement strategies will also have an impact on the behaviour of suppliers. People generally want to do the right thing as an employee. The same is true of most suppliers. In our experience, while suppliers want to make a profit, they also care about doing a good job because they\u2019re proud of it.\nAn organisation will likely want to ensure it gets good value from its suppliers. Various mechanisms exist to incentivise suppliers to deliver and behave in the right way. The substantive point is that incentives are used to drive behaviours - make sure you pick the right incentives such that they align with your organisation\u2019s goals. We have seen examples where this has gone awry. In one situation, a software partner was measured by the number of lines of code it delivered!\n The Journeyto Agility 263\n\nThe Enterprise Agile Approach\nAdopting Agility within the Organisation\nGreater Agility is not achieved solely through training courses and implementing a new target operating model. Some organisations attempt a \u2018sheep dip\u2019 conversion process only for their people to arrive back in the office following the training course wondering where to begin.\nA \u2018big-bang\u2019 transformation of the entire organisation is unlikely to\nbe successful.", "start_char_idx": 279126, "end_char_idx": 284457, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "799817cb-2f20-4e81-9aa5-e0127c2a9958": {"__data__": {"id_": "799817cb-2f20-4e81-9aa5-e0127c2a9958", "embedding": null, "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21", "node_type": "4", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "7b8ab6f4cd22076034037208ddad5c4e39dec1170ddfde79e3ef7c946fa0a322", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "88845729-021c-4536-a5e2-e4b218d383f1", "node_type": "1", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "fdc52e9ab5f8538474e0b1ee10bb61ef6fc17fdb939c0410d4cd5a8c64021f09", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a6264c02-2951-4925-8b94-c1da7ff43983", "node_type": "1", "metadata": {}, "hash": "3eab20cce8a27fd7d88f586eec9e3a1e11ccccde7685d0557b490d07d6a7fe45", "class_name": "RelatedNodeInfo"}}, "text": "An organisation will likely want to ensure it gets good value from its suppliers. Various mechanisms exist to incentivise suppliers to deliver and behave in the right way. The substantive point is that incentives are used to drive behaviours - make sure you pick the right incentives such that they align with your organisation\u2019s goals. We have seen examples where this has gone awry. In one situation, a software partner was measured by the number of lines of code it delivered!\n The Journeyto Agility 263\n\nThe Enterprise Agile Approach\nAdopting Agility within the Organisation\nGreater Agility is not achieved solely through training courses and implementing a new target operating model. Some organisations attempt a \u2018sheep dip\u2019 conversion process only for their people to arrive back in the office following the training course wondering where to begin.\nA \u2018big-bang\u2019 transformation of the entire organisation is unlikely to\nbe successful.\nThe only time we advocate starting with a fully Agile model in mind is a greenfield scenario, for example, when bringing a previously outsourced service in-house, or launching a brand-new product. For most organisations, a fundamental cultural shift is required, which is typically only achieved through a concerted effort and with commitment from motivated, sponsored and engaged people.\nWe recommend taking an Agile approach to becoming more Agile:\n1. Plan the Agile journey in the same way as we have described for product delivery\n2. Outline a set of goals for the organisation, develop a roadmap and then progressively move towards achieving these goals incrementally using a Sprint pattern\n3. Measure success against outcomes, be realistic about where you have failed and adapt accordingly. View failure as a useful output of the process and react to it positively\n4. Be mindful of toolset and terminology, but don\u2019t obsess over them.\nProject collaboration toolsets, continuous delivery infrastructure and communication channels are helpful, but in themselves do not make the organisation Agile.\n 264\nThe Journeyto Agility\n\n  A suggested journey to Agility may look something like that shown in Figure 10-1.\nFigure 10-1: Suggested Journey to Agility\n Create a Roadmap\nIdentify\nOwners for Change\nReview and Refine\nLearn the Lessons\nFind an Owner for Change\nDevelop Core Process/Tools\nImplement an Exemplar\n  Ensure CEO/CIO Sponsorship\nPublish Success\nBroaden the Scope\n The Journeyto Agility\n265\n\n\u25cb Ensure you have sufficient sponsorship to be successful \u2013 often the CEO or CDO\n\u25cb Identify drivers for change and articulate them as organisational goals\n\u25cb Create a roadmap for key initiatives and desired value\n\u25cb Find an owner to lead the change and ambassadors to support them\n\u25cb Develop the core processes and tools to support the transition\n\u25cb Implement across a small number of exemplar products\n\u25cb Constantly review and refine the approach using feedback for each increment\n\u25cb Adjust the roadmap based on lessons learned from early adopters\n\u25cb Broaden the scope to further products across the organisation\n\u25cb Encourage knowledge sharing between teams and publish successes.\nIn summary, there isn\u2019t a \u2018project\u2019 to become Agile. Identify goals, produce a roadmap and provide support to teams to help them achieve those goals. The journey to Agile requires ongoing support, not just formal training - identify individuals able to coach teams and help them to develop their skills.\nMonitor Maturity\nUseful tools to identify the progress being made on the Agile journey are those that track change or progress over time. We\u2019ve seen some success through the use of carefully worded surveys, which are sufficiently lightweight to be repeated at regular intervals.\nA more detailed approach involves the use of Maturity Models. These can be used to give a measurable demonstration of progress but must\n 266 The Journeyto Agility\n\nbe carefully designed around \u2018outcomes\u2019 rather than to test conformity to a set of expected practices.\nFor example, the team should be assessed against a holistic measure of whether or not they achieved an objective, rather than simply if they implemented the required Scrum processes. Agile is a mechanism to help the team define, manage and work towards those objectives.\nFrom a process perspective, there is value in assessing against the expectations you define whilst running Scrum - e.g., does the team regularly define proper objectives for a Sprint and meet them? This is an indication of their capability maturity and will help direct further support.\nThe key difference is that the team should be judged on whether they met their objectives. Any measurement of how they met their objectives is purely for assisting in their development and not for judgement.\nWhen assessing an organisation against a Maturity Model, expect different Product Teams to be at different levels of maturity. Each team and product is different and their rate of progression will differ, often due to real-world constraints. A Maturity Model can help highlight which teams need additional coaching or support.", "start_char_idx": 283516, "end_char_idx": 288576, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a6264c02-2951-4925-8b94-c1da7ff43983": {"__data__": {"id_": "a6264c02-2951-4925-8b94-c1da7ff43983", "embedding": null, "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21", "node_type": "4", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "7b8ab6f4cd22076034037208ddad5c4e39dec1170ddfde79e3ef7c946fa0a322", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "799817cb-2f20-4e81-9aa5-e0127c2a9958", "node_type": "1", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "fae59550da85e251361c4485f2e40e193eb8a1360eb484ac136842c93c026324", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "bf81922e-dd54-43fa-b26a-4a2c13df2aae", "node_type": "1", "metadata": {}, "hash": "e45f6121b1199a8eae960de35d4ddf02d29ccb67a89951ed7b3671b4b749aa1e", "class_name": "RelatedNodeInfo"}}, "text": "Agile is a mechanism to help the team define, manage and work towards those objectives.\nFrom a process perspective, there is value in assessing against the expectations you define whilst running Scrum - e.g., does the team regularly define proper objectives for a Sprint and meet them? This is an indication of their capability maturity and will help direct further support.\nThe key difference is that the team should be judged on whether they met their objectives. Any measurement of how they met their objectives is purely for assisting in their development and not for judgement.\nWhen assessing an organisation against a Maturity Model, expect different Product Teams to be at different levels of maturity. Each team and product is different and their rate of progression will differ, often due to real-world constraints. A Maturity Model can help highlight which teams need additional coaching or support. Re-running the Maturity Model as a lightweight health check can demonstrate progress towards the company objectives.\nThe Maturity Model should also include the capabilities of the organisation. For example, a successful Agile Product Team will have\na bias towards some skillsets over others compared with traditional delivery - for example, automation testers over manual, \u2018infrastructure as code\u2019 DevOps engineers over traditional infrastructure engineers.\nKeep the model simple and supportive. Detailed audits are likely to create concern and are not necessary for an ability-led organisation where experienced Agile leaders work with Product Teams.\n The Journeyto Agility 267\n\n A typical Agile Maturity Model might include:\n\u25cb A series of assessments aligned to the different aspects of Agile product delivery (define, develop, assure, deploy, operate)\n\u25cb A basic rating mechanism that identifies maturity against each category\n\u25cb A method of positioning the different aspects of the team\u2019s work on a maturity scale\n\u25cb A set of prioritised recommendations to take the team to the next stage of maturity.\nAn example of a maturity assessment for a Technical Delivery Team is illustrated in Figure 10-2.\nFigure 10-2: Example Maturity Assessment\nDefine\nDevelop\nDeploy Assure Operate\n Requirements Management\n Source Control and Versioning\n Server Provisioning\n Peer Code Review\n Configuration Management\n Agile Planning and Task Management\n Continuous Integration\n Build Artefact Repository\n Functional Test Automation\n Metrics\nand Log Consolidation\n Release Management\n IDE Code Quality\n Self Service Deployment\n Non-Functional Test Automation\n Monitoring and Alerting\n Wiki / Project Pages\n Central Code Quality\n Deployment Testing\n Defect Management\n IT Service Management\nDeveloping\nMaturing\nCompleted\n 268\nThe Journeyto Agility\n\nFoster Supplier Collaboration\nA key aspect of achieving more rapid change and Agility is to ensure that all barriers are removed. No operational silos should exist and all contributing parties should be aligned with the same goal.\nThis is often why the organisations spearheading Agility are technology start-ups. They are not constrained by legacy systems and processes and have the brand (and finances) to attract and retain the skilled people they need.\nMost organisations do not retain all of the skills they need in-house and augment their numbers and capability by engaging external suppliers. Getting this relationship right requires effort. Long-term partnerships undoubtedly achieve more than a revolving door of different suppliers. The closer you get to making suppliers an extension of your organisation and motivated around common goals, the more likely you are to achieve results. This suggests a more collaborative approach than traditional procurement-driven relationships.\nFunding for Success\nMany factors play into the funding arrangements \u2013 either for internal teams, or external delivery partners. The organisation will naturally seek to incentivise all teams around its goals, but such outcome-based arrangements can be hard to broker.\nFour elements require measurement and control:\n\u25cb Delivery \u2013 Have the required outputs been produced?\n\u25cb Quality \u2013 Are the outputs delivered to the required standard?\n\u25cb Collaboration \u2013 Has the team worked collaboratively with other parts of the organisation?\n The Journeyto Agility 269\n\n\u25cb Cost \u2013 Have all objectives been met cost-effectively?\nWhen working with external suppliers, the client organisation needs everyone to cooperate to deliver services to the appropriate quality standard. Several models can be used to drive the required behaviours and achieve the results. These exist on a spectrum from Time and Materials to Fixed Price.\nAll models have pros and cons, as outlined in Table 10-2.", "start_char_idx": 287667, "end_char_idx": 292359, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bf81922e-dd54-43fa-b26a-4a2c13df2aae": {"__data__": {"id_": "bf81922e-dd54-43fa-b26a-4a2c13df2aae", "embedding": null, "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21", "node_type": "4", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "7b8ab6f4cd22076034037208ddad5c4e39dec1170ddfde79e3ef7c946fa0a322", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a6264c02-2951-4925-8b94-c1da7ff43983", "node_type": "1", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "bdc220b15f2779e05d611dbaea712ddacfcf3deeecdb221f632e5d454e931e09", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "876e9ab1-f2d2-401f-a97d-ada86be8312f", "node_type": "1", "metadata": {}, "hash": "20ea70fe1526e43cb667dd54540a88f65c482f58d18bb6cf0382cfa242558221", "class_name": "RelatedNodeInfo"}}, "text": "This suggests a more collaborative approach than traditional procurement-driven relationships.\nFunding for Success\nMany factors play into the funding arrangements \u2013 either for internal teams, or external delivery partners. The organisation will naturally seek to incentivise all teams around its goals, but such outcome-based arrangements can be hard to broker.\nFour elements require measurement and control:\n\u25cb Delivery \u2013 Have the required outputs been produced?\n\u25cb Quality \u2013 Are the outputs delivered to the required standard?\n\u25cb Collaboration \u2013 Has the team worked collaboratively with other parts of the organisation?\n The Journeyto Agility 269\n\n\u25cb Cost \u2013 Have all objectives been met cost-effectively?\nWhen working with external suppliers, the client organisation needs everyone to cooperate to deliver services to the appropriate quality standard. Several models can be used to drive the required behaviours and achieve the results. These exist on a spectrum from Time and Materials to Fixed Price.\nAll models have pros and cons, as outlined in Table 10-2. Table 10-2: Commercial Models\n Model\n   Characteristics\n   Advantages\n   Disadvantages\n   Time and Materials\n  \u25cb Supplier invoices\nfor all work delivered\n  \u25cb Simple to administer\n  \u25cb Supplier not incentivised to deliver to\nbudget\n   Target Pricing\n  \u25cb Both parties agree a price\n\u25cb Overrun charged at a\nreduced rate\n  \u25cb An element of risk\ntransfer to the supplier\n\u25cb Outcome focus\n  \u25cb Requires both parties to\nagree a price upfront\n   Iterative Delivery\n  \u25cb Payments are based around\nincremental delivery\n  \u25cb Flexibility to fit Agile\ndelivery\n\u25cb Penalty/bonus agreed Sprint\nby Sprint\n  \u25cb Assumes all parts make\nthe whole\n\u25cb Risks focusing on iteration incentive vs\nfinal outcome\n  Continued overleaf\n 270 The Journeyto Agility\n\nTable 10-2 continued: Commercial Models\n Model\n   Characteristics\n   Advantages\n   Disadvantages\n   Service Levels\n \u25cb Fee including bonus or penalties based on\nperformance against SLA\n \u25cb Requires a service\nthat can be defined and measured\n \u25cb Can miss broader\norganisation goals and outcomes\n Productivity Based\n   \u25cb Supplier is rewarded\nbased\non items produced\n   \u25cb Assumes a price can be\nset for a unit of delivery\n   \u25cb No universally recognised sizing unit\nthat is easy to implement\n   Fixed Price\n  \u25cb Both parties agree a firm price for the deliverables\n  \u25cb Notionally transfers risk\nfrom client to supplier\n  \u25cb Risk premium\n\u25cb Requires clear upfront scope\ndefinition\n\u25cb Change control\nchallenges\n  No model is perfect for both parties. In our view, the best outcome is achieved when penalties and incentives are fair, balanced and based on straightforward performance measures.\nIdeally, client and supplier will consider supplier contribution as an ongoing activity without constant reference to a contract. The more the vendor and supplier trust each other, the more value each will get from the relationship.\n The Journeyto Agility 271\n\n Key Points\n1. Adopting Agile is not just about changing your SDLC, it often requires a holistic cultural shift within the organisation.\n2. Avoid trying to move the whole organisation in one go. Focus on successes in smaller areas and build on these.\n3. Be wary of \u2018Agile in a box\u2019 approaches\nand avoid obsessing about Agile as an end in itself.\n4. Recognise that a lightweight audit process and Maturity Model can be invaluable\nto assess where you can improve the effectiveness of your ways of working and measuring progress.\n5. When contracting suppliers, be sure to align any incentives and penalties with organisational and product delivery goals.\n 272 The Journeyto Agility\n\n Chapter 11\nEnterprise Data\n\nPrevious iterations of this book have focused on the application of Enterprise Agile to the delivery of software projects. In this new chapter, we look at how to apply some of the principles and values of Enterprise Agile to the delivery of data projects\n\u2013 a rapidly increasing proportion of the work we undertake with clients.\nAgile is a word not commonly associated with the pace at which data projects move. They are well known for delivering slowly, being heavily IT-driven and lacking necessary levels of interaction with the rest of the business. Despite the way software delivery has progressed, it is only very recently that we are seeing the market start to adopt a more Agile culture and approach to data deliveries. There has been, and still is in many cases, a lack of value-driven thinking and results. It\u2019s reductive to assume that data itself is what brings value. Instead, it\u2019s how we use the data.\nData is a load bearing pillar of digital transformation, providing the information on which to make quick and effective business decisions, the foundations for automation and AI.", "start_char_idx": 291301, "end_char_idx": 296027, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "876e9ab1-f2d2-401f-a97d-ada86be8312f": {"__data__": {"id_": "876e9ab1-f2d2-401f-a97d-ada86be8312f", "embedding": null, "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21", "node_type": "4", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "7b8ab6f4cd22076034037208ddad5c4e39dec1170ddfde79e3ef7c946fa0a322", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "bf81922e-dd54-43fa-b26a-4a2c13df2aae", "node_type": "1", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "56e82b9ae4848f6413d45c0f5c91ccf1dab124b257a25d2eb7d97f265f72dea6", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d2c47cfb-60d0-4839-a245-e4dd8e99b4bc", "node_type": "1", "metadata": {}, "hash": "cce0c312e9c37d4292e66d658a3407a7960a9ccfaf9c39d62a9d1dcccc9cbaf8", "class_name": "RelatedNodeInfo"}}, "text": "In this new chapter, we look at how to apply some of the principles and values of Enterprise Agile to the delivery of data projects\n\u2013 a rapidly increasing proportion of the work we undertake with clients.\nAgile is a word not commonly associated with the pace at which data projects move. They are well known for delivering slowly, being heavily IT-driven and lacking necessary levels of interaction with the rest of the business. Despite the way software delivery has progressed, it is only very recently that we are seeing the market start to adopt a more Agile culture and approach to data deliveries. There has been, and still is in many cases, a lack of value-driven thinking and results. It\u2019s reductive to assume that data itself is what brings value. Instead, it\u2019s how we use the data.\nData is a load bearing pillar of digital transformation, providing the information on which to make quick and effective business decisions, the foundations for automation and AI. It is critical that organisations are able to move quickly, responding to a fast-changing world and customer base. Unfortunately, technologies that underpin the delivery of value in data-driven projects have, until recently, reinforced \u2018big bang\u2019 IT delivery. Fortunately, those underpinning technologies are changing, as are approaches to data delivery - DataOps and MLOps are growing in their adoption.\nThis chapter details our recommended value-oriented approach to delivering results with data: nail it, then scale it. We\nsuggest how you can implement a DataOps culture to deliver\nthe technology that supports these results. By using these approaches, you can deliver the data you need, when you need it, in the way that you need \u2013 and then exploit it as you need it.\n 274 Enterprise Data\n\nConcepts\nData Lake, Data Lakehouse, Data Mesh, Data Fabric\nSome of the most popular and talked about architectural patterns for large scale and varied data today are architectures designed and evolved within the era of \u2018big data\u2019.\nThe data lake was an early big data paradigm, a place to store data\nof many different types, allowing for the exploitation of unstructured, semi-structured and structured data, at scale, in a distributed manner. This architecture and the software that enabled it were a step change in capability and the foundation of today\u2019s data platforms. At the same time, the key technology was one of the primary reasons that projects saw such huge failure rates (one Gartner analyst claimed in 2017 that 85% of big data projects failed). While it may have started a data revolution, the technology was difficult to use effectively, with several cons that were often ignored or papered over in the rush to be big data driven.\nData technology and architecture has evolved quickly since then, as\nhas our collective experience. As part of this evolution, and to resolve some of the downsides of the data lake paradigm, the data lake has developed into the data lakehouse, a combination of data lake and\ndata warehouse. With many organisations feeding a downstream data warehouse with data in their lake, the lakehouse merges these popular yet quite different data architectures into one. The result is designed to maintain many of the benefits of each while avoiding some of the painful downsides experienced in separation. It aims to bridge the structured and curated natured of a warehouse with the less structured nature of a lake. This results in accelerated availability of data through a reduction in the data engineering required, as well as data that can be optimised on the fly for uses such as query, visualisation and analytics.\n Enterprise Data 275\n\nMore recent still is the data mesh paradigm, mirroring a question experienced throughout IT - centralisation vs decentralisation. Where modern data architectures have attempted to centralise data, reducing silos through ingestion and management of data in a single enterprise data platform, data mesh looks to decentralise data ownership and management, with distributed data domains managed like data \u201cproducts\u201d with common self-serve components of data infrastructure provided as-a-platform to those managing domain data sets. This product-based approach to data is growing in popularity, and roles like Data Product Manager are starting to reach the mainstream.\nFinally, the data fabric, one of Gartner\u2019s Top Strategic Technology\ntrends for 2022. Whereas the other concepts covered in this section are architectures, data fabric is more conceptual. The \u201cfabric\u201d is a layer of data and information of all different forms (video, audio, text, structured tables, graphs, etc.), often using multiple technologies and architectural patterns for storage, processing and retrieval (e.g., a graph database, a search index, a data lake, and a relational database). Automation and machine learning are a part of the fabric itself \u2013 for example, extraction of structured entities and features from free text into a knowledge graph, or extraction of information from image and videos.", "start_char_idx": 295057, "end_char_idx": 300076, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d2c47cfb-60d0-4839-a245-e4dd8e99b4bc": {"__data__": {"id_": "d2c47cfb-60d0-4839-a245-e4dd8e99b4bc", "embedding": null, "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21", "node_type": "4", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "7b8ab6f4cd22076034037208ddad5c4e39dec1170ddfde79e3ef7c946fa0a322", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "876e9ab1-f2d2-401f-a97d-ada86be8312f", "node_type": "1", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "04753f9c7f3bb361c6f07871aafa53fb890a068f6652ed0a398f3f8000ff69b9", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7e993ede-ab68-4887-aecd-43bc545095c9", "node_type": "1", "metadata": {}, "hash": "ca4b2d5f896b88ee4b44a9712d2d08a97fa89651c93b6acd672dda05eea4af17", "class_name": "RelatedNodeInfo"}}, "text": "This product-based approach to data is growing in popularity, and roles like Data Product Manager are starting to reach the mainstream.\nFinally, the data fabric, one of Gartner\u2019s Top Strategic Technology\ntrends for 2022. Whereas the other concepts covered in this section are architectures, data fabric is more conceptual. The \u201cfabric\u201d is a layer of data and information of all different forms (video, audio, text, structured tables, graphs, etc.), often using multiple technologies and architectural patterns for storage, processing and retrieval (e.g., a graph database, a search index, a data lake, and a relational database). Automation and machine learning are a part of the fabric itself \u2013 for example, extraction of structured entities and features from free text into a knowledge graph, or extraction of information from image and videos. This is clearly a very powerful concept; however, in our opinion, knowledge graphs would be a big step for many organisations currently struggling to develop approaches to basic data management.\nData Science\nThere is a lot of misinterpretation around data science; many assume it includes business intelligence (BI) or the descriptive analysis of data that analysts have been doing for many years.\nData science is a different discipline. It applies scientific methods and tools to extract knowledge from data. It focuses primarily on the upper end of the analytics spectrum \u2013 predictive or prescriptive analytics via\n 276 Enterprise Data\n\nmachine learning \u2013 to predict what will happen and what action can be taken to make something happen.\nSimply put, if data analytics seeks to understand data, data science seeks to make predictions with it.\nData scientists need to have skills in engineering, statistical modelling and business analysis \u2013 a hard combination to find. Therefore, the increased demand for data science and machine learning is rarely complemented by an increased understanding of data science and analytics. As a result, Data Science Teams are often formed without an appropriate level of business analysis, feasibility or design.\nMany businesses struggle to set measurable goals for data science or machine learning initiatives. To overcome this, business functions and Data Science Teams must collaborate to meet customer requirements and create a supported and maintainable solution.\nDue to the nature of the field, it\u2019s not unusual for data science to end up as a constant cycle of experiments. But data science should be so much more than experimental. Businesses need to get beyond this cycle and start generating real value from data science across the enterprise. We\u2019ll explore how to achieve this by conducting Agile data science in an enterprise context.\nDataOps and MLOps\nAs mentioned, Agile is often not associated with data projects. The same could also be said about engineering and operational rigour.\nDevOps has become the default mode for software delivery. A similar approach can be applied to data and machine learning. DataOps and MLOps are the data and machine learning versions of DevOps and they apply to the entire data and machine learning lifecycle.\n Enterprise Data 277\n\n The operation of data platforms has always been difficult, making\nthe collaboration between business owners, data and operations professionals a necessity. Principles like repeatability, automation, metrics and monitoring, and the cultural approach to data delivery are all part of this. We will explore this in more detail later in the chapter.\nFigure 11-1: The Data Lifecycle\n278\nEnterprise Data\nOrchestrate\nLineage,\nsecurity metadata, and flow\nThe Data Lifecycle\nSandbox\nAnalyse\nand prepare experimentation\n  Monitor Environment size, performance data quality, and condition\nDevelop Environments, pipelines code and automation tests\n    Define\nShare vision, strategy\ntechnology enablers\nDeploy\nReduce cycle times\nreproducible process\n\nBJSS Opinion Is Agile Data Difficult?\nIt\u2019s getting easier, but in our experience many organisations have found effective Agile delivery of data and data platforms to be challenging. Like software development, there are many benefits of taking an Agile approach to data, so it\u2019s worth facing up to the challenge.\nBig data was a paradigm shift, one driven by the availability of technology that promised huge advances. Unfortunately, this technology brought a whole new level of complexity with a giant learning curve. Paired with a skills gulf in the talent market, people working on these projects simply learned as they went along. Naturally, this resulted in many missteps and a lot of bad practice was learned (and repeated) with the good.\nAnd this is just one reason why Agile data has been difficult. What\ndoes a good data platform backlog look like? How do I test data?\nWhat comprises MVP for a data platform? How can I model the data incrementally? How do I accommodate a changing data model? Who are the users? What does the right team balance look like? What about Agile data governance? We could fill many pages with important questions\nfor which the answers were unknown.", "start_char_idx": 299230, "end_char_idx": 304313, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7e993ede-ab68-4887-aecd-43bc545095c9": {"__data__": {"id_": "7e993ede-ab68-4887-aecd-43bc545095c9", "embedding": null, "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21", "node_type": "4", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "7b8ab6f4cd22076034037208ddad5c4e39dec1170ddfde79e3ef7c946fa0a322", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d2c47cfb-60d0-4839-a245-e4dd8e99b4bc", "node_type": "1", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "ccd3f2e2e027793a024896776c89873c141d58f0ec24a907018818b1d532458c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e974e9eb-a7c9-4308-a8e1-f1a0615b9b69", "node_type": "1", "metadata": {}, "hash": "eafcf2527ad37c6fd20916ceb49a0f116188cfa64c46bb41839a592a4b929d15", "class_name": "RelatedNodeInfo"}}, "text": "Big data was a paradigm shift, one driven by the availability of technology that promised huge advances. Unfortunately, this technology brought a whole new level of complexity with a giant learning curve. Paired with a skills gulf in the talent market, people working on these projects simply learned as they went along. Naturally, this resulted in many missteps and a lot of bad practice was learned (and repeated) with the good.\nAnd this is just one reason why Agile data has been difficult. What\ndoes a good data platform backlog look like? How do I test data?\nWhat comprises MVP for a data platform? How can I model the data incrementally? How do I accommodate a changing data model? Who are the users? What does the right team balance look like? What about Agile data governance? We could fill many pages with important questions\nfor which the answers were unknown. And even once you\u2019ve got the technology working effectively and in production, there\u2019s the data itself to consider. The platform is of no value until the data is in it and made available to people to use.\nEven today, there isn\u2019t a lot of guidance on what Agile looks like in the context of data, and delivering Agile data is still challenging for most. For this reason, enterprise data programmes often still end up lacking effective formal software project management or revert to Waterfall instead. Trying to do Agile on something you know little about simply results in a Cowboy delivery approach.\n Enterprise Data 279\n\nOf course, development is not where data ends. It needs a great deal of operational care - the understanding of which you should not leave to the end or to an Operations Team alone. Operation of a data platform and the data within requires a different set of skills and roles to other software deliveries, as well as strong technical knowledge of the tools and capabilities that comprise a modern data platform.\nWe introduced the concept of DataOps earlier \u2013 DevOps for data. In our opinion, the principles of Agile and DevOps can be applied successfully to data, hence this new chapter. It does, however, require a level of expertise and experience that many organisations may still not have access to today, and a skills gap remains.\nCentralisation vs Decentralisation\nAn important set of questions that appear throughout the implementation of IT, and no less in data, are: Should I centralise or decentralise? Is there a balance to be struck? Where is it? The big data movement came with the promise of the data lake, a central location for all your analytical data and the answer to those fragmented data silos many enterprises experienced. However, silos are hard to wrestle away from their owners, especially when the new promised land is outside of their control. Many have learned this on their journey.\nIn the concepts section of this chapter, we briefly introduced the data mesh paradigm, one which favours decentralisation over the centralised approach in the ascendancy today. In the last year or two, data mesh has received some interest, though adoption is currently low and there are few referenceable examples of enterprise adoption. With many organisations feeling the pain of implementing data programmes and the often-quoted stats for data project failure rates (although many of these are outdated now), an alternative approach is appealing. However, we find it hard to recommend the adoption of data mesh at time of writing. With limited real-world examples and a lack of best practice advice,\nwe feel that a watching brief is the best recommendation. Instead of\n 280 Enterprise Data\n\nlooking at wholesale paradigm shifts, organisations should focus on decentralising their approach to data exploitation while maintaining centralised enterprise data platforms.\nWhile maintaining a central data platform as a shared business service is recommended, relying only on a central team to derive intelligence from data is not. Teams across the enterprise must be able to build and deploy their own machine learning, build their own dashboards, fuse their own data sources, and interpret their own data. A single Analytics Team is not Agile when scaling across an enterprise organisation; instead, it introduces a major bottleneck.\nTo enable Agile data-driven business at scale, exploitation of data should be decentralised through self-service capabilities in combination with fusion teams. These teams should have the skills necessary to take advantage of data quickly and effectively, as well as the understanding of the business problems faced. To ensure these teams don\u2019t eschew standards, security, privacy and all the other good things, they should\nbe supported with patterns, good practice and time from experts\n\u2013 often through a Centre of Excellence or Hub in a Hub-and-Spoke organisational model.\n Enterprise Data 281\n\nThe Enterprise Agile Approach\nAlign IT and the Business\nOne of the key issues in the delivery of IT has always been its alignment with the wider business. The same is true for data, yet its alignment\nis even further behind that of software delivery.", "start_char_idx": 303443, "end_char_idx": 308528, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e974e9eb-a7c9-4308-a8e1-f1a0615b9b69": {"__data__": {"id_": "e974e9eb-a7c9-4308-a8e1-f1a0615b9b69", "embedding": null, "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21", "node_type": "4", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "7b8ab6f4cd22076034037208ddad5c4e39dec1170ddfde79e3ef7c946fa0a322", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7e993ede-ab68-4887-aecd-43bc545095c9", "node_type": "1", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "811efbf3b7ee9235704b48f981b6aeb0428f15a0aca7aacf0b9c38d808bb41c6", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f419147d-1d8a-4c9d-871b-3b9118fc9a95", "node_type": "1", "metadata": {}, "hash": "36ca623f91246704f6164516d774b79f42f9322783a343619f0faf29732b9969", "class_name": "RelatedNodeInfo"}}, "text": "A single Analytics Team is not Agile when scaling across an enterprise organisation; instead, it introduces a major bottleneck.\nTo enable Agile data-driven business at scale, exploitation of data should be decentralised through self-service capabilities in combination with fusion teams. These teams should have the skills necessary to take advantage of data quickly and effectively, as well as the understanding of the business problems faced. To ensure these teams don\u2019t eschew standards, security, privacy and all the other good things, they should\nbe supported with patterns, good practice and time from experts\n\u2013 often through a Centre of Excellence or Hub in a Hub-and-Spoke organisational model.\n Enterprise Data 281\n\nThe Enterprise Agile Approach\nAlign IT and the Business\nOne of the key issues in the delivery of IT has always been its alignment with the wider business. The same is true for data, yet its alignment\nis even further behind that of software delivery. As a result, we\u2019re starting to see patterns emerge where data programmes are treated like software programmes.\nThis misalignment used to be, at least in part, due to the complexity\nof the technology and a lack of skills. IT departments didn\u2019t want the business seeing or being involved in projects because they were scared they\u2019d be found out. This led to more failure because, even if the technology worked, it was invariably late and not designed for users, so the business didn\u2019t want to use it.\nThis led to shadow IT, people working around data lakes, more data silos and a lot of wasted investment. Today, the profession has become better at aligning IT with the business and its users but we still see many enterprises getting it wrong.\nFocusing on Value\nOrganisations invest time and attention in data because they want to generate value from it. The great potential benefit to the organisation often prompts teams to embark on large, slow initiatives aimed\nat producing perfect results. It\u2019s not unusual to see data platform deliveries go over a year without ever being made available to a user. This is a dangerous and unnecessary approach. You won\u2019t know how users will react to what you are building or learn from how they use it.\n 282 Enterprise Data\n\nYou also restrict your ability to generate immediate value in the business and force users to find alternative routes to their goals.\nThis is not to say that teams should abandon their professional standards and resort to quick and dirty solutions. Quicker and more frequent delivery can be balanced with data management rigour and effective, user-relevant data modelling. Access to data can be provided with incremental management, similar to incremental development of system features, thereby enabling the onboarding of users as early\nas possible.\nThere is often a tendency to delay or even block delivery of data science use cases until all the data has been fully managed into a data platform. In some use cases, this is a valid approach; for example, those which are sensitive to privacy concerns or require data sources with particularly poor quality. But there are often a wide range of use cases that can progress successfully and return great value and learning to your business without waiting for completion of the platform.\nWe believe you can and should support the undertaking of analytical projects outside of an in-development platform or managed data initiative where timelines and backlogs will not effectively align. This is especially important in the early stages of your data journey. The idea that you need to spend many months getting data into a fit state before you can reap the rewards of data science is a fallacy. Additionally, the discovered needs of your analysts and data scientists will help to inform the development of your data platform.\nFocusing on delivering value in this way leads to a parallel approach to data management, data platform and data exploitation. Our experiences with this approach lead to a further recommendation: we suggest that enterprise-wide data science platforms are only put in place once several data science projects have been successfully implemented into production. This allows time to learn how the Data Science Team works best, what tools and technologies they see success with, and how you\n Enterprise Data 283\n\ncan best support them with platform components that improve their effectiveness. We call this approach nail it, then scale it.\nThinking Holistically\nA successful data programme considers data holistically. The scope encompasses considering a technology platform for managing the data, the processes for managing and governing the data, information and cyber security, data valuation and condition, analytics, BI and visualisation. Critically, it also includes how you exploit the data to support your business strategy.\nUnsuccessful data programmes can fail on any or all of these factors. Widely discussed reasons for failure include complicated technology, unrealistic expectations, lack of communication between IT and business, and skills gaps. We would also add operational complexity to this list.\nWith this in mind, we believe that it is key to success that data is delivered as a service to the business.", "start_char_idx": 307554, "end_char_idx": 312788, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f419147d-1d8a-4c9d-871b-3b9118fc9a95": {"__data__": {"id_": "f419147d-1d8a-4c9d-871b-3b9118fc9a95", "embedding": null, "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21", "node_type": "4", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "7b8ab6f4cd22076034037208ddad5c4e39dec1170ddfde79e3ef7c946fa0a322", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e974e9eb-a7c9-4308-a8e1-f1a0615b9b69", "node_type": "1", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "de438ff09581b0caffb241f58af2b58a476bde803c9984e8af67e44be12651af", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0b6dc728-aed7-46e4-99c0-c729021d22d0", "node_type": "1", "metadata": {}, "hash": "690492e116c7ec300cc06351760b4cd78e7220258bd579cbbfaff48c486e35f9", "class_name": "RelatedNodeInfo"}}, "text": "We call this approach nail it, then scale it.\nThinking Holistically\nA successful data programme considers data holistically. The scope encompasses considering a technology platform for managing the data, the processes for managing and governing the data, information and cyber security, data valuation and condition, analytics, BI and visualisation. Critically, it also includes how you exploit the data to support your business strategy.\nUnsuccessful data programmes can fail on any or all of these factors. Widely discussed reasons for failure include complicated technology, unrealistic expectations, lack of communication between IT and business, and skills gaps. We would also add operational complexity to this list.\nWith this in mind, we believe that it is key to success that data is delivered as a service to the business. It\u2019s not simply an IT project, which is how many data programmes are approached today. Rather, it\u2019s the combination of all these things wrapped in a set of services that are offered to those that use or interact with data within a business.\nWe call this data as a business service and have introduced service design into our data deliveries to help organisations implement data effectively. When you look at data through the lens of providing a service to the business, you can start to ask:\n\u25cb \u25cb\nWhat questions are people in the business trying to answer? And why?\nWhat kind, quality, volume and frequency of data might people need to help them answer these questions?\n 284\nEnterprise Data\n\n\u25cb How will people turn data into information \u2013 that is, what context do they need around the data and how will this be provided\nand understood?\n\u25cb How will people turn this information into action? How will it improve outcomes and impact?\nThe key word in each of these questions is \u2018people\u2019. If you\u2019re in the position of starting a data project from scratch, don\u2019t start with the technology, start with \u2013 and speak to \u2013 people. Ask questions, frame the problems you\u2019re trying to solve and capture user needs before exploring how to solve them.\nAssuming a data platform is part of your solution, it\u2019s equally important to keep a human-centred, service-oriented lens on how you design, build, launch and operate it. This means you can ask questions such as:\n\u25cb How will people get data into the platform?\n\u25cb How will people discover, access and use data in the platform?\n\u25cb What kind of support will people need?\n\u25cb How will the existence and value of the platform be communicated to people?\n\u25cb Who will run and maintain the platform, and how?\nA tool we use to help answer these questions is the service blueprint. This captures the end-to-end user journeys of people interacting with the platform, expresses their user needs at each significant step, and maps out holistically what should be in place to meet those needs from the perspectives of people, technology, process, policy and partnerships.\nWhen used as part of an Agile delivery, a service blueprint can act\nas a living document and focal point for keeping a human-centred perspective on what the team is building. It can evolve and flex as you continue to learn from users and the business, and help you respond to\n Enterprise Data 285\n\npivots along the way by highlighting gaps or new areas that might need to be addressed to ensure successful delivery.\nFinally, when building a data platform, it can be tempting to try and boil the ocean, especially if you\u2019ve done your user research and have identified lots of needs to cater to. We recommend a more measured approach. Aim to deliver value throughout, prioritise your backlog and consider your business objectives as well as the needs of your users. A helpful tool for this is a strategic roadmap. This allows you to plot out themed user needs, business goals and alignment with other initiatives so that you can plan your effort and budgets accordingly.\nDelivering a Steel Thread\nMany enterprise data programmes take a long time to start delivering value to the business, with a linear dependency between data platform delivery and exploitation of data for business value. This echoes the traditional, Waterfall approach to systems delivery which is being superseded by Agile approaches. However, just as functionality can be made redundant by changes in the environment, so data value is often dependent on timing. If value from data isn\u2019t delivered to the business when it can be exploited, opportunities are lost and the vision for data is tarnished. Interest in continued funding can quickly wane when return on investment is not forthcoming.\nWe have seen great success in delivering data programmes \u2013 including platform, data management, service design and data exploitation \u2013 through the adoption of steel threading. The steel thread is a software engineering concept that\u2019s popular in Agile development approaches. A system\u2019s main functionality is like a thread that runs through the system. Since all the other functionality is based on this thread, it needs to be very robust and reliable \u2013 as strong as steel.", "start_char_idx": 311957, "end_char_idx": 317007, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0b6dc728-aed7-46e4-99c0-c729021d22d0": {"__data__": {"id_": "0b6dc728-aed7-46e4-99c0-c729021d22d0", "embedding": null, "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21", "node_type": "4", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "7b8ab6f4cd22076034037208ddad5c4e39dec1170ddfde79e3ef7c946fa0a322", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f419147d-1d8a-4c9d-871b-3b9118fc9a95", "node_type": "1", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "ff3e82c733c9430cede37466b7e1e05fd1e938b2c322b73c1003f0fc148f0d0b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "638f299a-16a7-4d56-9df9-9c1dd608a004", "node_type": "1", "metadata": {}, "hash": "b713f8ecd6698e2e144e1b0d7287bb54a90b183adb6bea00702369d8d6161eda", "class_name": "RelatedNodeInfo"}}, "text": "This echoes the traditional, Waterfall approach to systems delivery which is being superseded by Agile approaches. However, just as functionality can be made redundant by changes in the environment, so data value is often dependent on timing. If value from data isn\u2019t delivered to the business when it can be exploited, opportunities are lost and the vision for data is tarnished. Interest in continued funding can quickly wane when return on investment is not forthcoming.\nWe have seen great success in delivering data programmes \u2013 including platform, data management, service design and data exploitation \u2013 through the adoption of steel threading. The steel thread is a software engineering concept that\u2019s popular in Agile development approaches. A system\u2019s main functionality is like a thread that runs through the system. Since all the other functionality is based on this thread, it needs to be very robust and reliable \u2013 as strong as steel. In the data programme context, we can define a steel thread of functionality, data, service and value running end-to-end, and deliver this into production first. Using this approach, you build some of the core aspects of the technology\n 286 Enterprise Data\n\n platform, onboard key initial data sources, deliver a use case which generates business value and thereby create a platform upon which to deliver further use cases iteratively, each time building out parts of another thread.\nAgile principles are often not applied to the delivery of data platforms, aside from certain aspects of the Agile operating rhythm. We advocate taking more learnings from Agile and the wider field of software delivery into data delivery \u2013 the section on DataOps below goes into further detail on this.\nFigure 11-2: Data Programme Steel Thread Approach\nPlatform\nData Management\n   Service Design\nData Exploitation\nSteel Thread\n Enterprise Data\n287\n\n Using the Right Technology\nTechnology in the big data space has been genuinely difficult for years. The invention of Hadoop was a turning point for data in the enterprise, but it was also a huge peak in complexity \u2013 one that many significantly underestimated.\nBig data technologies can be hard to integrate, understand, deliver and operate. Implementing technology in this space has required specialist engineering skills and the skills gap has been significant. This has led to many organisations asking technical staff to learn as they go, adding uncertainty to the delivery timeline and risk to the initiative.\nFigure 11-3: Hadoop Complexity\nHadoop on prem\n288\nEnterprise Data\nHadoop on IaaS\nHDInsight / EMR\nServerless\nTime\n Complexity\n\nIdeally, organisations want to learn on small, low-risk projects. But\nin this case, much of the learning has been undertaken on expensive programmes and platforms that are potentially critical to business success. Clearly, this represents a huge risk and has had a large part to play in the failure of enterprise data strategy.\nRecently, however, there has been a significant reduction in complexity through platform-as-a-service and serverless data services offered\nby the major public Cloud providers. These services are fully managed by the Cloud provider, with resources often dynamically managed\nand allocated, allowing the developer to focus on business logic\nand functionality over servers and infrastructure. This can make the technology part of the data equation significantly more straightforward.\nThe benefits of reduced complexity in data platforms cannot be stressed enough. While there is huge potential for value in an enterprise data platform, it is no use if you can\u2019t easily build upon it or operate it\nin production effectively \u2013 a trend we saw with on-premise Hadoop data lakes. While there are well-known tales of hugely successful big data solutions at organisations like Netflix and Uber, most enterprises do not have the engineering capability or investment needed to handle such highly complex software and data solutions. Nor, frankly, do they have requirements that demand such complexity.\nThere are trade-offs to be made in the use of serverless data capabilities. They often offer a reduced set of features or other compromises such as performance reductions in certain circumstances. Some organisations are wary of serverless data services because they don\u2019t support potential future requirements, one example being effective monitoring and workflow of data pipelines in AWS\u2019 serverless data services.\nHowever, for the price, you\u2019ll get significantly reduced operational complexity, reduced engineering complexity, faster delivery times, and fewer bugs and operational issues. While decisions around technology and Cloud services should be made on a case-by-case basis with\n Enterprise Data 289\n\nall considerations taken into account, we recommend weighting the benefits of serverless data services very heavily. We would also go so far as to recommend making any new data programme fully Cloud native by default.\nImplementing a DataOps Culture\nAutomation\nAutomating data pipeline activity will increase velocity and repeatability, helping to overcome one of the common issues with data platforms: long lead times to onboard new data sources, resulting in unavailability of data when users need it.", "start_char_idx": 316061, "end_char_idx": 321309, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "638f299a-16a7-4d56-9df9-9c1dd608a004": {"__data__": {"id_": "638f299a-16a7-4d56-9df9-9c1dd608a004", "embedding": null, "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21", "node_type": "4", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "7b8ab6f4cd22076034037208ddad5c4e39dec1170ddfde79e3ef7c946fa0a322", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0b6dc728-aed7-46e4-99c0-c729021d22d0", "node_type": "1", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "84ac0596946a8b99f953e0db59bc1ff889b0c8ac649e5a8ea333a3c189888ea7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ae3a4bca-3ad0-4ac2-ac9e-3e11a4a64f41", "node_type": "1", "metadata": {}, "hash": "7fc81943c8aabfbd26a4f133de85d1e61c0a6455bee82a3f58da51906d0027bc", "class_name": "RelatedNodeInfo"}}, "text": "Some organisations are wary of serverless data services because they don\u2019t support potential future requirements, one example being effective monitoring and workflow of data pipelines in AWS\u2019 serverless data services.\nHowever, for the price, you\u2019ll get significantly reduced operational complexity, reduced engineering complexity, faster delivery times, and fewer bugs and operational issues. While decisions around technology and Cloud services should be made on a case-by-case basis with\n Enterprise Data 289\n\nall considerations taken into account, we recommend weighting the benefits of serverless data services very heavily. We would also go so far as to recommend making any new data programme fully Cloud native by default.\nImplementing a DataOps Culture\nAutomation\nAutomating data pipeline activity will increase velocity and repeatability, helping to overcome one of the common issues with data platforms: long lead times to onboard new data sources, resulting in unavailability of data when users need it. Patternised ingest with full automation, testing and monitoring will greatly simplify the task of ingestion. When implemented successfully, this can reduce data ingest from weeks or days to hours or minutes.\nAutomating testing, deployment and infrastructure will enable you to implement continuous integration and continuous delivery for your data platform. While this is similar to the approach taken in software development, there are some interesting quirks that can make this\na challenge in data platforms \u2013 for example, automating testing and deployment of code contained in notebook form.\nSecurity and Compliance\nData residing in data lakes and warehouses can be of high value to an attacker. We recommend that you implement security as early as possible in your SDLC and ensure your Data Engineering Team is well versed in common exploits and secure development approaches.\n 290 Enterprise Data\n\nYou should design the platform to be secure from the outset. Access issues are more easily overcome when defining the security model than when retrofitted to an existing model. Additionally, this allows your team to run effective, incremental threat modelling sessions, identifying security risk early and often. The outputs from this approach will aid implementation of appropriate security controls.\nFinally, use Cloud native capabilities to ensure regulatory compliance. Develop blueprints, templates and compliance-as-code, which can transform one-time InfoSec sign-off into continually monitored, business-as-usual compliance. This provides an early warning system, saving you from potential data breaches.\nAssurance\nAvailability of test data is paramount. Without enough high-quality test data, it is challenging to effectively test your pipelines, performance and analytics, increasing the risk of unexpected issues when switching to production workloads.\nA testing strategy designed to work in production through isolation of data is an excellent investment. This will enable you to run high quality end-to-end testing with production data, significantly reducing the risk of unexpected outcomes in live operation.\nPeer review, paired working and collaborative sessions including security and design should also be used to provide further quality assurance.\nOperational Monitoring\nLike DevOps, DataOps is as much about operating a data platform and data flows as it is about developing them. Identification of metrics required to operate the platform and KPIs required to operate the business will allow you to set up operational monitoring, logging and\n Enterprise Data 291\n\nalerting early on. Information gained from trend analysis, combined with feedback from users, can form further backlog stories for improvements.\nData Science Enterprise Agility\nWe touched on conducting data science when we discussed MLOps, but data science doesn\u2019t have to be death by a thousand experiments. Doing lots of experiments isn\u2019t Agile. In fact, it\u2019s often wasteful. Extend your thinking beyond experimentation and look to how data science can make a sustainable difference to the business. Experimental phases should be regarded as preparatory to more widespread change. Some organisations ignore or forget their exploratory work when it is done and fund projects with little promise.\nBusiness Teams sometimes invest in data science projects without considering the deployment and ongoing operational state of produced applications. This means that teams of data scientists create proofs\nof concept which need to be handed over to a traditional software operations environment which is unprepared to receive and operate them. A good way to avoid this divergence is to create hybrid Data Science Development Teams \u2013 although this will clearly require additional investment.\nMachine learning originated as a research endeavour and the most experienced people in the field come from that world. But as the techniques of data science enter the mainstream, research culture needs to adapt to or blend with the business delivery environment.\nA practical way to do this is to balance research-led workloads with value-led ones. The two approaches have equal validity; it\u2019s not the case that blue-sky experiments must always take second place to projects considered more realistic in terms of current business goals. It can be hard to understand the potential use cases of something entirely new, such as graph databases. In such cases, well-designed experiments can suggest new paths for development or terminate unpromising paths before too much time or effort has been expended.", "start_char_idx": 320295, "end_char_idx": 325882, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ae3a4bca-3ad0-4ac2-ac9e-3e11a4a64f41": {"__data__": {"id_": "ae3a4bca-3ad0-4ac2-ac9e-3e11a4a64f41", "embedding": null, "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21", "node_type": "4", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "7b8ab6f4cd22076034037208ddad5c4e39dec1170ddfde79e3ef7c946fa0a322", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "638f299a-16a7-4d56-9df9-9c1dd608a004", "node_type": "1", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "4fbb595c49fe6ebb339d0b5d8363dbd0d651cf41dd7c4bb891717ce1109c72f8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1ba1b3ea-a30c-4107-ac01-8fc170a6c12e", "node_type": "1", "metadata": {}, "hash": "bbb1c72a3d8fb4611d63c63e3c457ebe737e08b6b991a98c9b54c58d8b806aff", "class_name": "RelatedNodeInfo"}}, "text": "A good way to avoid this divergence is to create hybrid Data Science Development Teams \u2013 although this will clearly require additional investment.\nMachine learning originated as a research endeavour and the most experienced people in the field come from that world. But as the techniques of data science enter the mainstream, research culture needs to adapt to or blend with the business delivery environment.\nA practical way to do this is to balance research-led workloads with value-led ones. The two approaches have equal validity; it\u2019s not the case that blue-sky experiments must always take second place to projects considered more realistic in terms of current business goals. It can be hard to understand the potential use cases of something entirely new, such as graph databases. In such cases, well-designed experiments can suggest new paths for development or terminate unpromising paths before too much time or effort has been expended.\n 292 Enterprise Data\n\nEffective data science models integrate with other software platforms and are therefore subject to enterprise governance and controls as other technologies evolve. It can be tempting to impose the same management formalities as you would on software delivery. But data science is characteristically distinct from traditional software delivery:\n\u25cb Activities are harder to predict and plan (because they are exploratory and research-driven)\n\u25cb Instead of producing high-quality software with each iteration, the objective is to evaluate hypotheses as quickly as possible\n\u25cb Early-stage data science focuses on the quality of the model rather than its code.\nEnterprise Agile data science prioritises early demonstration of working models alongside transparent and continuous sharing of results with the customer. Data Science Teams in an Enterprise Agile environment anticipate and address ambiguity and unknowns, using their close links with the intended beneficiaries to clarify and refine rather than generate multiple alternatives. They deliver models or model outputs frequently, breaking delivery down into iterations and running live demonstrations of each iteration with the sponsor for immediate detailed feedback. They hold regular planning sessions to determine approaches or enhancements. Weekly and even daily iterations are common.\nThe nature and speed of data science projects mean that formal written documentation is often inappropriate due to the rapid pace of change and the complexity of the underlying methods. It\u2019s therefore better to use face-to-face conversation as much as possible.\nThe problem spaces in data science are varied and the required business expertise is often to be found at the edge of the organisation rather than in the centre. For this reason, encourage co-operation between Subject Matter Experts (SMEs) and the Data Science Delivery Team.\n Enterprise Data 293\n\nTeams should direct their own work and feel responsible for the project and accountable for its success. Their attention should be trained on reaching a minimum viable algorithm rather than exploring every possible type of solution, catering for every variant of input or addressing every potential use case in the domain.\nPlan the work so that it can be delivered at a predictable pace. Enterprise data science initiatives are likely to be accompanied by expectations about releasing value within a budget and are therefore subject to the same practical disciplines as other parts of the organisation. Work in iterations and plan on delivering work within allotted times so that delivery stays on track.\nAlthough the primary aim in data science projects is to build great models rather than craft exemplary code, there\u2019s no doubt that good software engineering habits contribute to solutions that are more adaptable and usable as well as being more affordably integrated. Clean code with minimal dependencies improves the delivery of models intended to be iteratively enhanced. Data scientists from a purely experimental background may not have been exposed to professional software development practices. Helping them understand the benefits of clean code \u2013 to their own practice as well as to the organisation as\na whole \u2013 will lead to greater productivity and satisfaction as well as better quality software.\nDomesticating and professionalising data science in the enterprise setting ultimately means evolving a multi-disciplined capability that embraces analytical engineering, requirements definition, architecture and design work. The journey will include empirical retrospectives on the process and experience to date with adjustment of the team\u2019s methods to maximise efficiency and effectiveness.\n 294 Enterprise Data\n\n Key Points\n1. Align business and IT. Data is not an IT project or platform, it\u2019s a service that the business consumes to generate value.\n2. Drive out business value early and often, and don\u2019t leave data science until after you\u2019ve finished all the basics (they take a long time and there\u2019s lots you can do in the meantime).\n3. Data is not just an asset to be managed, it underpins business-critical services. It has many users and stakeholders. It needs to be governed, protected, analysed and all the rest. Think about data holistically and design around it for the needs of the business.\n4. Get to value quickly while still building strategically. Build out your data platform, management and exploitation through steel threads of value.\n5. Choose your data technologies carefully\n- some can be cumbersome, complex and unsuitable for quick iteration without a lot of initial effort.", "start_char_idx": 324935, "end_char_idx": 330518, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1ba1b3ea-a30c-4107-ac01-8fc170a6c12e": {"__data__": {"id_": "1ba1b3ea-a30c-4107-ac01-8fc170a6c12e", "embedding": null, "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21", "node_type": "4", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "7b8ab6f4cd22076034037208ddad5c4e39dec1170ddfde79e3ef7c946fa0a322", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ae3a4bca-3ad0-4ac2-ac9e-3e11a4a64f41", "node_type": "1", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "b8f123c0f069553ea1261cb6dbf43a5c9c398f8418210ee1bd276c506310beef", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "15db8f52-7a3e-47c6-a2c2-5744cc50bb67", "node_type": "1", "metadata": {}, "hash": "3faf5ce001a921901c8a7225a8198a0aea16dbd38af9f42369e515107f7629bf", "class_name": "RelatedNodeInfo"}}, "text": "294 Enterprise Data\n\n Key Points\n1. Align business and IT. Data is not an IT project or platform, it\u2019s a service that the business consumes to generate value.\n2. Drive out business value early and often, and don\u2019t leave data science until after you\u2019ve finished all the basics (they take a long time and there\u2019s lots you can do in the meantime).\n3. Data is not just an asset to be managed, it underpins business-critical services. It has many users and stakeholders. It needs to be governed, protected, analysed and all the rest. Think about data holistically and design around it for the needs of the business.\n4. Get to value quickly while still building strategically. Build out your data platform, management and exploitation through steel threads of value.\n5. Choose your data technologies carefully\n- some can be cumbersome, complex and unsuitable for quick iteration without a lot of initial effort. Pick your technology well and use the Cloud.\n6. Embed a DataOps culture (similar to DevOps) into your data delivery, from automation to operational monitoring of machine\nlearning models.\n Enterprise Data 295\n\n Afterword\nEnterprise Agile\u00ae is based on 30 years\u2019 experience in delivering and supporting business-critical systems. We have helped many public and private sector clients adopt Enterprise Agile to improve the delivery of change initiatives within their organisations.\nWe hope you found the concepts and approach we presented in this book useful. If you would like to begin your journey towards greater Agility, you can find out more at bjss.com/enterprise-agile.\nGet in Touch\nBJSS @BJSSLtd info@bjss.com\n    296\nAfterword\n\nAppendix A Engineering Successful Change\nWe are often asked about the common pitfalls and lessons we have learned from running the hundreds of projects that we have undertaken over the last 30 years. In our experience the likelihood of enjoying a\n\u2018No surprises endgame\u2019 is dramatically improved by following these golden rules:\n1. Use a Product Lifecycle to define a pattern to de-risk delivery.\nUse Feasibility, Discovery, and Delivery phases to provide a \u2018ready, aim, fire\u2019 approach\n2. Implement structured and layered analysis to ensure that user needs always relate back to a business outcome\n3. Account for all user needs and define non-functional requirements, including operational requirements during the Discovery phase\n4. Employ routine Sprint events to plan, monitor, and control delivery.\nAlways use Planning, Stand-up, Show and Tell, and Retrospective sessions. Never delay or cancel them\n5. Only take stories into Sprints when they meet the Definition of Ready. Stories are only counted as complete when they meet the Definition of Done\n6. Ensure Analysis, Development and Test are organised as cohesive activities working at the same rate towards common goals. Never allow these activities to become separated or any one of them to fall behind or out of sync with the others\n7. Prove architecture early by using testing that can be automated and repeated continuously throughout delivery\n Appendix A 297\n\n8. Build a fully automated delivery pipeline during Sprint 0 that includes tooling for development and deployment. If any part of the pipeline breaks, software production should stop until\nit is fixed. Never, for example, work around a failing build by ignoring tests\n9. Attend to data migration early and always test with migrated production data throughout delivery. Only in cases where this is not possible due to security reasons, use synthetic or anonymised data which must still be production-like\n10. Create a transparent, \u2018visible to all\u2019, metrics dashboard that is fed automatically by the delivery pipeline tooling. Ensure that progress and quality are measured.\n 298\nAppendix A\n\nAppendix B\nGlossary Agile\nA software development approach involving the Discovery of requirements and development of solutions using collaborative, self-organising, and cross-functional teams which include end users.\nAWS\nAmazon Web Services. A provider of on-demand Cloud computing services.\nBimodal IT\nA model for separating slow-changing systems of record from faster changing and more Agile systems of engagement.\nBurn-down Chart\nA graphical representation of work left to do versus time. Also known as a burn-up chart.\nCapability\nA logical grouping of individuals with the same role taken from several teams.\nCloud\nFlexible compute, storage, and network capability that may be configured as software using defined APIs.\n Appendix B 299\n\nCMDB\nContent Management Database. An inventory log of all the components parts of the underlying technology platform on which the product runs.\nCohort\nA group of related users who undertake similar tasks using the product.\nCommunity\nA community is an interest group across a large Product Team or organisation, that looks at ways to share knowledge and improve ways of working in a particular technology or business domain.", "start_char_idx": 329613, "end_char_idx": 334526, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "15db8f52-7a3e-47c6-a2c2-5744cc50bb67": {"__data__": {"id_": "15db8f52-7a3e-47c6-a2c2-5744cc50bb67", "embedding": null, "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21", "node_type": "4", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "7b8ab6f4cd22076034037208ddad5c4e39dec1170ddfde79e3ef7c946fa0a322", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1ba1b3ea-a30c-4107-ac01-8fc170a6c12e", "node_type": "1", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "3f1f404a2200af4c475f5d153d21d314e02e10c129515c5d33bc4da7f98dde56", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8f468a4d-c8a3-4b9f-b817-8a751cd9c86e", "node_type": "1", "metadata": {}, "hash": "cafe2ca3ad91750f74a11d0af56ff0c98454c840496310ba511c1adff2fbced6", "class_name": "RelatedNodeInfo"}}, "text": "AWS\nAmazon Web Services. A provider of on-demand Cloud computing services.\nBimodal IT\nA model for separating slow-changing systems of record from faster changing and more Agile systems of engagement.\nBurn-down Chart\nA graphical representation of work left to do versus time. Also known as a burn-up chart.\nCapability\nA logical grouping of individuals with the same role taken from several teams.\nCloud\nFlexible compute, storage, and network capability that may be configured as software using defined APIs.\n Appendix B 299\n\nCMDB\nContent Management Database. An inventory log of all the components parts of the underlying technology platform on which the product runs.\nCohort\nA group of related users who undertake similar tasks using the product.\nCommunity\nA community is an interest group across a large Product Team or organisation, that looks at ways to share knowledge and improve ways of working in a particular technology or business domain.\nContinuous Delivery\nThe process of technical automation for software build and deployment.\nDataOps\nAn automated, process-orientated methodology used to improve the quality and cycle-time of value from data.\nData Fabric\nThe concept of a layer of data and information of all different forms, using multiple technologies and architectural patterns for storage, processing, and retrieval.\nData Lake\nA repository of data stored in a raw format.\nData Mesh\nA decentralised approach to data ownership and management, in which distributed data domains are managed by dedicated teams as products.\n 300 Appendix B\n\nData Science\nThe use of scientific methods to extract knowledge and insights from structured and unstructured data.\nData Warehouse\nA central repository of structured and integrated data sourced from one or more systems.\nDelivery\nA body responsible for ensuring that solution designs are fit for purpose and work within the enterprise architecture.\nDelivery Manager\nAn individual who works as part of the product leadership function, and is responsible for the delivery of change and the service for the product.\nDelivery Team\nA group of individuals working towards a common goal and implementing change.\nDesign Authority\nMakes decisions on the functional and technical options for realising change.\nDevOps\nThe combination of software development and IT operations to shorten the system development lifecycle and provide continuous delivery with high software quality. Closely related to Agile software development.\n Appendix B 301\n\nDigital Transformation\nA form of business strategy, management, operations, and culture that places digital technology at the core of every organisational concern.\nDiscovery\nAn intensive risk reduction phase in the Enterprise Agile product lifecycle used to establish a feature backlog for the MVP, prove solution architecture, refine the delivery approach, and establish assurance and governance controls.\nEpic\nA large user story that cannot be delivered in one iteration, or that is split into a series of stories.\nFeasibility\nThe first phase of the Enterprise Agile product lifecycle used to establish goals and objectives.\nFeature\nA coarse-grained functional requirement, that performs a major step in a user journey. Features are decomposed into epics and stories.\nForming\u2013storming\u2013norming\u2013performing\nA staged model of group development first described by Bruce Tuckman in 1965.\nFull Stack Engineer\nA technologist who undertakes the full range of engineering tasks required to deliver change.\n 302 Appendix B\n\nGovernance\nThe processes of controlling and operating an organisation.\nHadoop\nOpen-source software that uses a network of multiple computers to solve problems that require massive amounts of data and computation.\nHolacracy\nA system of decentralised management and organisational governance in which authority and decision making are distributed amongst self-organising teams, rather than lodged with a management hierarchy.\nIncremental Delivery\nThe process of delivering change in discrete chunks.\nInnovation Lab\nThe combination of Lean thinking, processes and behaviours to generate new ideas for products.\nINVEST\nA widely accepted set of criteria, or checklist, to assess the quality of a user story. The checklist is: Independent, Negotiable, Valuable, Estimable, Small, Testable. If the story does not meet any of these criteria, the team are challenged to reword or rewrite it.\nITIL\nThe Information Technology Infrastructure Library. A standard set of processes for service management.\n Appendix B 303\n\nJava\nA general-purpose, object-oriented programming language designed\nto have as few implementation dependencies as possible, so that application developers can write a single program that runs on multiple platform types.\nKanban\nA Lean process for the delivery of change based on work-in-progress limits.\nKDD\nKey Design Decision log. Used to record the output of a design authority process.\nLean\nDerived from the Toyota Production System, Lean manufacturing is a method of working aimed at improving flow, eliminating waste, and increasing quality. Lean principles have since been applied to fields beyond manufacturing, including service industries and government.\nLeSS\nLarge Scale Scrum framework. A method for scaling Scrum.", "start_char_idx": 333579, "end_char_idx": 338813, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8f468a4d-c8a3-4b9f-b817-8a751cd9c86e": {"__data__": {"id_": "8f468a4d-c8a3-4b9f-b817-8a751cd9c86e", "embedding": null, "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21", "node_type": "4", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "7b8ab6f4cd22076034037208ddad5c4e39dec1170ddfde79e3ef7c946fa0a322", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "15db8f52-7a3e-47c6-a2c2-5744cc50bb67", "node_type": "1", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "af3ea130b80de7e945cb85bb42901f5401727cf4a100cd67d497ef31d59a088a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c1d7f2e5-3b81-4500-8e6f-3b4390d430ad", "node_type": "1", "metadata": {}, "hash": "9950dc513efc2299641d608381de2d227a6054a20a24a3029120f5a6e3b33a19", "class_name": "RelatedNodeInfo"}}, "text": "If the story does not meet any of these criteria, the team are challenged to reword or rewrite it.\nITIL\nThe Information Technology Infrastructure Library. A standard set of processes for service management.\n Appendix B 303\n\nJava\nA general-purpose, object-oriented programming language designed\nto have as few implementation dependencies as possible, so that application developers can write a single program that runs on multiple platform types.\nKanban\nA Lean process for the delivery of change based on work-in-progress limits.\nKDD\nKey Design Decision log. Used to record the output of a design authority process.\nLean\nDerived from the Toyota Production System, Lean manufacturing is a method of working aimed at improving flow, eliminating waste, and increasing quality. Lean principles have since been applied to fields beyond manufacturing, including service industries and government.\nLeSS\nLarge Scale Scrum framework. A method for scaling Scrum.\nMicroservice\nA microservice architecture is one where an application or system is developed as a group of smaller independent services.\nMLOps\nMachine Learning Ops. A collaborative practice for Data Scientists and Operations Teams to manage production.\n 304 Appendix B\n\nMVP\nMinimum Viable Product. The version of a product that allows a team to collect the maximum amount of validated learning with the minimum amount of work.\nMVS\nMinimum Viable Service. The minimum number of service management processes that need be in place when a product goes live (usually incident management, change management, release management\nand event management). Additional processes outside of the MVS are expected to be implemented after the product is live.\nMulti-speed IT\nEncapsulates the principle of different levels of Agility in different types of systems, for example pace layering and Bimodal IT.\nNexus\nA framework which enables multiple Scrum Teams to work on one project.\nNFRs\nNon-functional Requirements. System attributes such as security, reliability, performance, maintainability, scalability, and usability.\nOrganisation\nThe business or enterprise seeking to deliver change and run technology products.\n Appendix B\n305\n\nPace Layering\nA model for separation of systems that change at different rates and levels of Agility. The common three layers are systems of innovation, systems of differentiation, and systems of record.\nPattern\nA reusable solution to a commonly occurring problem within a set context.\nPersona\nA life-like description of an actual user of the product, used by the team to gain greater insight into user needs.\nPortfolio\nThe organisation\u2019s collection of technology products and services.\nProduct\nThe combination of technology and manual processes required to deliver a service to users.\nProduct Backlog\nThe prioritised list of user stories to be delivered.\nProduct Board\nGovernance forum where decisions outside of the remit of the Product Team are taken.\nProduct Increment\nOne or more features that have been added to the product for a release.\n 306 Appendix B\n\nProduct Owner\nIn Agile approaches, the individual responsible for the value of the product being built by the team. The Product Owner is also responsible for managing the product backlog.\nProduct Roadmap\nA statement of intent with broad milestones and features for product delivery.\nProgramme\nA collection of several related change projects.\nProject\nA container for change to a product.\nQA\nQuality Assurance. The practice of monitoring software engineering processes and projects to ensure quality of the software. May include ensuring conformance to published standards.\nRAG\nRed, amber, green. A means of indicating the risk status of activities where green means on-track, amber indicates live issues, and red means serious issues.\nRelease Sprint\nA special purpose Sprint used to integrate the product with non-Agile changes elsewhere in the portfolio.\n Appendix B 307\n\nSAFe\nScaled Agile Framework. A set of organisational and workflow patterns to help enterprises in scaling Agile practices.\nScrum\nAn Agile framework for developing, delivering, and sustaining complex products \u2013 originally for software products but latterly applied to other fields.\nSDLC\nSystem development lifecycle. A process for planning, creating, testing, and deploying an information system.\nService Blueprint\nA process chart which shows the end-to-end journeys made by users of a service, including everything required to meet their needs at each step.\nService Team\nA group of support analysts and engineers who resolve incidents in a live product.\nService Management\nManagement of the operational processes and support of a system typically in production.\nService Wrap\nThe set of manual processes, tools, and technology that are used to run the product in a production environment and support the user.\n 308 Appendix B\n\nShear Layering\nAn architectural principle that indicates that different aspects of a structure change at different rates.\nSprint\nA timeboxed unit of development effort in Scrum, usually between one week and one month.\nSprint 0\nA special purpose Sprint used at the start of the Delivery phase to build and prime the delivery pipeline.", "start_char_idx": 337862, "end_char_idx": 343024, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c1d7f2e5-3b81-4500-8e6f-3b4390d430ad": {"__data__": {"id_": "c1d7f2e5-3b81-4500-8e6f-3b4390d430ad", "embedding": null, "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3aab8c21-2f01-49ea-bd9e-dd247cf49c21", "node_type": "4", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "7b8ab6f4cd22076034037208ddad5c4e39dec1170ddfde79e3ef7c946fa0a322", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8f468a4d-c8a3-4b9f-b817-8a751cd9c86e", "node_type": "1", "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}, "hash": "d58a512e2f0c966c6a80a56e9aa6d528864eaf284b092008c669d0ef4bf8346c", "class_name": "RelatedNodeInfo"}}, "text": "SDLC\nSystem development lifecycle. A process for planning, creating, testing, and deploying an information system.\nService Blueprint\nA process chart which shows the end-to-end journeys made by users of a service, including everything required to meet their needs at each step.\nService Team\nA group of support analysts and engineers who resolve incidents in a live product.\nService Management\nManagement of the operational processes and support of a system typically in production.\nService Wrap\nThe set of manual processes, tools, and technology that are used to run the product in a production environment and support the user.\n 308 Appendix B\n\nShear Layering\nAn architectural principle that indicates that different aspects of a structure change at different rates.\nSprint\nA timeboxed unit of development effort in Scrum, usually between one week and one month.\nSprint 0\nA special purpose Sprint used at the start of the Delivery phase to build and prime the delivery pipeline.\nSprint Backlog\nThe list of user stories to be delivered in a given Sprint.\nStory\nA story or user story is an informal description of a feature of a system, usually written from the point of view of the user.\nStory Point\nA level of difficulty assigned to a story.\nStream\nA group of teams working in a related functional or technical area.\nTDA\nTechnical Design Authority. A body that meets to determine the best route forward for technical design decisions. It may be part of a generic design authority function.\n Appendix B 309\n\nTDD\nTest Driven Development. A software engineering practice where tests are written ahead of the software performing the function.\nTechnical Debt\nThe implied cost of rework caused by choosing an easy approach rather than a better approach that would take longer.\n\u2018T-shaped\u2019 Individual\nSomeone who is an expert in at least one area and capable in many other areas.\nTOGAF\nThe Open Group Architecture Framework. A framework for enterprise IT architecture that includes design, planning, implementation, and governance.\nTQP\nTechnical Quality Plan. Defines the practices required to maintain a high-quality codebase.\nUser\nAn individual who uses the product.\nValue\nThe benefit an organisation gains from implementing change and delivering a product to its customers.\nXP\nStands for extreme Programming. A set of practices for Agile software development.\n 310 Appendix B\n\n\n Innovations in technology and commerce have combined to disrupt traditional business models and drive an increased pace of change.\nOrganisations are looking to employ new working methods and technologies to increase their Agility, whilst remaining efficient and without introducing significant risk.\nBJSS has developed the Enterprise Agile\u00ae approach to help organisations realise greater value through increased flexibility to meet user needs. The approach has been developed by expert practitioners and draws on 30 years\u2019 experience of successful delivery for public and private sector clients.\nThis book presents key concepts of the Enterprise Agile approach and offers practical guidance for anyone involved in the delivery and support of technology-led products and services.\nbjss.com/enterprise-agile", "start_char_idx": 342046, "end_char_idx": 345225, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}}, "docstore/ref_doc_info": {"3aab8c21-2f01-49ea-bd9e-dd247cf49c21": {"node_ids": ["869b4319-8490-4387-88d0-fb025e3fbf22", "4e78e5ea-1ae5-4124-a267-429cab145046", "0f94f635-1835-4233-b8ef-9b9a7d1496be", "c5428558-3b7c-4af0-8d16-a7955c795706", "602ea8a3-0a86-461b-afec-aad512b093e9", "035c7397-aa53-4d82-b8a1-9feca194846c", "284c104f-6f03-4fe8-bf5e-7bc1ade47f74", "02afceb5-ca16-4260-bf28-260a0f55c149", "f4c2ec35-e065-44ca-824f-665b589bee55", "41c9d308-f9f3-4dc6-8cd8-cc2dff1cb62b", "1a20c553-69ec-428f-bcf3-586450459612", "08ec17ac-e048-44a7-a5fa-9a323446cca6", "e696956f-7523-44f3-993f-222102656b2a", "30669a87-ad82-4fdc-a47a-dffc0a313877", "fef6bbc2-01dc-4a09-980e-585cf0021e89", "faa92482-e7b7-4bbb-8750-cd395942cc62", "6e7f70d8-8037-424b-8dce-614a09d2916e", "82b4acb4-1a6d-4da4-b625-50c0f78f246e", "5ab62190-c751-4103-8fe4-acebb7e1c1cf", "afb0623c-4e6e-4795-b073-fdf4af749e3f", "e16f21c2-91e6-435a-a5f6-0b09d50b5ee5", "992e117b-97ec-4a46-9ebe-0abbe431db88", "de7db0e6-fa56-4f54-af35-24594365d7ef", "3068c505-71a2-410f-8141-738d5a1a1bf5", "943f04db-d844-41a0-aeac-e30ba4f8f20b", "b9faadd7-14c0-44d6-8c7d-2fec94f1714e", "0e07597f-51cd-436d-8c10-469e4d21ca03", "1211d1d1-9ac3-425a-a771-32e07b00d24e", "a620f1ff-aa2d-43ef-bb5a-15c53041a2b9", "e60f7546-83e2-4a80-9a48-56b3bff04242", "02dc3922-3bc9-486b-86bd-20e0326d5982", "f760d215-16b3-4b6d-8fc9-8a52656383d9", "bd37b2ff-6801-4d85-9e08-f0a6c31d7353", "ff205f69-68ce-4c13-9043-996917195628", "d3965129-ed1d-4d96-9ffc-f7ec369e3894", "8361a814-bbc9-4c77-b98d-853aa9a89481", "bec26e56-1a18-4d49-98f7-b4f64a5c55f6", "141b43d9-f2a2-4f81-9228-6fc1fea94e69", "dd2abaec-9780-44c8-8e5e-42b94595e26d", "efe66f06-d804-4777-8575-7a4115123488", "38eaa9be-cc39-4337-b5ba-975abb2e7979", "8a3a5e47-3453-4b06-b303-7e27f4d26e24", "2a64de94-2a9f-4b24-9722-51af2f3f6435", "061177d0-a846-4e8d-a4c0-e17acc301fa0", "4ecad45f-8da3-4338-bb37-717c76c05f7a", "fbb530a1-b76e-461c-b22d-278419929366", "cc4c8936-1eff-414d-a833-44b6157396ea", "69ac8749-aad5-488c-9dc1-1c532b9fbacf", "fc8593ab-ee05-41fb-9933-7245144c40e9", "e71812e5-bfd4-4901-a223-161467c9ace7", "9e955de3-0d21-4e8d-b11e-044a037226f2", "8c74cadf-a185-4b5e-91ad-5aaa82a1e85f", "12aeba0e-e585-414b-b3bd-08d8506f7acd", "572fa0a4-1474-42c9-a3ab-231ddcc31c91", "6a27f949-01b8-458a-88bb-d8c2af30527b", "e4b63d4a-8ab2-4473-86f2-579d43fd52ed", "73435b39-0648-446f-bde5-335afe963385", "f61086ce-490b-4e0f-96d6-f3a722d9c953", "e3f1f680-8ee0-425b-8a84-026f5932110f", "549bb890-08ac-42fc-83b5-af2c70ee38f2", "1ea32183-e198-4ca4-bfd2-f9065b6aeeb0", "a72a7af7-aa04-42fa-a791-29dda87f55d2", "2853573c-a62c-494f-9f74-34800c0fe1b5", "fc958e75-9c50-4220-80fe-286a2c341ec3", "08095a1c-786c-4e5c-b688-28164b24f11e", "748b6b8b-2edb-4d2c-a8a8-b7bc69b2073f", "4072bf9b-e8eb-4a62-81eb-e6ef8a3c8809", "d21e97a4-53e2-44b1-8a36-d125f521d76a", "88845729-021c-4536-a5e2-e4b218d383f1", "799817cb-2f20-4e81-9aa5-e0127c2a9958", "a6264c02-2951-4925-8b94-c1da7ff43983", "bf81922e-dd54-43fa-b26a-4a2c13df2aae", "876e9ab1-f2d2-401f-a97d-ada86be8312f", "d2c47cfb-60d0-4839-a245-e4dd8e99b4bc", "7e993ede-ab68-4887-aecd-43bc545095c9", "e974e9eb-a7c9-4308-a8e1-f1a0615b9b69", "f419147d-1d8a-4c9d-871b-3b9118fc9a95", "0b6dc728-aed7-46e4-99c0-c729021d22d0", "638f299a-16a7-4d56-9df9-9c1dd608a004", "ae3a4bca-3ad0-4ac2-ac9e-3e11a4a64f41", "1ba1b3ea-a30c-4107-ac01-8fc170a6c12e", "15db8f52-7a3e-47c6-a2c2-5744cc50bb67", "8f468a4d-c8a3-4b9f-b817-8a751cd9c86e", "c1d7f2e5-3b81-4500-8e6f-3b4390d430ad"], "metadata": {"file_path": "data/Agile.txt", "file_name": "Agile.txt", "file_type": "text/plain", "file_size": 347034, "creation_date": "2024-02-21", "last_modified_date": "2024-02-21", "last_accessed_date": "2024-02-21"}}}}